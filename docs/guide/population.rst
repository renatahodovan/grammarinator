==========
Population
==========

In addition to generating trees from a specific start rule, Grammarinator
also provides support for two evolutionary operators:
:meth:`~grammarinator.tool.GeneratorTool.mutate` and
:meth:`~grammarinator.tool.GeneratorTool.recombine`. These operators require
Grammarinator to maintain a set of trees, known as the population. The
population can be created by either processing existing sources or by
:doc:`generating trees from scratch <test_generation>`.


-----------------------------------------
Population Creation From Existing Sources
-----------------------------------------

The ``grammarinator-parse`` utility provides support for creating an initial
set of trees from real tests or any input that is not necessarily generated by
a fuzzer. This allows the incorporation of real-world scenarios or specific
test cases into the population and apply evolutionary algorithms to generate
variations and explore different test cases.

.. _grammarinator-parse:

.. describe:: The CLI of grammarinator-parse

.. runcmd:: python -m grammarinator.parse --help
   :syntax: none
   :replace: "parse.py/grammarinator-parse"

The usage of the ``grammarinator-parse`` utility is generally straightforward.
It takes a set of inputs (``--input``) and processes them with the specified
grammars (``FILE``). The start rule, which determines the root of every tree
in the population, can be defined using the ``--rule`` argument. After the
parsing is completed and the tree is created, various
:doc:`transformers <transformers>` (``--transformer``) can be applied to
modify the tree before saving it to the file system using the ``--out`` option.

There are two settings that may require further explanation:

  - ``--hidden``: When using `ANTLR`_ to tokenize an input, tokens are sorted
    into various channels. The hidden channel typically contains tokens that
    are not important for the parser and are not explicitly listed at every
    allowed position in the grammar for better readability. Examples of
    such tokens could be whitespaces or comments. However, when working with
    parse trees, including when generating tests, these "hidden" tokens may
    become important. To ensure that hidden tokens are added to the tree,
    the names of the corresponding rules need to be listed using the
    ``--hidden`` argument.

  - ``--max-depth``: Controlling the depth of the generated tree, and therefore
    the size of the serialized test, is important for both generation and
    execution performance. This argument allows to set the maximum depth of
    the tree. Any inputs that exceeds this depth limit will be discarded.
    The :ref:`grammarinator-generate <grammarinator-generate>` utility also
    has a corresponding setting to guide the generator and avoid generating
    excessively deep trees.

.. _`ANTLR`: http://antlr.org/

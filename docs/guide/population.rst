==========
Population
==========

In addition to generating trees from a specific start rule, Grammarinator
also provides support for two evolutionary operators:
:meth:`~grammarinator.tool.GeneratorTool.mutate` and
:meth:`~grammarinator.tool.GeneratorTool.recombine`. These operators require
Grammarinator to maintain a set of trees, known as the population. The
population can be created by either processing existing sources or by
:doc:`generating trees from scratch <test_generation>`.

Grammarinator supports **multiple tree serialization formats** to represent
population members. These formats determine how the population is stored on disk
and consumed by various generation or fuzzing tools.

Supported Tree Formats
-----------------------

1. **FlatBuffer-encoded trees** (``.grtf``):

   - **Recommended** format for both Python and C++ workflows.
   - Compact and fast to read/write.
   - Cross-language compatible (e.g., usable from Python, C++, etc. with
     FlatBuffer_ bindings).
   - Supported natively by:

     - ``grammarinator-generate`` (Python)
     - C++ backend generators (e.g., ``grammarinator-generate-html``)
     - libFuzzer integration (``libgrlf-html.a``)

   - Default format when tree codec is not explicitly selected.

2. **JSON-encoded trees** (``.grtj``):

   - Portable and human-readable format.
   - Slower to process than FlatBuffer.
   - Useful for debugging or language-agnostic inspection.
   - Supported by both Python and C++ components.

3. **Pickle-encoded trees** (``.grtp``):

   - Python-specific format based on the :mod:`pickle` module.
   - Not portable across languages or even Python versions.
   - **Only** usable with ``grammarinator-generate``.
   - Retained primarily for backward compatibility and prototyping.

When creating or using a population, the appropriate format must be specified
consistently across tools using the ``--tree-format`` flag.

.. _FlatBuffer: https://flatbuffers.dev

-----------------------------------------
Population Creation From Existing Sources
-----------------------------------------

The ``grammarinator-parse`` utility provides support for creating an initial
set of trees from real tests or any input that is not necessarily generated by
a fuzzer. This allows the incorporation of real-world scenarios or specific
test cases into the population and apply evolutionary algorithms to generate
variations and explore different test cases.

.. _grammarinator-parse:

.. describe:: The CLI of grammarinator-parse

.. runcmd:: python -m grammarinator.parse --help
   :syntax: none
   :replace: "parse.py/grammarinator-parse"

The usage of the ``grammarinator-parse`` utility is generally straightforward.
It takes a set of inputs and processes them with the specified grammars
(``FILE``). Inputs can be listed as files or directories (using ``--input``), or
specified with file patterns (using ``--glob``). The listed directories are
traversed recursively. The start rule, which determines the root of every tree
in the population, can be defined using the ``--rule`` argument.
The ``--tree-format`` option controls the serialization format of the output
trees. If omitted, the default is ``flatbuffer`` (producing ``.grtf`` files). After
the parsing is completed and the tree is created, various
:doc:`transformers <transformers>` (``--transformer``) can be applied to
modify the tree before saving it to the file system using the ``--out`` option.

There are two settings that may require further explanation:

  - ``--hidden``: When using `ANTLR`_ to tokenize an input, tokens are sorted
    into various channels. The hidden channel typically contains tokens that
    are not important for the parser and are not explicitly listed at every
    allowed position in the grammar for better readability. Examples of
    such tokens could be whitespaces or comments. However, when working with
    parse trees, including when generating tests, these "hidden" tokens may
    become important. To ensure that hidden tokens are added to the tree,
    the names of the corresponding rules need to be listed using the
    ``--hidden`` argument.

  - ``--max-depth``: Controlling the depth of the generated tree, and therefore
    the size of the serialized test, is important for both generation and
    execution performance. This argument allows to set the maximum depth of
    the tree. Any inputs that exceeds this depth limit will be discarded.
    The :ref:`grammarinator-generate <grammarinator-generate>` utility also
    has a corresponding setting to guide the generator and avoid generating
    excessively deep trees.

.. _`ANTLR`: http://antlr.org/

----------------------------------------
Convert Population Trees to Test Sources
----------------------------------------

The ``grammarinator-decode`` utility supports decoding the tree elements of a
population - whether encoded using pickle, JSON, or FlatBuffers - into test
sources serialized according to the chosen method.

.. _grammarinator-decode:

.. describe:: The CLI of grammarinator-decode

.. runcmd:: python -m grammarinator.decode --help
   :syntax: none
   :replace: "decode.py/grammarinator-decode"

``grammarinator-decode`` processes a set of tree inputs and creates a
test representation from them. Inputs can be listed as files or directories
(using ``--input``), or specified with file patterns (using ``--glob``).
The listed directories are traversed recursively.
First, the files are converted to trees using the appropriate tree codec
specified by ``--tree-format``. The resulting trees are then serialized using
the function defined by ``--serializer`` (or :class:`str` by default). The
serialized tests are saved into the ``--out`` directory with the ``--ext``
extension and encoded with ``--encoding``.

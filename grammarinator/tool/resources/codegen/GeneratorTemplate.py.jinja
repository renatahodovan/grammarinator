{#
 # Copyright (c) 2020-2023 Renata Hodovan, Akos Kiss.
 #
 # Licensed under the BSD 3-Clause License
 # <LICENSE.rst or https://opensource.org/licenses/BSD-3-Clause>.
 # This file may not be copied, modified, or distributed except
 # according to those terms.
 #}

{% macro processVariableNode(node, args) %}
local_ctx['{{ node.name }}']{% if node.is_list %}.append(current.last_child){% else %} = current.last_child{% endif %}

{% endmacro %}


{% macro processActionNode(node, args) %}
{{ node.src | substitute('\$(?P<var_name>\\w+)', 'local_ctx[\'\\g<var_name>\']') }}
{% endmacro %}


{% macro processLambdaNode(node, args) %}
pass
{% endmacro %}


{% macro processRuleNode(node, args) %}
self.{{ node.id }}({% if args %}{% for k, v in args.items() %}{{ k }}{% if v %}={{ v }}{% endif %}, {% endfor %}{% endif %}parent=current)
{% endmacro %}


{% macro processCharsetNode(node, args) %}
UnlexerRule(src=self._model.charset(current, {{ node.idx }}, self._charsets[{{ node.charset }}]), parent=current)
{% endmacro %}


{% macro processLiteralNode(node, args) %}
UnlexerRule(src='{{ node.src | escape_string }}', parent=current)
{% endmacro %}


{% macro processQuantifierNode(node, args) %}
if self._max_depth >= {{ node.min_depth }}:
    for _ in self._model.quantify(current, {{ node.idx }}, min={{ node.min }}, max={{ node.max }}):
    {% for edge in node.out_edges %}
        {{ processNode(edge.dst, edge.args) | indent | indent -}}
    {% endfor %}
{% endmacro %}


{% macro processAlternationNode(node, args) %}
with AlternationContext(self, [{{ node.min_depths | join(', ') }}], [{{ node.conditions | join(', ') | substitute('\$(?P<var_name>\\w+)', 'local_ctx[\'\\g<var_name>\']') }}]) as weights{{ node.idx }}:
    choice{{ node.idx }} = self._model.choice(current, {{ node.idx }}, weights{{ node.idx }})
    {% set simple_lits, simple_rules = node.simple_alternatives() %}
    {% if simple_lits and simple_rules %}
    src = [{% for lit in simple_lits %}{% if lit is not none %}'{{ lit | escape_string }}'{% else %}None{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}][choice{{ node.idx }}]
    rule = [{% for rule in simple_rules %}{% if rule is not none %}self.{{ rule }}{% else %}None{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}][choice{{ node.idx }}]
    if src is not None:
        UnlexerRule(src=src, parent=current)
    else:
        rule(parent=current)
    {% elif simple_lits %}
    UnlexerRule(src=[{% for lit in simple_lits %}'{{ lit | escape_string }}'{% if not loop.last %}, {% endif %}{% endfor %}][choice{{ node.idx }}], parent=current)
    {% elif simple_rules %}
    [{% for rule in simple_rules %}self.{{ rule }}{% if not loop.last %}, {% endif %}{% endfor %}][choice{{ node.idx }}](parent=current)
    {% else %}
    {% for edge in node.out_edges %}
    {{ 'if' if loop.index0 == 0 else 'elif' }} choice{{ node.idx }} == {{ edge.dst.idx }}:
        {{ processNode(edge.dst, edge.args) | indent | indent -}}
    {% endfor %}
    {% endif %}
{% endmacro %}


{% macro processAlternativeNode(node, args) %}
{% for edge in node.out_edges %}
{{ processNode(edge.dst, edge.args) -}}
{% endfor %}
{% endmacro %}


{% macro processNode(node, args) %}
{% set processors = {
    'QuantifierNode': processQuantifierNode,
    'UnlexerRuleNode': processRuleNode,
    'UnparserRuleNode': processRuleNode,
    'ImagRuleNode': processRuleNode,
    'CharsetNode': processCharsetNode,
    'LiteralNode': processLiteralNode,
    'AlternationNode': processAlternationNode,
    'AlternativeNode': processAlternativeNode,
    'ActionNode': processActionNode,
    'LambdaNode': processLambdaNode,
    'VariableNode': processVariableNode,
    }
%}
{{ processors[node.__class__.__name__](node, args) -}}
{% endmacro %}


# Generated by Grammarinator {{ version }}

import itertools

from math import inf
from grammarinator.runtime import *

{% if graph.superclass != 'Generator' %}
if __name__ is not None and '.' in __name__:
    from .{{ graph.superclass }} import {{ graph.superclass }}
else:
    from {{ graph.superclass }} import {{ graph.superclass }}


{% endif %}

{%- if graph.header %}
{{ graph.header }}
{% endif -%}


class {{ graph.name }}({{ graph.superclass }}):

    {% for rule in graph.imag_rules %}
    def {{ rule.id }}(self, parent=None):
        return UnlexerRule(name='{{ rule.id }}', parent=parent)
    {% endfor %}

    {%- if graph.members %}
    {{ graph.members | trim | indent }}
    {% endif %}

    {% for rule in graph.rules %}
    def {{ rule.id }}(self, {% for key, value in rule.args.items() %}{{ key }}={{ value }}, {% endfor %}parent=None):
        {% if rule.id != 'EOF' %}
        {% if rule.has_var %}
        local_ctx = dict({% for key, value in rule.attributes.items() %}{{ key }}={% if key in rule.args %}{{ key }}{% else %}{{ value }}{% endif %}{% if not loop.last or rule.labels %}, {% endif %}{% endfor %}{% for name, is_list in rule.labels.items() %}{{ name }}={% if is_list %}[]{% else %}None{% endif %}{% if not loop.last %}, {% endif %}{% endfor %})
        {% endif %}
        with RuleContext(self, {{ rule.type }}(name='{{ rule.id }}', parent=parent)) as current:
            {% for edge in rule.out_edges %}
            {{ processNode(edge.dst, edge.args) | indent | indent | indent -}}
            {% endfor %}
            {% for ret in rule.returns %}
            current.{{ ret }} = local_ctx['{{ ret }}']
            {% endfor %}
            return current
        {% else %}
        pass
        {% endif %}
    {{ rule.id }}.min_depth = {{ rule.min_depth }}

    {% endfor %}
    _default_rule = {{ graph.default_rule }}

    _charsets = {
        {% for charset in graph.charsets %}
        {{ charset.id }}: list(itertools.chain.from_iterable({{ charset.ranges | substitute('(\(.*?\))', 'range\\1') }})),
        {% endfor %}
    }
{# Ensure newline at end of file #}

# Generated by Grammarinator 23.7.post138+g71dbeb0

from math import inf
from grammarinator.runtime import *


from copy import deepcopy


def html_space_serializer(root):

    def _walk(node):
        nonlocal src

        if isinstance(node, UnlexerRule):
            src += node.src
        else:
            for child in node.children:
                _walk(child)

        if (isinstance(node, UnparserRule) and
            node.name == 'htmlTagName' and node.right_sibling and node.right_sibling.name == 'htmlAttribute' or node.name == 'htmlAttribute') \
                or isinstance(node, UnlexerRule) and node.src.endswith(('<script', '<style', '<?xml')):
            src += ' '

    src = ''
    _walk(root)
    return src


class HTMLGenerator(Generator):

    def _style_sheet(self):
        return ''


    def _endOfHtmlElement(self):
        pass

    def HTML_COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_COMMENT', parent) as rule:
            current = rule.current
            current.src += '<!--'
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '-->'
        return current

    def HTML_CONDITIONAL_COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_CONDITIONAL_COMMENT', parent) as rule:
            current = rule.current
            current.src += '<!['
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += ']>'
        return current

    def XML_DECLARATION(self, parent=None):
        with UnlexerRuleContext(self, 'XML_DECLARATION', parent) as rule:
            current = rule.current
            current.src += '<?xml'
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '>'
        return current

    def CDATA(self, parent=None):
        with UnlexerRuleContext(self, 'CDATA', parent) as rule:
            current = rule.current
            current.src += '<![CDATA['
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += ']]>'
        return current

    def DTD(self, parent=None):
        with UnlexerRuleContext(self, 'DTD', parent) as rule:
            current = rule.current
            current.src += '<!'
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '>'
        return current

    def SCRIPTLET(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPTLET', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[0], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += '<?'
                    with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
                    current = rule.current
                    current.src += '?>'
                elif choice0 == 1:
                    current.src += '<%'
                    with QuantifierContext(rule, 1, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 1, HTMLGenerator._charsets[0])
                    current = rule.current
                    current.src += '%>'
            current = rule.current
        return current

    def SEA_WS(self, parent=None):
        with UnlexerRuleContext(self, 'SEA_WS', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[1], 0, HTMLGenerator._alt_conds[1]) as alt0:
                            current = rule.current
                            choice0 = alt0()
                            if choice0 == 0:
                                current.src += ' '
                            elif choice0 == 1:
                                current.src += '\t'
                            elif choice0 == 2:
                                with QuantifierContext(rule, 1, 0, 1, HTMLGenerator._quant_sizes[0], 0) as quant1:
                                    while quant1():
                                        with QuantifiedContext(rule):
                                            current = rule.current
                                            current.src += '\r'
                                current = rule.current
                                current.src += '\n'
                        current = rule.current
            current = rule.current
        return current

    def SCRIPT_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_OPEN', parent) as rule:
            current = rule.current
            current.src += '<script'
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '>'
        return current

    def STYLE_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_OPEN', parent) as rule:
            current = rule.current
            current.src += '<style'
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '>'
        return current

    def TAG_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_OPEN', parent, True) as rule:
            current = rule.current
            current.src += '<'
        return current

    def HTML_TEXT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_TEXT', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[1])
            current = rule.current
        return current

    def TAG_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_CLOSE', parent, True) as rule:
            current = rule.current
            current.src += '>'
        return current

    def TAG_SLASH_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_SLASH_CLOSE', parent, True) as rule:
            current = rule.current
            current.src += '/>'
        return current

    def TAG_SLASH(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_SLASH', parent, True) as rule:
            current = rule.current
            current.src += '/'
        return current

    def TAG_EQUALS(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_EQUALS', parent, True) as rule:
            current = rule.current
            current.src += '='
        return current

    def TAG_NAME(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NAME', parent) as rule:
            current = rule.current
            self.TAG_NameStartChar(parent=current)
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.TAG_NameChar(parent=current)
            current = rule.current
        return current

    def TAG_WHITESPACE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_WHITESPACE', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[2])
        return current

    def HEXDIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'HEXDIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[3])
        return current

    def DIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'DIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[4])
        return current

    def TAG_NameChar(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NameChar', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[2], 0, HTMLGenerator._alt_conds[2]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self.TAG_NameStartChar(parent=current)
                elif choice0 == 1:
                    current.src += '-'
                elif choice0 == 2:
                    current.src += '_'
                elif choice0 == 3:
                    current.src += '.'
                elif choice0 == 4:
                    self.DIGIT(parent=current)
                elif choice0 == 5:
                    current.src += '\xb7'
                elif choice0 == 6:
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[5])
                elif choice0 == 7:
                    current.src += self._model.charset(current, 1, HTMLGenerator._charsets[6])
            current = rule.current
        return current

    def TAG_NameStartChar(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NameStartChar', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[3], 0, HTMLGenerator._alt_conds[3]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[7])
                elif choice0 == 1:
                    current.src += self._model.charset(current, 1, HTMLGenerator._charsets[8])
                elif choice0 == 2:
                    current.src += self._model.charset(current, 2, HTMLGenerator._charsets[9])
                elif choice0 == 3:
                    current.src += self._model.charset(current, 3, HTMLGenerator._charsets[10])
                elif choice0 == 4:
                    current.src += self._model.charset(current, 4, HTMLGenerator._charsets[11])
                elif choice0 == 5:
                    current.src += self._model.charset(current, 5, HTMLGenerator._charsets[12])
            current = rule.current
        return current

    def SCRIPT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_BODY', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '</script>'
        return current

    def SCRIPT_SHORT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_SHORT_BODY', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current = rule.current
            current.src += '</>'
        return current

    def STYLE_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_BODY', parent) as rule:
            current = rule.current
            current.src += self._style_sheet()
            current.src += '</style>'
        return current

    def STYLE_SHORT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_SHORT_BODY', parent) as rule:
            current = rule.current
            current.src += self._style_sheet()
            current.src += '</>'
        return current

    def ATTVALUE_VALUE(self, parent=None):
        with UnlexerRuleContext(self, 'ATTVALUE_VALUE', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 2) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[13])
            current = rule.current
            self.ATTRIBUTE(parent=current)
        return current

    def ATTRIBUTE(self, parent=None):
        with UnlexerRuleContext(self, 'ATTRIBUTE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[4], 0, HTMLGenerator._alt_conds[4]) as alt0:
                current = rule.current
                [self.DOUBLE_QUOTE_STRING, self.SINGLE_QUOTE_STRING, self.ATTCHARS, self.HEXCHARS, self.DECCHARS][alt0()](parent=current)
            current = rule.current
        return current

    def ATTCHAR(self, parent=None):
        with UnlexerRuleContext(self, 'ATTCHAR', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[5], 0, HTMLGenerator._alt_conds[5]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += '-'
                elif choice0 == 1:
                    current.src += '_'
                elif choice0 == 2:
                    current.src += '.'
                elif choice0 == 3:
                    current.src += '/'
                elif choice0 == 4:
                    current.src += '+'
                elif choice0 == 5:
                    current.src += ','
                elif choice0 == 6:
                    current.src += '?'
                elif choice0 == 7:
                    current.src += '='
                elif choice0 == 8:
                    current.src += ':'
                elif choice0 == 9:
                    current.src += ';'
                elif choice0 == 10:
                    current.src += '#'
                elif choice0 == 11:
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[14])
            current = rule.current
        return current

    def ATTCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'ATTCHARS', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, HTMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.ATTCHAR(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, HTMLGenerator._quant_sizes[0], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += ' '
            current = rule.current
        return current

    def HEXCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'HEXCHARS', parent) as rule:
            current = rule.current
            current.src += '#'
            with QuantifierContext(rule, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[3])
            current = rule.current
        return current

    def DECCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'DECCHARS', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[4])
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, HTMLGenerator._quant_sizes[0], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += '%'
            current = rule.current
        return current

    def DOUBLE_QUOTE_STRING(self, parent=None):
        with UnlexerRuleContext(self, 'DOUBLE_QUOTE_STRING', parent) as rule:
            current = rule.current
            current.src += '"'
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[15])
            current = rule.current
            current.src += '"'
        return current

    def SINGLE_QUOTE_STRING(self, parent=None):
        with UnlexerRuleContext(self, 'SINGLE_QUOTE_STRING', parent) as rule:
            current = rule.current
            current.src += '\''
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, HTMLGenerator._charsets[16])
            current = rule.current
            current.src += '\''
        return current

    def htmlDocument(self, parent=None):
        with UnparserRuleContext(self, 'htmlDocument', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt0:
                            current = rule.current
                            [self.scriptlet, self.SEA_WS][alt0()](parent=current)
                        current = rule.current
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.xml(parent=current)
            current = rule.current
            with QuantifierContext(rule, 2, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 1, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt1:
                            current = rule.current
                            [self.scriptlet, self.SEA_WS][alt1()](parent=current)
                        current = rule.current
            current = rule.current
            with QuantifierContext(rule, 3, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant3:
                while quant3():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.dtd(parent=current)
            current = rule.current
            with QuantifierContext(rule, 4, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant4:
                while quant4():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 2, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt2:
                            current = rule.current
                            [self.scriptlet, self.SEA_WS][alt2()](parent=current)
                        current = rule.current
            current = rule.current
            with QuantifierContext(rule, 5, 0, inf, HTMLGenerator._quant_sizes[3], 0) as quant5:
                while quant5():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.htmlElements(parent=current)
            current = rule.current
        return current

    def htmlElements(self, parent=None):
        with UnparserRuleContext(self, 'htmlElements', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[2], 1) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.htmlMisc(parent=current)
            current = rule.current
            self.htmlElement(parent=current)
            with QuantifierContext(rule, 1, 0, inf, HTMLGenerator._quant_sizes[2], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.htmlMisc(parent=current)
            current = rule.current
        return current

    def htmlElement(self, parent=None):
        local_ctx = {'open_tag': None}
        with UnparserRuleContext(self, 'htmlElement', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[7], 0, HTMLGenerator._alt_conds[3]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(8, self.TAG_OPEN, parent=current)
                    self._reserve(6, self.htmlTagName, parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(rule, 0, 0, inf, HTMLGenerator._quant_sizes[4], 6) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.htmlAttribute(parent=current)
                    current = rule.current
                    self._reserve(5, self.TAG_CLOSE, parent=current)
                    self._reserve(5, self.htmlContent, parent=current)
                    self._reserve(4, self.TAG_OPEN, parent=current)
                    self._reserve(3, self.TAG_SLASH, parent=current)
                    self._reserve(1, self.htmlTagName, parent=current)
                    current.last_child.replace(deepcopy(local_ctx['open_tag']))
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 1:
                    self._reserve(3, self.TAG_OPEN, parent=current)
                    self._reserve(1, self.htmlTagName, parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(rule, 1, 0, inf, HTMLGenerator._quant_sizes[4], 1) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.htmlAttribute(parent=current)
                    current = rule.current
                    self.TAG_SLASH_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 2:
                    self._reserve(3, self.TAG_OPEN, parent=current)
                    self._reserve(1, self.htmlTagName, parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(rule, 2, 0, inf, HTMLGenerator._quant_sizes[4], 1) as quant2:
                        while quant2():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.htmlAttribute(parent=current)
                    current = rule.current
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 3:
                    self.scriptlet(parent=current)
                elif choice0 == 4:
                    self.script(parent=current)
                elif choice0 == 5:
                    self.style(parent=current)
            current = rule.current
        return current

    def htmlContent(self, parent=None):
        with UnparserRuleContext(self, 'htmlContent', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.htmlChardata(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, inf, HTMLGenerator._quant_sizes[2], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[8], 0, HTMLGenerator._alt_conds[1]) as alt0:
                            current = rule.current
                            [self.htmlElement, self.xhtmlCDATA, self.htmlComment][alt0()](parent=current)
                        current = rule.current
                        with QuantifierContext(rule, 2, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant2:
                            while quant2():
                                with QuantifiedContext(rule):
                                    current = rule.current
                                    self.htmlChardata(parent=current)
                        current = rule.current
            current = rule.current
        return current

    def htmlAttribute(self, parent=None):
        local_ctx = {'attr_name': None}
        with UnparserRuleContext(self, 'htmlAttribute', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[9], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(4, self.htmlAttributeName, parent=current)
                    local_ctx['attr_name'] = current.last_child
                    self._reserve(3, self.TAG_EQUALS, parent=current)
                    self.htmlAttributeValue(parent=current)
                elif choice0 == 1:
                    self.htmlAttributeName(parent=current)
                    local_ctx['attr_name'] = current.last_child
            current = rule.current
        return current

    def htmlAttributeName(self, parent=None):
        with UnparserRuleContext(self, 'htmlAttributeName', parent) as rule:
            current = rule.current
            self.TAG_NAME(parent=current)
        return current

    def htmlAttributeValue(self, parent=None):
        with UnparserRuleContext(self, 'htmlAttributeValue', parent) as rule:
            current = rule.current
            self.ATTVALUE_VALUE(parent=current)
        return current

    def htmlTagName(self, parent=None):
        with UnparserRuleContext(self, 'htmlTagName', parent) as rule:
            current = rule.current
            self.TAG_NAME(parent=current)
        return current

    def htmlChardata(self, parent=None):
        with UnparserRuleContext(self, 'htmlChardata', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.HTML_TEXT, self.SEA_WS][alt0()](parent=current)
            current = rule.current
        return current

    def htmlMisc(self, parent=None):
        with UnparserRuleContext(self, 'htmlMisc', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.htmlComment, self.SEA_WS][alt0()](parent=current)
            current = rule.current
        return current

    def htmlComment(self, parent=None):
        with UnparserRuleContext(self, 'htmlComment', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.HTML_COMMENT, self.HTML_CONDITIONAL_COMMENT][alt0()](parent=current)
            current = rule.current
        return current

    def xhtmlCDATA(self, parent=None):
        with UnparserRuleContext(self, 'xhtmlCDATA', parent) as rule:
            current = rule.current
            self.CDATA(parent=current)
        return current

    def dtd(self, parent=None):
        with UnparserRuleContext(self, 'dtd', parent) as rule:
            current = rule.current
            self.DTD(parent=current)
        return current

    def xml(self, parent=None):
        with UnparserRuleContext(self, 'xml', parent) as rule:
            current = rule.current
            self.XML_DECLARATION(parent=current)
        return current

    def scriptlet(self, parent=None):
        with UnparserRuleContext(self, 'scriptlet', parent) as rule:
            current = rule.current
            self.SCRIPTLET(parent=current)
        return current

    def script(self, parent=None):
        with UnparserRuleContext(self, 'script', parent) as rule:
            current = rule.current
            self._reserve(1, self.SCRIPT_OPEN, parent=current)
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.SCRIPT_BODY, self.SCRIPT_SHORT_BODY][alt0()](parent=current)
            current = rule.current
        return current

    def style(self, parent=None):
        with UnparserRuleContext(self, 'style', parent) as rule:
            current = rule.current
            self._reserve(1, self.STYLE_OPEN, parent=current)
            with AlternationContext(rule, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.STYLE_BODY, self.STYLE_SHORT_BODY][alt0()](parent=current)
            current = rule.current
        return current


    _default_rule = htmlDocument

    _rule_sizes = {
        'HTML_COMMENT': RuleSize(1, 1),
        'HTML_CONDITIONAL_COMMENT': RuleSize(1, 1),
        'XML_DECLARATION': RuleSize(1, 1),
        'CDATA': RuleSize(1, 1),
        'DTD': RuleSize(1, 1),
        'SCRIPTLET': RuleSize(1, 1),
        'SEA_WS': RuleSize(1, 1),
        'SCRIPT_OPEN': RuleSize(1, 1),
        'STYLE_OPEN': RuleSize(1, 1),
        'TAG_OPEN': RuleSize(1, 1),
        'HTML_TEXT': RuleSize(1, 1),
        'TAG_CLOSE': RuleSize(1, 1),
        'TAG_SLASH_CLOSE': RuleSize(1, 1),
        'TAG_SLASH': RuleSize(1, 1),
        'TAG_EQUALS': RuleSize(1, 1),
        'TAG_NAME': RuleSize(2, 2),
        'TAG_WHITESPACE': RuleSize(1, 1),
        'HEXDIGIT': RuleSize(1, 1),
        'DIGIT': RuleSize(1, 1),
        'TAG_NameChar': RuleSize(1, 1),
        'TAG_NameStartChar': RuleSize(1, 1),
        'SCRIPT_BODY': RuleSize(1, 1),
        'SCRIPT_SHORT_BODY': RuleSize(1, 1),
        'STYLE_BODY': RuleSize(1, 1),
        'STYLE_SHORT_BODY': RuleSize(1, 1),
        'ATTVALUE_VALUE': RuleSize(3, 3),
        'ATTRIBUTE': RuleSize(2, 2),
        'ATTCHAR': RuleSize(1, 1),
        'ATTCHARS': RuleSize(2, 2),
        'HEXCHARS': RuleSize(1, 1),
        'DECCHARS': RuleSize(1, 1),
        'DOUBLE_QUOTE_STRING': RuleSize(1, 1),
        'SINGLE_QUOTE_STRING': RuleSize(1, 1),
        'htmlDocument': RuleSize(1, 0),
        'htmlElements': RuleSize(4, 1),
        'htmlElement': RuleSize(3, 1),
        'htmlContent': RuleSize(1, 0),
        'htmlAttribute': RuleSize(4, 2),
        'htmlAttributeName': RuleSize(3, 2),
        'htmlAttributeValue': RuleSize(4, 3),
        'htmlTagName': RuleSize(3, 2),
        'htmlChardata': RuleSize(2, 1),
        'htmlMisc': RuleSize(2, 1),
        'htmlComment': RuleSize(2, 1),
        'xhtmlCDATA': RuleSize(2, 1),
        'dtd': RuleSize(2, 1),
        'xml': RuleSize(2, 1),
        'scriptlet': RuleSize(2, 1),
        'script': RuleSize(2, 2),
        'style': RuleSize(2, 2),
    }

    _alt_sizes = (
        (RuleSize(0, 0), RuleSize(0, 0)),  # 0
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 1
        (RuleSize(1, 1), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(1, 1), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 2
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 3
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(2, 2), RuleSize(1, 1), RuleSize(1, 1)),  # 4
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 5
        (RuleSize(2, 1), RuleSize(1, 1)),  # 6
        (RuleSize(3, 9), RuleSize(3, 4), RuleSize(3, 4), RuleSize(2, 1), RuleSize(2, 2), RuleSize(2, 2)),  # 7
        (RuleSize(3, 1), RuleSize(2, 1), RuleSize(2, 1)),  # 8
        (RuleSize(4, 6), RuleSize(3, 2)),  # 9
        (RuleSize(1, 1), RuleSize(1, 1)),  # 10
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1),  # 1
        (1, 1, 1, 1, 1, 1, 1, 1),  # 2
        (1, 1, 1, 1, 1, 1),  # 3
        (1, 1, 1, 1, 1),  # 4
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 5
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(1, 1),  # 1
        RuleSize(2, 1),  # 2
        RuleSize(4, 1),  # 3
        RuleSize(4, 2),  # 4
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x20, 0x3c), (0x3d, 0x7f), )),  # 1
        Generator._charset(((0x9, 0xa), (0xa, 0xb), (0xd, 0xe), (0x20, 0x21), )),  # 2
        Generator._charset(((0x30, 0x3a), (0x41, 0x47), (0x61, 0x67), )),  # 3
        Generator._charset(((0x30, 0x3a), )),  # 4
        Generator._charset(((0x300, 0x370), )),  # 5
        Generator._charset(((0x203f, 0x2041), )),  # 6
        Generator._charset(((0x3a, 0x3b), (0x41, 0x5b), (0x61, 0x7b), )),  # 7
        Generator._charset(((0x2070, 0x2190), )),  # 8
        Generator._charset(((0x2c00, 0x2ff0), )),  # 9
        Generator._charset(((0x3001, 0xd800), )),  # 10
        Generator._charset(((0xf900, 0xfdd0), )),  # 11
        Generator._charset(((0xfdf0, 0xfffe), )),  # 12
        Generator._charset(((0x20, 0x21), )),  # 13
        Generator._charset(((0x30, 0x3a), (0x41, 0x5b), (0x61, 0x7b), )),  # 14
        Generator._charset(((0x20, 0x22), (0x23, 0x3c), (0x3d, 0x7f), )),  # 15
        Generator._charset(((0x20, 0x27), (0x28, 0x3c), (0x3d, 0x7f), )),  # 16
    )

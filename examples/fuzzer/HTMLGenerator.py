# Generated by Grammarinator 23.7.post23+g3070127

import itertools

from math import inf
from grammarinator.runtime import *


from copy import deepcopy


def html_space_serializer(root):

    def _walk(node):
        nonlocal src

        if isinstance(node, UnlexerRule):
            src += node.src
        else:
            for child in node.children:
                _walk(child)

        if (isinstance(node, UnparserRule) and
            node.name == 'htmlTagName' and node.right_sibling and node.right_sibling.name == 'htmlAttribute' or node.name == 'htmlAttribute') \
                or isinstance(node, UnlexerRule) and node.src.endswith(('<script', '<style', '<?xml')):
            src += ' '

    src = ''
    _walk(root)
    return src


class HTMLGenerator(Generator):

    def _style_sheet(self):
        return ''


    def _endOfHtmlElement(self):
        pass

    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def HTML_COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_COMMENT', parent) as current:
            current.src += '<!--'
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '-->'
            return current
    HTML_COMMENT.min_depth = 0

    def HTML_CONDITIONAL_COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_CONDITIONAL_COMMENT', parent) as current:
            current.src += '<!['
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += ']>'
            return current
    HTML_CONDITIONAL_COMMENT.min_depth = 0

    def XML_DECLARATION(self, parent=None):
        with UnlexerRuleContext(self, 'XML_DECLARATION', parent) as current:
            current.src += '<?xml'
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '>'
            return current
    XML_DECLARATION.min_depth = 0

    def CDATA(self, parent=None):
        with UnlexerRuleContext(self, 'CDATA', parent) as current:
            current.src += '<![CDATA['
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += ']]>'
            return current
    CDATA.min_depth = 0

    def DTD(self, parent=None):
        with UnlexerRuleContext(self, 'DTD', parent) as current:
            current.src += '<!'
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '>'
            return current
    DTD.min_depth = 0

    def SCRIPTLET(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPTLET', parent) as current:
            with AlternationContext(self, 0, [0, 0], [1, 1]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += '<?'
                    with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                        while quant0(current):
                            current.src += self._model.charset(current, 0, self._charsets[0])
                    current.src += '?>'
                elif choice0 == 1:
                    current.src += '<%'
                    with QuantifierContext(self, 1, 0, inf, 0) as quant1:
                        while quant1(current):
                            current.src += self._model.charset(current, 1, self._charsets[0])
                    current.src += '%>'
            return current
    SCRIPTLET.min_depth = 0

    def SEA_WS(self, parent=None):
        with UnlexerRuleContext(self, 'SEA_WS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, 0) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, [0, 0, 0], [1, 1, 1]) as alt0:
                        choice0 = alt0(current)
                        if choice0 == 0:
                            current.src += ' '
                        elif choice0 == 1:
                            current.src += '\t'
                        elif choice0 == 2:
                            with QuantifierContext(self, 1, 0, 1, 0) as quant1:
                                while quant1(current):
                                    current.src += '\r'
                            current.src += '\n'
            return current
    SEA_WS.min_depth = 0

    def SCRIPT_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_OPEN', parent) as current:
            current.src += '<script'
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '>'
            return current
    SCRIPT_OPEN.min_depth = 0

    def STYLE_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_OPEN', parent) as current:
            current.src += '<style'
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '>'
            return current
    STYLE_OPEN.min_depth = 0

    def TAG_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_OPEN', parent) as current:
            current.src += '<'
            return current
    TAG_OPEN.min_depth = 0

    def HTML_TEXT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_TEXT', parent) as current:
            with QuantifierContext(self, 0, 1, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[1])
            return current
    HTML_TEXT.min_depth = 0

    def TAG_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_CLOSE', parent) as current:
            current.src += '>'
            return current
    TAG_CLOSE.min_depth = 0

    def TAG_SLASH_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_SLASH_CLOSE', parent) as current:
            current.src += '/>'
            return current
    TAG_SLASH_CLOSE.min_depth = 0

    def TAG_SLASH(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_SLASH', parent) as current:
            current.src += '/'
            return current
    TAG_SLASH.min_depth = 0

    def TAG_EQUALS(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_EQUALS', parent) as current:
            current.src += '='
            return current
    TAG_EQUALS.min_depth = 0

    def TAG_NAME(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NAME', parent) as current:
            self.TAG_NameStartChar(parent=current)
            with QuantifierContext(self, 0, 0, inf, 1) as quant0:
                while quant0(current):
                    self.TAG_NameChar(parent=current)
            return current
    TAG_NAME.min_depth = 1

    def TAG_WHITESPACE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_WHITESPACE', parent) as current:
            current.src += self._model.charset(current, 0, self._charsets[2])
            return current
    TAG_WHITESPACE.min_depth = 0

    def HEXDIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'HEXDIGIT', parent) as current:
            current.src += self._model.charset(current, 0, self._charsets[3])
            return current
    HEXDIGIT.min_depth = 0

    def DIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'DIGIT', parent) as current:
            current.src += self._model.charset(current, 0, self._charsets[4])
            return current
    DIGIT.min_depth = 0

    def TAG_NameChar(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NameChar', parent) as current:
            with AlternationContext(self, 0, [1, 0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    self.TAG_NameStartChar(parent=current)
                elif choice0 == 1:
                    current.src += '-'
                elif choice0 == 2:
                    current.src += '_'
                elif choice0 == 3:
                    current.src += '.'
                elif choice0 == 4:
                    self.DIGIT(parent=current)
                elif choice0 == 5:
                    current.src += '\xb7'
                elif choice0 == 6:
                    current.src += self._model.charset(current, 0, self._charsets[5])
                elif choice0 == 7:
                    current.src += self._model.charset(current, 1, self._charsets[6])
            return current
    TAG_NameChar.min_depth = 0

    def TAG_NameStartChar(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NameStartChar', parent) as current:
            with AlternationContext(self, 0, [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += self._model.charset(current, 0, self._charsets[7])
                elif choice0 == 1:
                    current.src += self._model.charset(current, 1, self._charsets[8])
                elif choice0 == 2:
                    current.src += self._model.charset(current, 2, self._charsets[9])
                elif choice0 == 3:
                    current.src += self._model.charset(current, 3, self._charsets[10])
                elif choice0 == 4:
                    current.src += self._model.charset(current, 4, self._charsets[11])
                elif choice0 == 5:
                    current.src += self._model.charset(current, 5, self._charsets[12])
            return current
    TAG_NameStartChar.min_depth = 0

    def SCRIPT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_BODY', parent) as current:
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '</script>'
            return current
    SCRIPT_BODY.min_depth = 0

    def SCRIPT_SHORT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_SHORT_BODY', parent) as current:
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[0])
            current.src += '</>'
            return current
    SCRIPT_SHORT_BODY.min_depth = 0

    def STYLE_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_BODY', parent) as current:
            current.src += self._style_sheet()
            current.src += '</style>'
            return current
    STYLE_BODY.min_depth = 0

    def STYLE_SHORT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_SHORT_BODY', parent) as current:
            current.src += self._style_sheet()
            current.src += '</>'
            return current
    STYLE_SHORT_BODY.min_depth = 0

    def ATTVALUE_VALUE(self, parent=None):
        with UnlexerRuleContext(self, 'ATTVALUE_VALUE', parent) as current:
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[13])
            self.ATTRIBUTE(parent=current)
            return current
    ATTVALUE_VALUE.min_depth = 2

    def ATTRIBUTE(self, parent=None):
        with UnlexerRuleContext(self, 'ATTRIBUTE', parent) as current:
            with AlternationContext(self, 0, [1, 1, 2, 1, 1], [1, 1, 1, 1, 1]) as alt0:
                [self.DOUBLE_QUOTE_STRING, self.SINGLE_QUOTE_STRING, self.ATTCHARS, self.HEXCHARS, self.DECCHARS][alt0(current)](parent=current)
            return current
    ATTRIBUTE.min_depth = 1

    def ATTCHAR(self, parent=None):
        with UnlexerRuleContext(self, 'ATTCHAR', parent) as current:
            with AlternationContext(self, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += '-'
                elif choice0 == 1:
                    current.src += '_'
                elif choice0 == 2:
                    current.src += '.'
                elif choice0 == 3:
                    current.src += '/'
                elif choice0 == 4:
                    current.src += '+'
                elif choice0 == 5:
                    current.src += ','
                elif choice0 == 6:
                    current.src += '?'
                elif choice0 == 7:
                    current.src += '='
                elif choice0 == 8:
                    current.src += ':'
                elif choice0 == 9:
                    current.src += ';'
                elif choice0 == 10:
                    current.src += '#'
                elif choice0 == 11:
                    current.src += self._model.charset(current, 0, self._charsets[14])
            return current
    ATTCHAR.min_depth = 0

    def ATTCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'ATTCHARS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, 0) as quant0:
                while quant0(current):
                    self.ATTCHAR(parent=current)
            with QuantifierContext(self, 1, 0, 1, 0) as quant1:
                while quant1(current):
                    current.src += ' '
            return current
    ATTCHARS.min_depth = 1

    def HEXCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'HEXCHARS', parent) as current:
            current.src += '#'
            with QuantifierContext(self, 0, 1, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[3])
            return current
    HEXCHARS.min_depth = 0

    def DECCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'DECCHARS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[4])
            with QuantifierContext(self, 1, 0, 1, 0) as quant1:
                while quant1(current):
                    current.src += '%'
            return current
    DECCHARS.min_depth = 0

    def DOUBLE_QUOTE_STRING(self, parent=None):
        with UnlexerRuleContext(self, 'DOUBLE_QUOTE_STRING', parent) as current:
            current.src += '"'
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[15])
            current.src += '"'
            return current
    DOUBLE_QUOTE_STRING.min_depth = 0

    def SINGLE_QUOTE_STRING(self, parent=None):
        with UnlexerRuleContext(self, 'SINGLE_QUOTE_STRING', parent) as current:
            current.src += '\''
            with QuantifierContext(self, 0, 0, inf, 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, self._charsets[16])
            current.src += '\''
            return current
    SINGLE_QUOTE_STRING.min_depth = 0

    def htmlDocument(self, parent=None):
        with UnparserRuleContext(self, 'htmlDocument', parent) as current:
            with QuantifierContext(self, 0, 0, inf, 1) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, [2, 1], [1, 1]) as alt0:
                        [self.scriptlet, self.SEA_WS][alt0(current)](parent=current)
            with QuantifierContext(self, 1, 0, 1, 2) as quant1:
                while quant1(current):
                    self.xml(parent=current)
            with QuantifierContext(self, 2, 0, inf, 1) as quant2:
                while quant2(current):
                    with AlternationContext(self, 1, [2, 1], [1, 1]) as alt1:
                        [self.scriptlet, self.SEA_WS][alt1(current)](parent=current)
            with QuantifierContext(self, 3, 0, 1, 2) as quant3:
                while quant3(current):
                    self.dtd(parent=current)
            with QuantifierContext(self, 4, 0, inf, 1) as quant4:
                while quant4(current):
                    with AlternationContext(self, 2, [2, 1], [1, 1]) as alt2:
                        [self.scriptlet, self.SEA_WS][alt2(current)](parent=current)
            with QuantifierContext(self, 5, 0, inf, 4) as quant5:
                while quant5(current):
                    self.htmlElements(parent=current)
            return current
    htmlDocument.min_depth = 0

    def htmlElements(self, parent=None):
        with UnparserRuleContext(self, 'htmlElements', parent) as current:
            with QuantifierContext(self, 0, 0, inf, 2) as quant0:
                while quant0(current):
                    self.htmlMisc(parent=current)
            self.htmlElement(parent=current)
            with QuantifierContext(self, 1, 0, inf, 2) as quant1:
                while quant1(current):
                    self.htmlMisc(parent=current)
            return current
    htmlElements.min_depth = 3

    def htmlElement(self, parent=None):
        local_ctx = dict(open_tag=None)
        with UnparserRuleContext(self, 'htmlElement', parent) as current:
            with AlternationContext(self, 0, [3, 3, 3, 2, 2, 2], [1, 1, 1, 1, 1, 1]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    self.TAG_OPEN(parent=current)
                    self.htmlTagName(parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(self, 0, 0, inf, 4) as quant0:
                        while quant0(current):
                            self.htmlAttribute(parent=current)
                    self.TAG_CLOSE(parent=current)
                    self.htmlContent(parent=current)
                    self.TAG_OPEN(parent=current)
                    self.TAG_SLASH(parent=current)
                    self.htmlTagName(parent=current)
                    current.last_child.replace(deepcopy(local_ctx['open_tag']))
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 1:
                    self.TAG_OPEN(parent=current)
                    self.htmlTagName(parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(self, 1, 0, inf, 4) as quant1:
                        while quant1(current):
                            self.htmlAttribute(parent=current)
                    self.TAG_SLASH_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 2:
                    self.TAG_OPEN(parent=current)
                    self.htmlTagName(parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(self, 2, 0, inf, 4) as quant2:
                        while quant2(current):
                            self.htmlAttribute(parent=current)
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 3:
                    self.scriptlet(parent=current)
                elif choice0 == 4:
                    self.script(parent=current)
                elif choice0 == 5:
                    self.style(parent=current)
            return current
    htmlElement.min_depth = 2

    def htmlContent(self, parent=None):
        with UnparserRuleContext(self, 'htmlContent', parent) as current:
            with QuantifierContext(self, 0, 0, 1, 2) as quant0:
                while quant0(current):
                    self.htmlChardata(parent=current)
            with QuantifierContext(self, 1, 0, inf, 2) as quant1:
                while quant1(current):
                    with AlternationContext(self, 0, [3, 2, 2], [1, 1, 1]) as alt0:
                        [self.htmlElement, self.xhtmlCDATA, self.htmlComment][alt0(current)](parent=current)
                    with QuantifierContext(self, 2, 0, 1, 2) as quant2:
                        while quant2(current):
                            self.htmlChardata(parent=current)
            return current
    htmlContent.min_depth = 0

    def htmlAttribute(self, parent=None):
        local_ctx = dict(attr_name=None)
        with UnparserRuleContext(self, 'htmlAttribute', parent) as current:
            with AlternationContext(self, 0, [4, 3], [1, 1]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    self.htmlAttributeName(parent=current)
                    local_ctx['attr_name'] = current.last_child
                    self.TAG_EQUALS(parent=current)
                    self.htmlAttributeValue(parent=current)
                elif choice0 == 1:
                    self.htmlAttributeName(parent=current)
                    local_ctx['attr_name'] = current.last_child
            return current
    htmlAttribute.min_depth = 3

    def htmlAttributeName(self, parent=None):
        with UnparserRuleContext(self, 'htmlAttributeName', parent) as current:
            self.TAG_NAME(parent=current)
            return current
    htmlAttributeName.min_depth = 2

    def htmlAttributeValue(self, parent=None):
        with UnparserRuleContext(self, 'htmlAttributeValue', parent) as current:
            self.ATTVALUE_VALUE(parent=current)
            return current
    htmlAttributeValue.min_depth = 3

    def htmlTagName(self, parent=None):
        with UnparserRuleContext(self, 'htmlTagName', parent) as current:
            self.TAG_NAME(parent=current)
            return current
    htmlTagName.min_depth = 2

    def htmlChardata(self, parent=None):
        with UnparserRuleContext(self, 'htmlChardata', parent) as current:
            with AlternationContext(self, 0, [1, 1], [1, 1]) as alt0:
                [self.HTML_TEXT, self.SEA_WS][alt0(current)](parent=current)
            return current
    htmlChardata.min_depth = 1

    def htmlMisc(self, parent=None):
        with UnparserRuleContext(self, 'htmlMisc', parent) as current:
            with AlternationContext(self, 0, [2, 1], [1, 1]) as alt0:
                [self.htmlComment, self.SEA_WS][alt0(current)](parent=current)
            return current
    htmlMisc.min_depth = 1

    def htmlComment(self, parent=None):
        with UnparserRuleContext(self, 'htmlComment', parent) as current:
            with AlternationContext(self, 0, [1, 1], [1, 1]) as alt0:
                [self.HTML_COMMENT, self.HTML_CONDITIONAL_COMMENT][alt0(current)](parent=current)
            return current
    htmlComment.min_depth = 1

    def xhtmlCDATA(self, parent=None):
        with UnparserRuleContext(self, 'xhtmlCDATA', parent) as current:
            self.CDATA(parent=current)
            return current
    xhtmlCDATA.min_depth = 1

    def dtd(self, parent=None):
        with UnparserRuleContext(self, 'dtd', parent) as current:
            self.DTD(parent=current)
            return current
    dtd.min_depth = 1

    def xml(self, parent=None):
        with UnparserRuleContext(self, 'xml', parent) as current:
            self.XML_DECLARATION(parent=current)
            return current
    xml.min_depth = 1

    def scriptlet(self, parent=None):
        with UnparserRuleContext(self, 'scriptlet', parent) as current:
            self.SCRIPTLET(parent=current)
            return current
    scriptlet.min_depth = 1

    def script(self, parent=None):
        with UnparserRuleContext(self, 'script', parent) as current:
            self.SCRIPT_OPEN(parent=current)
            with AlternationContext(self, 0, [1, 1], [1, 1]) as alt0:
                [self.SCRIPT_BODY, self.SCRIPT_SHORT_BODY][alt0(current)](parent=current)
            return current
    script.min_depth = 1

    def style(self, parent=None):
        with UnparserRuleContext(self, 'style', parent) as current:
            self.STYLE_OPEN(parent=current)
            with AlternationContext(self, 0, [1, 1], [1, 1]) as alt0:
                [self.STYLE_BODY, self.STYLE_SHORT_BODY][alt0(current)](parent=current)
            return current
    style.min_depth = 1

    _default_rule = htmlDocument

    _charsets = {
        0: list(itertools.chain.from_iterable([range(0x20, 0x7f), range(0xa1, 0xad), range(0xae, 0x378), range(0x37a, 0x380), range(0x384, 0x38b), range(0x38c, 0x38d), range(0x38e, 0x3a2), range(0x3a3, 0x530), range(0x531, 0x557), range(0x559, 0x58b), range(0x58d, 0x590), range(0x591, 0x5c8), range(0x5d0, 0x5eb), range(0x5ef, 0x5f5), range(0x606, 0x61c), range(0x61e, 0x6dd), range(0x6de, 0x70e), range(0x710, 0x74b), range(0x74d, 0x7b2), range(0x7c0, 0x7fb), range(0x7fd, 0x82e), range(0x830, 0x83f), range(0x840, 0x85c), range(0x85e, 0x85f), range(0x860, 0x86b), range(0x8a0, 0x8b5), range(0x8b6, 0x8c8), range(0x8d3, 0x8e2), range(0x8e3, 0x984), range(0x985, 0x98d), range(0x98f, 0x991), range(0x993, 0x9a9), range(0x9aa, 0x9b1), range(0x9b2, 0x9b3), range(0x9b6, 0x9ba), range(0x9bc, 0x9c5), range(0x9c7, 0x9c9), range(0x9cb, 0x9cf), range(0x9d7, 0x9d8), range(0x9dc, 0x9de), range(0x9df, 0x9e4), range(0x9e6, 0x9ff), range(0xa01, 0xa04), range(0xa05, 0xa0b), range(0xa0f, 0xa11), range(0xa13, 0xa29), range(0xa2a, 0xa31), range(0xa32, 0xa34), range(0xa35, 0xa37), range(0xa38, 0xa3a), range(0xa3c, 0xa3d), range(0xa3e, 0xa43), range(0xa47, 0xa49), range(0xa4b, 0xa4e), range(0xa51, 0xa52), range(0xa59, 0xa5d), range(0xa5e, 0xa5f), range(0xa66, 0xa77), range(0xa81, 0xa84), range(0xa85, 0xa8e), range(0xa8f, 0xa92), range(0xa93, 0xaa9), range(0xaaa, 0xab1), range(0xab2, 0xab4), range(0xab5, 0xaba), range(0xabc, 0xac6), range(0xac7, 0xaca), range(0xacb, 0xace), range(0xad0, 0xad1), range(0xae0, 0xae4), range(0xae6, 0xaf2), range(0xaf9, 0xb00), range(0xb01, 0xb04), range(0xb05, 0xb0d), range(0xb0f, 0xb11), range(0xb13, 0xb29), range(0xb2a, 0xb31), range(0xb32, 0xb34), range(0xb35, 0xb3a), range(0xb3c, 0xb45), range(0xb47, 0xb49), range(0xb4b, 0xb4e), range(0xb55, 0xb58), range(0xb5c, 0xb5e), range(0xb5f, 0xb64), range(0xb66, 0xb78), range(0xb82, 0xb84), range(0xb85, 0xb8b), range(0xb8e, 0xb91), range(0xb92, 0xb96), range(0xb99, 0xb9b), range(0xb9c, 0xb9d), range(0xb9e, 0xba0), range(0xba3, 0xba5), range(0xba8, 0xbab), range(0xbae, 0xbba), range(0xbbe, 0xbc3), range(0xbc6, 0xbc9), range(0xbca, 0xbce), range(0xbd0, 0xbd1), range(0xbd7, 0xbd8), range(0xbe6, 0xbfb), range(0xc00, 0xc0d), range(0xc0e, 0xc11), range(0xc12, 0xc29), range(0xc2a, 0xc3a), range(0xc3d, 0xc45), range(0xc46, 0xc49), range(0xc4a, 0xc4e), range(0xc55, 0xc57), range(0xc58, 0xc5b), range(0xc60, 0xc64), range(0xc66, 0xc70), range(0xc77, 0xc8d), range(0xc8e, 0xc91), range(0xc92, 0xca9), range(0xcaa, 0xcb4), range(0xcb5, 0xcba), range(0xcbc, 0xcc5), range(0xcc6, 0xcc9), range(0xcca, 0xcce), range(0xcd5, 0xcd7), range(0xcde, 0xcdf), range(0xce0, 0xce4), range(0xce6, 0xcf0), range(0xcf1, 0xcf3), range(0xd00, 0xd0d), range(0xd0e, 0xd11), range(0xd12, 0xd45), range(0xd46, 0xd49), range(0xd4a, 0xd50), range(0xd54, 0xd64), range(0xd66, 0xd80), range(0xd81, 0xd84), range(0xd85, 0xd97), range(0xd9a, 0xdb2), range(0xdb3, 0xdbc), range(0xdbd, 0xdbe), range(0xdc0, 0xdc7), range(0xdca, 0xdcb), range(0xdcf, 0xdd5), range(0xdd6, 0xdd7), range(0xdd8, 0xde0), range(0xde6, 0xdf0), range(0xdf2, 0xdf5), range(0xe01, 0xe3b), range(0xe3f, 0xe5c), range(0xe81, 0xe83), range(0xe84, 0xe85), range(0xe86, 0xe8b), range(0xe8c, 0xea4), range(0xea5, 0xea6), range(0xea7, 0xebe), range(0xec0, 0xec5), range(0xec6, 0xec7), range(0xec8, 0xece), range(0xed0, 0xeda), range(0xedc, 0xee0), range(0xf00, 0xf48), range(0xf49, 0xf6d), range(0xf71, 0xf98), range(0xf99, 0xfbd), range(0xfbe, 0xfcd), range(0xfce, 0xfdb), range(0x1000, 0x10c6), range(0x10c7, 0x10c8), range(0x10cd, 0x10ce), range(0x10d0, 0x1249), range(0x124a, 0x124e), range(0x1250, 0x1257), range(0x1258, 0x1259), range(0x125a, 0x125e), range(0x1260, 0x1289), range(0x128a, 0x128e), range(0x1290, 0x12b1), range(0x12b2, 0x12b6), range(0x12b8, 0x12bf), range(0x12c0, 0x12c1), range(0x12c2, 0x12c6), range(0x12c8, 0x12d7), range(0x12d8, 0x1311), range(0x1312, 0x1316), range(0x1318, 0x135b), range(0x135d, 0x137d), range(0x1380, 0x139a), range(0x13a0, 0x13f6), range(0x13f8, 0x13fe), range(0x1400, 0x1680), range(0x1681, 0x169d), range(0x16a0, 0x16f9), range(0x1700, 0x170d), range(0x170e, 0x1715), range(0x1720, 0x1737), range(0x1740, 0x1754), range(0x1760, 0x176d), range(0x176e, 0x1771), range(0x1772, 0x1774), range(0x1780, 0x17de), range(0x17e0, 0x17ea), range(0x17f0, 0x17fa), range(0x1800, 0x180e), range(0x1810, 0x181a), range(0x1820, 0x1879), range(0x1880, 0x18ab), range(0x18b0, 0x18f6), range(0x1900, 0x191f), range(0x1920, 0x192c), range(0x1930, 0x193c), range(0x1940, 0x1941), range(0x1944, 0x196e), range(0x1970, 0x1975), range(0x1980, 0x19ac), range(0x19b0, 0x19ca), range(0x19d0, 0x19db), range(0x19de, 0x1a1c), range(0x1a1e, 0x1a5f), range(0x1a60, 0x1a7d), range(0x1a7f, 0x1a8a), range(0x1a90, 0x1a9a), range(0x1aa0, 0x1aae), range(0x1ab0, 0x1ac1), range(0x1b00, 0x1b4c), range(0x1b50, 0x1b7d), range(0x1b80, 0x1bf4), range(0x1bfc, 0x1c38), range(0x1c3b, 0x1c4a), range(0x1c4d, 0x1c89), range(0x1c90, 0x1cbb), range(0x1cbd, 0x1cc8), range(0x1cd0, 0x1cfb), range(0x1d00, 0x1dfa), range(0x1dfb, 0x1f16), range(0x1f18, 0x1f1e), range(0x1f20, 0x1f46), range(0x1f48, 0x1f4e), range(0x1f50, 0x1f58), range(0x1f59, 0x1f5a), range(0x1f5b, 0x1f5c), range(0x1f5d, 0x1f5e), range(0x1f5f, 0x1f7e), range(0x1f80, 0x1fb5), range(0x1fb6, 0x1fc5), range(0x1fc6, 0x1fd4), range(0x1fd6, 0x1fdc), range(0x1fdd, 0x1ff0), range(0x1ff2, 0x1ff5), range(0x1ff6, 0x1fff), range(0x2010, 0x2028), range(0x2030, 0x205f), range(0x2070, 0x2072), range(0x2074, 0x208f), range(0x2090, 0x209d), range(0x20a0, 0x20c0), range(0x20d0, 0x20f1), range(0x2100, 0x218c), range(0x2190, 0x2427), range(0x2440, 0x244b), range(0x2460, 0x2b74), range(0x2b76, 0x2b96), range(0x2b97, 0x2c2f), range(0x2c30, 0x2c5f), range(0x2c60, 0x2cf4), range(0x2cf9, 0x2d26), range(0x2d27, 0x2d28), range(0x2d2d, 0x2d2e), range(0x2d30, 0x2d68), range(0x2d6f, 0x2d71), range(0x2d7f, 0x2d97), range(0x2da0, 0x2da7), range(0x2da8, 0x2daf), range(0x2db0, 0x2db7), range(0x2db8, 0x2dbf), range(0x2dc0, 0x2dc7), range(0x2dc8, 0x2dcf), range(0x2dd0, 0x2dd7), range(0x2dd8, 0x2ddf), range(0x2de0, 0x2e53), range(0x2e80, 0x2e9a), range(0x2e9b, 0x2ef4), range(0x2f00, 0x2fd6), range(0x2ff0, 0x2ffc), range(0x3001, 0x3040), range(0x3041, 0x3097), range(0x3099, 0x3100), range(0x3105, 0x3130), range(0x3131, 0x318f), range(0x3190, 0x31e4), range(0x31f0, 0x321f), range(0x3220, 0x9ffd), range(0xa000, 0xa48d), range(0xa490, 0xa4c7), range(0xa4d0, 0xa62c), range(0xa640, 0xa6f8), range(0xa700, 0xa7c0), range(0xa7c2, 0xa7cb), range(0xa7f5, 0xa82d), range(0xa830, 0xa83a), range(0xa840, 0xa878), range(0xa880, 0xa8c6), range(0xa8ce, 0xa8da), range(0xa8e0, 0xa954), range(0xa95f, 0xa97d), range(0xa980, 0xa9ce), range(0xa9cf, 0xa9da), range(0xa9de, 0xa9ff), range(0xaa00, 0xaa37), range(0xaa40, 0xaa4e), range(0xaa50, 0xaa5a), range(0xaa5c, 0xaac3), range(0xaadb, 0xaaf7), range(0xab01, 0xab07), range(0xab09, 0xab0f), range(0xab11, 0xab17), range(0xab20, 0xab27), range(0xab28, 0xab2f), range(0xab30, 0xab6c), range(0xab70, 0xabee), range(0xabf0, 0xabfa), range(0xac00, 0xd7a4), range(0xd7b0, 0xd7c7), range(0xd7cb, 0xd7fc), range(0xf900, 0xfa6e), range(0xfa70, 0xfada), range(0xfb00, 0xfb07), range(0xfb13, 0xfb18), range(0xfb1d, 0xfb37), range(0xfb38, 0xfb3d), range(0xfb3e, 0xfb3f), range(0xfb40, 0xfb42), range(0xfb43, 0xfb45), range(0xfb46, 0xfbc2), range(0xfbd3, 0xfd40), range(0xfd50, 0xfd90), range(0xfd92, 0xfdc8), range(0xfdf0, 0xfdfe), range(0xfe00, 0xfe1a), range(0xfe20, 0xfe53), range(0xfe54, 0xfe67), range(0xfe68, 0xfe6c), range(0xfe70, 0xfe75), range(0xfe76, 0xfefd), range(0xff01, 0xffbf), range(0xffc2, 0xffc8), range(0xffca, 0xffd0), range(0xffd2, 0xffd8), range(0xffda, 0xffdd), range(0xffe0, 0xffe7), range(0xffe8, 0xffef), range(0xfffc, 0xfffe), range(0x10000, 0x1000c), range(0x1000d, 0x10027), range(0x10028, 0x1003b), range(0x1003c, 0x1003e), range(0x1003f, 0x1004e), range(0x10050, 0x1005e), range(0x10080, 0x100fb), range(0x10100, 0x10103), range(0x10107, 0x10134), range(0x10137, 0x1018f), range(0x10190, 0x1019d), range(0x101a0, 0x101a1), range(0x101d0, 0x101fe), range(0x10280, 0x1029d), range(0x102a0, 0x102d1), range(0x102e0, 0x102fc), range(0x10300, 0x10324), range(0x1032d, 0x1034b), range(0x10350, 0x1037b), range(0x10380, 0x1039e), range(0x1039f, 0x103c4), range(0x103c8, 0x103d6), range(0x10400, 0x1049e), range(0x104a0, 0x104aa), range(0x104b0, 0x104d4), range(0x104d8, 0x104fc), range(0x10500, 0x10528), range(0x10530, 0x10564), range(0x1056f, 0x10570), range(0x10600, 0x10737), range(0x10740, 0x10756), range(0x10760, 0x10768), range(0x10800, 0x10806), range(0x10808, 0x10809), range(0x1080a, 0x10836), range(0x10837, 0x10839), range(0x1083c, 0x1083d), range(0x1083f, 0x10856), range(0x10857, 0x1089f), range(0x108a7, 0x108b0), range(0x108e0, 0x108f3), range(0x108f4, 0x108f6), range(0x108fb, 0x1091c), range(0x1091f, 0x1093a), range(0x1093f, 0x10940), range(0x10980, 0x109b8), range(0x109bc, 0x109d0), range(0x109d2, 0x10a04), range(0x10a05, 0x10a07), range(0x10a0c, 0x10a14), range(0x10a15, 0x10a18), range(0x10a19, 0x10a36), range(0x10a38, 0x10a3b), range(0x10a3f, 0x10a49), range(0x10a50, 0x10a59), range(0x10a60, 0x10aa0), range(0x10ac0, 0x10ae7), range(0x10aeb, 0x10af7), range(0x10b00, 0x10b36), range(0x10b39, 0x10b56), range(0x10b58, 0x10b73), range(0x10b78, 0x10b92), range(0x10b99, 0x10b9d), range(0x10ba9, 0x10bb0), range(0x10c00, 0x10c49), range(0x10c80, 0x10cb3), range(0x10cc0, 0x10cf3), range(0x10cfa, 0x10d28), range(0x10d30, 0x10d3a), range(0x10e60, 0x10e7f), range(0x10e80, 0x10eaa), range(0x10eab, 0x10eae), range(0x10eb0, 0x10eb2), range(0x10f00, 0x10f28), range(0x10f30, 0x10f5a), range(0x10fb0, 0x10fcc), range(0x10fe0, 0x10ff7), range(0x11000, 0x1104e), range(0x11052, 0x11070), range(0x1107f, 0x110bd), range(0x110be, 0x110c2), range(0x110d0, 0x110e9), range(0x110f0, 0x110fa), range(0x11100, 0x11135), range(0x11136, 0x11148), range(0x11150, 0x11177), range(0x11180, 0x111e0), range(0x111e1, 0x111f5), range(0x11200, 0x11212), range(0x11213, 0x1123f), range(0x11280, 0x11287), range(0x11288, 0x11289), range(0x1128a, 0x1128e), range(0x1128f, 0x1129e), range(0x1129f, 0x112aa), range(0x112b0, 0x112eb), range(0x112f0, 0x112fa), range(0x11300, 0x11304), range(0x11305, 0x1130d), range(0x1130f, 0x11311), range(0x11313, 0x11329), range(0x1132a, 0x11331), range(0x11332, 0x11334), range(0x11335, 0x1133a), range(0x1133b, 0x11345), range(0x11347, 0x11349), range(0x1134b, 0x1134e), range(0x11350, 0x11351), range(0x11357, 0x11358), range(0x1135d, 0x11364), range(0x11366, 0x1136d), range(0x11370, 0x11375), range(0x11400, 0x1145c), range(0x1145d, 0x11462), range(0x11480, 0x114c8), range(0x114d0, 0x114da), range(0x11580, 0x115b6), range(0x115b8, 0x115de), range(0x11600, 0x11645), range(0x11650, 0x1165a), range(0x11660, 0x1166d), range(0x11680, 0x116b9), range(0x116c0, 0x116ca), range(0x11700, 0x1171b), range(0x1171d, 0x1172c), range(0x11730, 0x11740), range(0x11800, 0x1183c), range(0x118a0, 0x118f3), range(0x118ff, 0x11907), range(0x11909, 0x1190a), range(0x1190c, 0x11914), range(0x11915, 0x11917), range(0x11918, 0x11936), range(0x11937, 0x11939), range(0x1193b, 0x11947), range(0x11950, 0x1195a), range(0x119a0, 0x119a8), range(0x119aa, 0x119d8), range(0x119da, 0x119e5), range(0x11a00, 0x11a48), range(0x11a50, 0x11aa3), range(0x11ac0, 0x11af9), range(0x11c00, 0x11c09), range(0x11c0a, 0x11c37), range(0x11c38, 0x11c46), range(0x11c50, 0x11c6d), range(0x11c70, 0x11c90), range(0x11c92, 0x11ca8), range(0x11ca9, 0x11cb7), range(0x11d00, 0x11d07), range(0x11d08, 0x11d0a), range(0x11d0b, 0x11d37), range(0x11d3a, 0x11d3b), range(0x11d3c, 0x11d3e), range(0x11d3f, 0x11d48), range(0x11d50, 0x11d5a), range(0x11d60, 0x11d66), range(0x11d67, 0x11d69), range(0x11d6a, 0x11d8f), range(0x11d90, 0x11d92), range(0x11d93, 0x11d99), range(0x11da0, 0x11daa), range(0x11ee0, 0x11ef9), range(0x11fb0, 0x11fb1), range(0x11fc0, 0x11ff2), range(0x11fff, 0x1239a), range(0x12400, 0x1246f), range(0x12470, 0x12475), range(0x12480, 0x12544), range(0x13000, 0x1342f), range(0x14400, 0x14647), range(0x16800, 0x16a39), range(0x16a40, 0x16a5f), range(0x16a60, 0x16a6a), range(0x16a6e, 0x16a70), range(0x16ad0, 0x16aee), range(0x16af0, 0x16af6), range(0x16b00, 0x16b46), range(0x16b50, 0x16b5a), range(0x16b5b, 0x16b62), range(0x16b63, 0x16b78), range(0x16b7d, 0x16b90), range(0x16e40, 0x16e9b), range(0x16f00, 0x16f4b), range(0x16f4f, 0x16f88), range(0x16f8f, 0x16fa0), range(0x16fe0, 0x16fe5), range(0x16ff0, 0x16ff2), range(0x17000, 0x187f8), range(0x18800, 0x18cd6), range(0x18d00, 0x18d09), range(0x1b000, 0x1b11f), range(0x1b150, 0x1b153), range(0x1b164, 0x1b168), range(0x1b170, 0x1b2fc), range(0x1bc00, 0x1bc6b), range(0x1bc70, 0x1bc7d), range(0x1bc80, 0x1bc89), range(0x1bc90, 0x1bc9a), range(0x1bc9c, 0x1bca0), range(0x1d000, 0x1d0f6), range(0x1d100, 0x1d127), range(0x1d129, 0x1d173), range(0x1d17b, 0x1d1e9), range(0x1d200, 0x1d246), range(0x1d2e0, 0x1d2f4), range(0x1d300, 0x1d357), range(0x1d360, 0x1d379), range(0x1d400, 0x1d455), range(0x1d456, 0x1d49d), range(0x1d49e, 0x1d4a0), range(0x1d4a2, 0x1d4a3), range(0x1d4a5, 0x1d4a7), range(0x1d4a9, 0x1d4ad), range(0x1d4ae, 0x1d4ba), range(0x1d4bb, 0x1d4bc), range(0x1d4bd, 0x1d4c4), range(0x1d4c5, 0x1d506), range(0x1d507, 0x1d50b), range(0x1d50d, 0x1d515), range(0x1d516, 0x1d51d), range(0x1d51e, 0x1d53a), range(0x1d53b, 0x1d53f), range(0x1d540, 0x1d545), range(0x1d546, 0x1d547), range(0x1d54a, 0x1d551), range(0x1d552, 0x1d6a6), range(0x1d6a8, 0x1d7cc), range(0x1d7ce, 0x1da8c), range(0x1da9b, 0x1daa0), range(0x1daa1, 0x1dab0), range(0x1e000, 0x1e007), range(0x1e008, 0x1e019), range(0x1e01b, 0x1e022), range(0x1e023, 0x1e025), range(0x1e026, 0x1e02b), range(0x1e100, 0x1e12d), range(0x1e130, 0x1e13e), range(0x1e140, 0x1e14a), range(0x1e14e, 0x1e150), range(0x1e2c0, 0x1e2fa), range(0x1e2ff, 0x1e300), range(0x1e800, 0x1e8c5), range(0x1e8c7, 0x1e8d7), range(0x1e900, 0x1e94c), range(0x1e950, 0x1e95a), range(0x1e95e, 0x1e960), range(0x1ec71, 0x1ecb5), range(0x1ed01, 0x1ed3e), range(0x1ee00, 0x1ee04), range(0x1ee05, 0x1ee20), range(0x1ee21, 0x1ee23), range(0x1ee24, 0x1ee25), range(0x1ee27, 0x1ee28), range(0x1ee29, 0x1ee33), range(0x1ee34, 0x1ee38), range(0x1ee39, 0x1ee3a), range(0x1ee3b, 0x1ee3c), range(0x1ee42, 0x1ee43), range(0x1ee47, 0x1ee48), range(0x1ee49, 0x1ee4a), range(0x1ee4b, 0x1ee4c), range(0x1ee4d, 0x1ee50), range(0x1ee51, 0x1ee53), range(0x1ee54, 0x1ee55), range(0x1ee57, 0x1ee58), range(0x1ee59, 0x1ee5a), range(0x1ee5b, 0x1ee5c), range(0x1ee5d, 0x1ee5e), range(0x1ee5f, 0x1ee60), range(0x1ee61, 0x1ee63), range(0x1ee64, 0x1ee65), range(0x1ee67, 0x1ee6b), range(0x1ee6c, 0x1ee73), range(0x1ee74, 0x1ee78), range(0x1ee79, 0x1ee7d), range(0x1ee7e, 0x1ee7f), range(0x1ee80, 0x1ee8a), range(0x1ee8b, 0x1ee9c), range(0x1eea1, 0x1eea4), range(0x1eea5, 0x1eeaa), range(0x1eeab, 0x1eebc), range(0x1eef0, 0x1eef2), range(0x1f000, 0x1f02c), range(0x1f030, 0x1f094), range(0x1f0a0, 0x1f0af), range(0x1f0b1, 0x1f0c0), range(0x1f0c1, 0x1f0d0), range(0x1f0d1, 0x1f0f6), range(0x1f100, 0x1f1ae), range(0x1f1e6, 0x1f203), range(0x1f210, 0x1f23c), range(0x1f240, 0x1f249), range(0x1f250, 0x1f252), range(0x1f260, 0x1f266), range(0x1f300, 0x1f6d8), range(0x1f6e0, 0x1f6ed), range(0x1f6f0, 0x1f6fd), range(0x1f700, 0x1f774), range(0x1f780, 0x1f7d9), range(0x1f7e0, 0x1f7ec), range(0x1f800, 0x1f80c), range(0x1f810, 0x1f848), range(0x1f850, 0x1f85a), range(0x1f860, 0x1f888), range(0x1f890, 0x1f8ae), range(0x1f8b0, 0x1f8b2), range(0x1f900, 0x1f979), range(0x1f97a, 0x1f9cc), range(0x1f9cd, 0x1fa54), range(0x1fa60, 0x1fa6e), range(0x1fa70, 0x1fa75), range(0x1fa78, 0x1fa7b), range(0x1fa80, 0x1fa87), range(0x1fa90, 0x1faa9), range(0x1fab0, 0x1fab7), range(0x1fac0, 0x1fac3), range(0x1fad0, 0x1fad7), range(0x1fb00, 0x1fb93), range(0x1fb94, 0x1fbcb), range(0x1fbf0, 0x1fbfa), range(0x20000, 0x2a6de), range(0x2a700, 0x2b735), range(0x2b740, 0x2b81e), range(0x2b820, 0x2cea2), range(0x2ceb0, 0x2ebe1), range(0x2f800, 0x2fa1e), range(0x30000, 0x3134b), range(0xe0100, 0xe01f0)])),
        1: list(itertools.chain.from_iterable([range(0x20, 0x3c), range(0x3d, 0x7f), range(0xa1, 0xad), range(0xae, 0x378), range(0x37a, 0x380), range(0x384, 0x38b), range(0x38c, 0x38d), range(0x38e, 0x3a2), range(0x3a3, 0x530), range(0x531, 0x557), range(0x559, 0x58b), range(0x58d, 0x590), range(0x591, 0x5c8), range(0x5d0, 0x5eb), range(0x5ef, 0x5f5), range(0x606, 0x61c), range(0x61e, 0x6dd), range(0x6de, 0x70e), range(0x710, 0x74b), range(0x74d, 0x7b2), range(0x7c0, 0x7fb), range(0x7fd, 0x82e), range(0x830, 0x83f), range(0x840, 0x85c), range(0x85e, 0x85f), range(0x860, 0x86b), range(0x8a0, 0x8b5), range(0x8b6, 0x8c8), range(0x8d3, 0x8e2), range(0x8e3, 0x984), range(0x985, 0x98d), range(0x98f, 0x991), range(0x993, 0x9a9), range(0x9aa, 0x9b1), range(0x9b2, 0x9b3), range(0x9b6, 0x9ba), range(0x9bc, 0x9c5), range(0x9c7, 0x9c9), range(0x9cb, 0x9cf), range(0x9d7, 0x9d8), range(0x9dc, 0x9de), range(0x9df, 0x9e4), range(0x9e6, 0x9ff), range(0xa01, 0xa04), range(0xa05, 0xa0b), range(0xa0f, 0xa11), range(0xa13, 0xa29), range(0xa2a, 0xa31), range(0xa32, 0xa34), range(0xa35, 0xa37), range(0xa38, 0xa3a), range(0xa3c, 0xa3d), range(0xa3e, 0xa43), range(0xa47, 0xa49), range(0xa4b, 0xa4e), range(0xa51, 0xa52), range(0xa59, 0xa5d), range(0xa5e, 0xa5f), range(0xa66, 0xa77), range(0xa81, 0xa84), range(0xa85, 0xa8e), range(0xa8f, 0xa92), range(0xa93, 0xaa9), range(0xaaa, 0xab1), range(0xab2, 0xab4), range(0xab5, 0xaba), range(0xabc, 0xac6), range(0xac7, 0xaca), range(0xacb, 0xace), range(0xad0, 0xad1), range(0xae0, 0xae4), range(0xae6, 0xaf2), range(0xaf9, 0xb00), range(0xb01, 0xb04), range(0xb05, 0xb0d), range(0xb0f, 0xb11), range(0xb13, 0xb29), range(0xb2a, 0xb31), range(0xb32, 0xb34), range(0xb35, 0xb3a), range(0xb3c, 0xb45), range(0xb47, 0xb49), range(0xb4b, 0xb4e), range(0xb55, 0xb58), range(0xb5c, 0xb5e), range(0xb5f, 0xb64), range(0xb66, 0xb78), range(0xb82, 0xb84), range(0xb85, 0xb8b), range(0xb8e, 0xb91), range(0xb92, 0xb96), range(0xb99, 0xb9b), range(0xb9c, 0xb9d), range(0xb9e, 0xba0), range(0xba3, 0xba5), range(0xba8, 0xbab), range(0xbae, 0xbba), range(0xbbe, 0xbc3), range(0xbc6, 0xbc9), range(0xbca, 0xbce), range(0xbd0, 0xbd1), range(0xbd7, 0xbd8), range(0xbe6, 0xbfb), range(0xc00, 0xc0d), range(0xc0e, 0xc11), range(0xc12, 0xc29), range(0xc2a, 0xc3a), range(0xc3d, 0xc45), range(0xc46, 0xc49), range(0xc4a, 0xc4e), range(0xc55, 0xc57), range(0xc58, 0xc5b), range(0xc60, 0xc64), range(0xc66, 0xc70), range(0xc77, 0xc8d), range(0xc8e, 0xc91), range(0xc92, 0xca9), range(0xcaa, 0xcb4), range(0xcb5, 0xcba), range(0xcbc, 0xcc5), range(0xcc6, 0xcc9), range(0xcca, 0xcce), range(0xcd5, 0xcd7), range(0xcde, 0xcdf), range(0xce0, 0xce4), range(0xce6, 0xcf0), range(0xcf1, 0xcf3), range(0xd00, 0xd0d), range(0xd0e, 0xd11), range(0xd12, 0xd45), range(0xd46, 0xd49), range(0xd4a, 0xd50), range(0xd54, 0xd64), range(0xd66, 0xd80), range(0xd81, 0xd84), range(0xd85, 0xd97), range(0xd9a, 0xdb2), range(0xdb3, 0xdbc), range(0xdbd, 0xdbe), range(0xdc0, 0xdc7), range(0xdca, 0xdcb), range(0xdcf, 0xdd5), range(0xdd6, 0xdd7), range(0xdd8, 0xde0), range(0xde6, 0xdf0), range(0xdf2, 0xdf5), range(0xe01, 0xe3b), range(0xe3f, 0xe5c), range(0xe81, 0xe83), range(0xe84, 0xe85), range(0xe86, 0xe8b), range(0xe8c, 0xea4), range(0xea5, 0xea6), range(0xea7, 0xebe), range(0xec0, 0xec5), range(0xec6, 0xec7), range(0xec8, 0xece), range(0xed0, 0xeda), range(0xedc, 0xee0), range(0xf00, 0xf48), range(0xf49, 0xf6d), range(0xf71, 0xf98), range(0xf99, 0xfbd), range(0xfbe, 0xfcd), range(0xfce, 0xfdb), range(0x1000, 0x10c6), range(0x10c7, 0x10c8), range(0x10cd, 0x10ce), range(0x10d0, 0x1249), range(0x124a, 0x124e), range(0x1250, 0x1257), range(0x1258, 0x1259), range(0x125a, 0x125e), range(0x1260, 0x1289), range(0x128a, 0x128e), range(0x1290, 0x12b1), range(0x12b2, 0x12b6), range(0x12b8, 0x12bf), range(0x12c0, 0x12c1), range(0x12c2, 0x12c6), range(0x12c8, 0x12d7), range(0x12d8, 0x1311), range(0x1312, 0x1316), range(0x1318, 0x135b), range(0x135d, 0x137d), range(0x1380, 0x139a), range(0x13a0, 0x13f6), range(0x13f8, 0x13fe), range(0x1400, 0x1680), range(0x1681, 0x169d), range(0x16a0, 0x16f9), range(0x1700, 0x170d), range(0x170e, 0x1715), range(0x1720, 0x1737), range(0x1740, 0x1754), range(0x1760, 0x176d), range(0x176e, 0x1771), range(0x1772, 0x1774), range(0x1780, 0x17de), range(0x17e0, 0x17ea), range(0x17f0, 0x17fa), range(0x1800, 0x180e), range(0x1810, 0x181a), range(0x1820, 0x1879), range(0x1880, 0x18ab), range(0x18b0, 0x18f6), range(0x1900, 0x191f), range(0x1920, 0x192c), range(0x1930, 0x193c), range(0x1940, 0x1941), range(0x1944, 0x196e), range(0x1970, 0x1975), range(0x1980, 0x19ac), range(0x19b0, 0x19ca), range(0x19d0, 0x19db), range(0x19de, 0x1a1c), range(0x1a1e, 0x1a5f), range(0x1a60, 0x1a7d), range(0x1a7f, 0x1a8a), range(0x1a90, 0x1a9a), range(0x1aa0, 0x1aae), range(0x1ab0, 0x1ac1), range(0x1b00, 0x1b4c), range(0x1b50, 0x1b7d), range(0x1b80, 0x1bf4), range(0x1bfc, 0x1c38), range(0x1c3b, 0x1c4a), range(0x1c4d, 0x1c89), range(0x1c90, 0x1cbb), range(0x1cbd, 0x1cc8), range(0x1cd0, 0x1cfb), range(0x1d00, 0x1dfa), range(0x1dfb, 0x1f16), range(0x1f18, 0x1f1e), range(0x1f20, 0x1f46), range(0x1f48, 0x1f4e), range(0x1f50, 0x1f58), range(0x1f59, 0x1f5a), range(0x1f5b, 0x1f5c), range(0x1f5d, 0x1f5e), range(0x1f5f, 0x1f7e), range(0x1f80, 0x1fb5), range(0x1fb6, 0x1fc5), range(0x1fc6, 0x1fd4), range(0x1fd6, 0x1fdc), range(0x1fdd, 0x1ff0), range(0x1ff2, 0x1ff5), range(0x1ff6, 0x1fff), range(0x2010, 0x2028), range(0x2030, 0x205f), range(0x2070, 0x2072), range(0x2074, 0x208f), range(0x2090, 0x209d), range(0x20a0, 0x20c0), range(0x20d0, 0x20f1), range(0x2100, 0x218c), range(0x2190, 0x2427), range(0x2440, 0x244b), range(0x2460, 0x2b74), range(0x2b76, 0x2b96), range(0x2b97, 0x2c2f), range(0x2c30, 0x2c5f), range(0x2c60, 0x2cf4), range(0x2cf9, 0x2d26), range(0x2d27, 0x2d28), range(0x2d2d, 0x2d2e), range(0x2d30, 0x2d68), range(0x2d6f, 0x2d71), range(0x2d7f, 0x2d97), range(0x2da0, 0x2da7), range(0x2da8, 0x2daf), range(0x2db0, 0x2db7), range(0x2db8, 0x2dbf), range(0x2dc0, 0x2dc7), range(0x2dc8, 0x2dcf), range(0x2dd0, 0x2dd7), range(0x2dd8, 0x2ddf), range(0x2de0, 0x2e53), range(0x2e80, 0x2e9a), range(0x2e9b, 0x2ef4), range(0x2f00, 0x2fd6), range(0x2ff0, 0x2ffc), range(0x3001, 0x3040), range(0x3041, 0x3097), range(0x3099, 0x3100), range(0x3105, 0x3130), range(0x3131, 0x318f), range(0x3190, 0x31e4), range(0x31f0, 0x321f), range(0x3220, 0x9ffd), range(0xa000, 0xa48d), range(0xa490, 0xa4c7), range(0xa4d0, 0xa62c), range(0xa640, 0xa6f8), range(0xa700, 0xa7c0), range(0xa7c2, 0xa7cb), range(0xa7f5, 0xa82d), range(0xa830, 0xa83a), range(0xa840, 0xa878), range(0xa880, 0xa8c6), range(0xa8ce, 0xa8da), range(0xa8e0, 0xa954), range(0xa95f, 0xa97d), range(0xa980, 0xa9ce), range(0xa9cf, 0xa9da), range(0xa9de, 0xa9ff), range(0xaa00, 0xaa37), range(0xaa40, 0xaa4e), range(0xaa50, 0xaa5a), range(0xaa5c, 0xaac3), range(0xaadb, 0xaaf7), range(0xab01, 0xab07), range(0xab09, 0xab0f), range(0xab11, 0xab17), range(0xab20, 0xab27), range(0xab28, 0xab2f), range(0xab30, 0xab6c), range(0xab70, 0xabee), range(0xabf0, 0xabfa), range(0xac00, 0xd7a4), range(0xd7b0, 0xd7c7), range(0xd7cb, 0xd7fc), range(0xf900, 0xfa6e), range(0xfa70, 0xfada), range(0xfb00, 0xfb07), range(0xfb13, 0xfb18), range(0xfb1d, 0xfb37), range(0xfb38, 0xfb3d), range(0xfb3e, 0xfb3f), range(0xfb40, 0xfb42), range(0xfb43, 0xfb45), range(0xfb46, 0xfbc2), range(0xfbd3, 0xfd40), range(0xfd50, 0xfd90), range(0xfd92, 0xfdc8), range(0xfdf0, 0xfdfe), range(0xfe00, 0xfe1a), range(0xfe20, 0xfe53), range(0xfe54, 0xfe67), range(0xfe68, 0xfe6c), range(0xfe70, 0xfe75), range(0xfe76, 0xfefd), range(0xff01, 0xffbf), range(0xffc2, 0xffc8), range(0xffca, 0xffd0), range(0xffd2, 0xffd8), range(0xffda, 0xffdd), range(0xffe0, 0xffe7), range(0xffe8, 0xffef), range(0xfffc, 0xfffe), range(0x10000, 0x1000c), range(0x1000d, 0x10027), range(0x10028, 0x1003b), range(0x1003c, 0x1003e), range(0x1003f, 0x1004e), range(0x10050, 0x1005e), range(0x10080, 0x100fb), range(0x10100, 0x10103), range(0x10107, 0x10134), range(0x10137, 0x1018f), range(0x10190, 0x1019d), range(0x101a0, 0x101a1), range(0x101d0, 0x101fe), range(0x10280, 0x1029d), range(0x102a0, 0x102d1), range(0x102e0, 0x102fc), range(0x10300, 0x10324), range(0x1032d, 0x1034b), range(0x10350, 0x1037b), range(0x10380, 0x1039e), range(0x1039f, 0x103c4), range(0x103c8, 0x103d6), range(0x10400, 0x1049e), range(0x104a0, 0x104aa), range(0x104b0, 0x104d4), range(0x104d8, 0x104fc), range(0x10500, 0x10528), range(0x10530, 0x10564), range(0x1056f, 0x10570), range(0x10600, 0x10737), range(0x10740, 0x10756), range(0x10760, 0x10768), range(0x10800, 0x10806), range(0x10808, 0x10809), range(0x1080a, 0x10836), range(0x10837, 0x10839), range(0x1083c, 0x1083d), range(0x1083f, 0x10856), range(0x10857, 0x1089f), range(0x108a7, 0x108b0), range(0x108e0, 0x108f3), range(0x108f4, 0x108f6), range(0x108fb, 0x1091c), range(0x1091f, 0x1093a), range(0x1093f, 0x10940), range(0x10980, 0x109b8), range(0x109bc, 0x109d0), range(0x109d2, 0x10a04), range(0x10a05, 0x10a07), range(0x10a0c, 0x10a14), range(0x10a15, 0x10a18), range(0x10a19, 0x10a36), range(0x10a38, 0x10a3b), range(0x10a3f, 0x10a49), range(0x10a50, 0x10a59), range(0x10a60, 0x10aa0), range(0x10ac0, 0x10ae7), range(0x10aeb, 0x10af7), range(0x10b00, 0x10b36), range(0x10b39, 0x10b56), range(0x10b58, 0x10b73), range(0x10b78, 0x10b92), range(0x10b99, 0x10b9d), range(0x10ba9, 0x10bb0), range(0x10c00, 0x10c49), range(0x10c80, 0x10cb3), range(0x10cc0, 0x10cf3), range(0x10cfa, 0x10d28), range(0x10d30, 0x10d3a), range(0x10e60, 0x10e7f), range(0x10e80, 0x10eaa), range(0x10eab, 0x10eae), range(0x10eb0, 0x10eb2), range(0x10f00, 0x10f28), range(0x10f30, 0x10f5a), range(0x10fb0, 0x10fcc), range(0x10fe0, 0x10ff7), range(0x11000, 0x1104e), range(0x11052, 0x11070), range(0x1107f, 0x110bd), range(0x110be, 0x110c2), range(0x110d0, 0x110e9), range(0x110f0, 0x110fa), range(0x11100, 0x11135), range(0x11136, 0x11148), range(0x11150, 0x11177), range(0x11180, 0x111e0), range(0x111e1, 0x111f5), range(0x11200, 0x11212), range(0x11213, 0x1123f), range(0x11280, 0x11287), range(0x11288, 0x11289), range(0x1128a, 0x1128e), range(0x1128f, 0x1129e), range(0x1129f, 0x112aa), range(0x112b0, 0x112eb), range(0x112f0, 0x112fa), range(0x11300, 0x11304), range(0x11305, 0x1130d), range(0x1130f, 0x11311), range(0x11313, 0x11329), range(0x1132a, 0x11331), range(0x11332, 0x11334), range(0x11335, 0x1133a), range(0x1133b, 0x11345), range(0x11347, 0x11349), range(0x1134b, 0x1134e), range(0x11350, 0x11351), range(0x11357, 0x11358), range(0x1135d, 0x11364), range(0x11366, 0x1136d), range(0x11370, 0x11375), range(0x11400, 0x1145c), range(0x1145d, 0x11462), range(0x11480, 0x114c8), range(0x114d0, 0x114da), range(0x11580, 0x115b6), range(0x115b8, 0x115de), range(0x11600, 0x11645), range(0x11650, 0x1165a), range(0x11660, 0x1166d), range(0x11680, 0x116b9), range(0x116c0, 0x116ca), range(0x11700, 0x1171b), range(0x1171d, 0x1172c), range(0x11730, 0x11740), range(0x11800, 0x1183c), range(0x118a0, 0x118f3), range(0x118ff, 0x11907), range(0x11909, 0x1190a), range(0x1190c, 0x11914), range(0x11915, 0x11917), range(0x11918, 0x11936), range(0x11937, 0x11939), range(0x1193b, 0x11947), range(0x11950, 0x1195a), range(0x119a0, 0x119a8), range(0x119aa, 0x119d8), range(0x119da, 0x119e5), range(0x11a00, 0x11a48), range(0x11a50, 0x11aa3), range(0x11ac0, 0x11af9), range(0x11c00, 0x11c09), range(0x11c0a, 0x11c37), range(0x11c38, 0x11c46), range(0x11c50, 0x11c6d), range(0x11c70, 0x11c90), range(0x11c92, 0x11ca8), range(0x11ca9, 0x11cb7), range(0x11d00, 0x11d07), range(0x11d08, 0x11d0a), range(0x11d0b, 0x11d37), range(0x11d3a, 0x11d3b), range(0x11d3c, 0x11d3e), range(0x11d3f, 0x11d48), range(0x11d50, 0x11d5a), range(0x11d60, 0x11d66), range(0x11d67, 0x11d69), range(0x11d6a, 0x11d8f), range(0x11d90, 0x11d92), range(0x11d93, 0x11d99), range(0x11da0, 0x11daa), range(0x11ee0, 0x11ef9), range(0x11fb0, 0x11fb1), range(0x11fc0, 0x11ff2), range(0x11fff, 0x1239a), range(0x12400, 0x1246f), range(0x12470, 0x12475), range(0x12480, 0x12544), range(0x13000, 0x1342f), range(0x14400, 0x14647), range(0x16800, 0x16a39), range(0x16a40, 0x16a5f), range(0x16a60, 0x16a6a), range(0x16a6e, 0x16a70), range(0x16ad0, 0x16aee), range(0x16af0, 0x16af6), range(0x16b00, 0x16b46), range(0x16b50, 0x16b5a), range(0x16b5b, 0x16b62), range(0x16b63, 0x16b78), range(0x16b7d, 0x16b90), range(0x16e40, 0x16e9b), range(0x16f00, 0x16f4b), range(0x16f4f, 0x16f88), range(0x16f8f, 0x16fa0), range(0x16fe0, 0x16fe5), range(0x16ff0, 0x16ff2), range(0x17000, 0x187f8), range(0x18800, 0x18cd6), range(0x18d00, 0x18d09), range(0x1b000, 0x1b11f), range(0x1b150, 0x1b153), range(0x1b164, 0x1b168), range(0x1b170, 0x1b2fc), range(0x1bc00, 0x1bc6b), range(0x1bc70, 0x1bc7d), range(0x1bc80, 0x1bc89), range(0x1bc90, 0x1bc9a), range(0x1bc9c, 0x1bca0), range(0x1d000, 0x1d0f6), range(0x1d100, 0x1d127), range(0x1d129, 0x1d173), range(0x1d17b, 0x1d1e9), range(0x1d200, 0x1d246), range(0x1d2e0, 0x1d2f4), range(0x1d300, 0x1d357), range(0x1d360, 0x1d379), range(0x1d400, 0x1d455), range(0x1d456, 0x1d49d), range(0x1d49e, 0x1d4a0), range(0x1d4a2, 0x1d4a3), range(0x1d4a5, 0x1d4a7), range(0x1d4a9, 0x1d4ad), range(0x1d4ae, 0x1d4ba), range(0x1d4bb, 0x1d4bc), range(0x1d4bd, 0x1d4c4), range(0x1d4c5, 0x1d506), range(0x1d507, 0x1d50b), range(0x1d50d, 0x1d515), range(0x1d516, 0x1d51d), range(0x1d51e, 0x1d53a), range(0x1d53b, 0x1d53f), range(0x1d540, 0x1d545), range(0x1d546, 0x1d547), range(0x1d54a, 0x1d551), range(0x1d552, 0x1d6a6), range(0x1d6a8, 0x1d7cc), range(0x1d7ce, 0x1da8c), range(0x1da9b, 0x1daa0), range(0x1daa1, 0x1dab0), range(0x1e000, 0x1e007), range(0x1e008, 0x1e019), range(0x1e01b, 0x1e022), range(0x1e023, 0x1e025), range(0x1e026, 0x1e02b), range(0x1e100, 0x1e12d), range(0x1e130, 0x1e13e), range(0x1e140, 0x1e14a), range(0x1e14e, 0x1e150), range(0x1e2c0, 0x1e2fa), range(0x1e2ff, 0x1e300), range(0x1e800, 0x1e8c5), range(0x1e8c7, 0x1e8d7), range(0x1e900, 0x1e94c), range(0x1e950, 0x1e95a), range(0x1e95e, 0x1e960), range(0x1ec71, 0x1ecb5), range(0x1ed01, 0x1ed3e), range(0x1ee00, 0x1ee04), range(0x1ee05, 0x1ee20), range(0x1ee21, 0x1ee23), range(0x1ee24, 0x1ee25), range(0x1ee27, 0x1ee28), range(0x1ee29, 0x1ee33), range(0x1ee34, 0x1ee38), range(0x1ee39, 0x1ee3a), range(0x1ee3b, 0x1ee3c), range(0x1ee42, 0x1ee43), range(0x1ee47, 0x1ee48), range(0x1ee49, 0x1ee4a), range(0x1ee4b, 0x1ee4c), range(0x1ee4d, 0x1ee50), range(0x1ee51, 0x1ee53), range(0x1ee54, 0x1ee55), range(0x1ee57, 0x1ee58), range(0x1ee59, 0x1ee5a), range(0x1ee5b, 0x1ee5c), range(0x1ee5d, 0x1ee5e), range(0x1ee5f, 0x1ee60), range(0x1ee61, 0x1ee63), range(0x1ee64, 0x1ee65), range(0x1ee67, 0x1ee6b), range(0x1ee6c, 0x1ee73), range(0x1ee74, 0x1ee78), range(0x1ee79, 0x1ee7d), range(0x1ee7e, 0x1ee7f), range(0x1ee80, 0x1ee8a), range(0x1ee8b, 0x1ee9c), range(0x1eea1, 0x1eea4), range(0x1eea5, 0x1eeaa), range(0x1eeab, 0x1eebc), range(0x1eef0, 0x1eef2), range(0x1f000, 0x1f02c), range(0x1f030, 0x1f094), range(0x1f0a0, 0x1f0af), range(0x1f0b1, 0x1f0c0), range(0x1f0c1, 0x1f0d0), range(0x1f0d1, 0x1f0f6), range(0x1f100, 0x1f1ae), range(0x1f1e6, 0x1f203), range(0x1f210, 0x1f23c), range(0x1f240, 0x1f249), range(0x1f250, 0x1f252), range(0x1f260, 0x1f266), range(0x1f300, 0x1f6d8), range(0x1f6e0, 0x1f6ed), range(0x1f6f0, 0x1f6fd), range(0x1f700, 0x1f774), range(0x1f780, 0x1f7d9), range(0x1f7e0, 0x1f7ec), range(0x1f800, 0x1f80c), range(0x1f810, 0x1f848), range(0x1f850, 0x1f85a), range(0x1f860, 0x1f888), range(0x1f890, 0x1f8ae), range(0x1f8b0, 0x1f8b2), range(0x1f900, 0x1f979), range(0x1f97a, 0x1f9cc), range(0x1f9cd, 0x1fa54), range(0x1fa60, 0x1fa6e), range(0x1fa70, 0x1fa75), range(0x1fa78, 0x1fa7b), range(0x1fa80, 0x1fa87), range(0x1fa90, 0x1faa9), range(0x1fab0, 0x1fab7), range(0x1fac0, 0x1fac3), range(0x1fad0, 0x1fad7), range(0x1fb00, 0x1fb93), range(0x1fb94, 0x1fbcb), range(0x1fbf0, 0x1fbfa), range(0x20000, 0x2a6de), range(0x2a700, 0x2b735), range(0x2b740, 0x2b81e), range(0x2b820, 0x2cea2), range(0x2ceb0, 0x2ebe1), range(0x2f800, 0x2fa1e), range(0x30000, 0x3134b), range(0xe0100, 0xe01f0)])),
        2: list(itertools.chain.from_iterable([range(0x9, 0xa), range(0xa, 0xb), range(0xd, 0xe), range(0x20, 0x21)])),
        3: list(itertools.chain.from_iterable([range(0x30, 0x3a), range(0x41, 0x47), range(0x61, 0x67)])),
        4: list(itertools.chain.from_iterable([range(0x30, 0x3a)])),
        5: list(itertools.chain.from_iterable([range(0x300, 0x370)])),
        6: list(itertools.chain.from_iterable([range(0x203f, 0x2041)])),
        7: list(itertools.chain.from_iterable([range(0x3a, 0x3b), range(0x41, 0x5b), range(0x61, 0x7b)])),
        8: list(itertools.chain.from_iterable([range(0x2070, 0x2190)])),
        9: list(itertools.chain.from_iterable([range(0x2c00, 0x2ff0)])),
        10: list(itertools.chain.from_iterable([range(0x3001, 0xd800)])),
        11: list(itertools.chain.from_iterable([range(0xf900, 0xfdd0)])),
        12: list(itertools.chain.from_iterable([range(0xfdf0, 0xfffe)])),
        13: list(itertools.chain.from_iterable([range(0x20, 0x21)])),
        14: list(itertools.chain.from_iterable([range(0x30, 0x3a), range(0x41, 0x5b), range(0x61, 0x7b)])),
        15: list(itertools.chain.from_iterable([range(0x20, 0x22), range(0x23, 0x3c), range(0x3d, 0x7f), range(0xa1, 0xad), range(0xae, 0x378), range(0x37a, 0x380), range(0x384, 0x38b), range(0x38c, 0x38d), range(0x38e, 0x3a2), range(0x3a3, 0x530), range(0x531, 0x557), range(0x559, 0x58b), range(0x58d, 0x590), range(0x591, 0x5c8), range(0x5d0, 0x5eb), range(0x5ef, 0x5f5), range(0x606, 0x61c), range(0x61e, 0x6dd), range(0x6de, 0x70e), range(0x710, 0x74b), range(0x74d, 0x7b2), range(0x7c0, 0x7fb), range(0x7fd, 0x82e), range(0x830, 0x83f), range(0x840, 0x85c), range(0x85e, 0x85f), range(0x860, 0x86b), range(0x8a0, 0x8b5), range(0x8b6, 0x8c8), range(0x8d3, 0x8e2), range(0x8e3, 0x984), range(0x985, 0x98d), range(0x98f, 0x991), range(0x993, 0x9a9), range(0x9aa, 0x9b1), range(0x9b2, 0x9b3), range(0x9b6, 0x9ba), range(0x9bc, 0x9c5), range(0x9c7, 0x9c9), range(0x9cb, 0x9cf), range(0x9d7, 0x9d8), range(0x9dc, 0x9de), range(0x9df, 0x9e4), range(0x9e6, 0x9ff), range(0xa01, 0xa04), range(0xa05, 0xa0b), range(0xa0f, 0xa11), range(0xa13, 0xa29), range(0xa2a, 0xa31), range(0xa32, 0xa34), range(0xa35, 0xa37), range(0xa38, 0xa3a), range(0xa3c, 0xa3d), range(0xa3e, 0xa43), range(0xa47, 0xa49), range(0xa4b, 0xa4e), range(0xa51, 0xa52), range(0xa59, 0xa5d), range(0xa5e, 0xa5f), range(0xa66, 0xa77), range(0xa81, 0xa84), range(0xa85, 0xa8e), range(0xa8f, 0xa92), range(0xa93, 0xaa9), range(0xaaa, 0xab1), range(0xab2, 0xab4), range(0xab5, 0xaba), range(0xabc, 0xac6), range(0xac7, 0xaca), range(0xacb, 0xace), range(0xad0, 0xad1), range(0xae0, 0xae4), range(0xae6, 0xaf2), range(0xaf9, 0xb00), range(0xb01, 0xb04), range(0xb05, 0xb0d), range(0xb0f, 0xb11), range(0xb13, 0xb29), range(0xb2a, 0xb31), range(0xb32, 0xb34), range(0xb35, 0xb3a), range(0xb3c, 0xb45), range(0xb47, 0xb49), range(0xb4b, 0xb4e), range(0xb55, 0xb58), range(0xb5c, 0xb5e), range(0xb5f, 0xb64), range(0xb66, 0xb78), range(0xb82, 0xb84), range(0xb85, 0xb8b), range(0xb8e, 0xb91), range(0xb92, 0xb96), range(0xb99, 0xb9b), range(0xb9c, 0xb9d), range(0xb9e, 0xba0), range(0xba3, 0xba5), range(0xba8, 0xbab), range(0xbae, 0xbba), range(0xbbe, 0xbc3), range(0xbc6, 0xbc9), range(0xbca, 0xbce), range(0xbd0, 0xbd1), range(0xbd7, 0xbd8), range(0xbe6, 0xbfb), range(0xc00, 0xc0d), range(0xc0e, 0xc11), range(0xc12, 0xc29), range(0xc2a, 0xc3a), range(0xc3d, 0xc45), range(0xc46, 0xc49), range(0xc4a, 0xc4e), range(0xc55, 0xc57), range(0xc58, 0xc5b), range(0xc60, 0xc64), range(0xc66, 0xc70), range(0xc77, 0xc8d), range(0xc8e, 0xc91), range(0xc92, 0xca9), range(0xcaa, 0xcb4), range(0xcb5, 0xcba), range(0xcbc, 0xcc5), range(0xcc6, 0xcc9), range(0xcca, 0xcce), range(0xcd5, 0xcd7), range(0xcde, 0xcdf), range(0xce0, 0xce4), range(0xce6, 0xcf0), range(0xcf1, 0xcf3), range(0xd00, 0xd0d), range(0xd0e, 0xd11), range(0xd12, 0xd45), range(0xd46, 0xd49), range(0xd4a, 0xd50), range(0xd54, 0xd64), range(0xd66, 0xd80), range(0xd81, 0xd84), range(0xd85, 0xd97), range(0xd9a, 0xdb2), range(0xdb3, 0xdbc), range(0xdbd, 0xdbe), range(0xdc0, 0xdc7), range(0xdca, 0xdcb), range(0xdcf, 0xdd5), range(0xdd6, 0xdd7), range(0xdd8, 0xde0), range(0xde6, 0xdf0), range(0xdf2, 0xdf5), range(0xe01, 0xe3b), range(0xe3f, 0xe5c), range(0xe81, 0xe83), range(0xe84, 0xe85), range(0xe86, 0xe8b), range(0xe8c, 0xea4), range(0xea5, 0xea6), range(0xea7, 0xebe), range(0xec0, 0xec5), range(0xec6, 0xec7), range(0xec8, 0xece), range(0xed0, 0xeda), range(0xedc, 0xee0), range(0xf00, 0xf48), range(0xf49, 0xf6d), range(0xf71, 0xf98), range(0xf99, 0xfbd), range(0xfbe, 0xfcd), range(0xfce, 0xfdb), range(0x1000, 0x10c6), range(0x10c7, 0x10c8), range(0x10cd, 0x10ce), range(0x10d0, 0x1249), range(0x124a, 0x124e), range(0x1250, 0x1257), range(0x1258, 0x1259), range(0x125a, 0x125e), range(0x1260, 0x1289), range(0x128a, 0x128e), range(0x1290, 0x12b1), range(0x12b2, 0x12b6), range(0x12b8, 0x12bf), range(0x12c0, 0x12c1), range(0x12c2, 0x12c6), range(0x12c8, 0x12d7), range(0x12d8, 0x1311), range(0x1312, 0x1316), range(0x1318, 0x135b), range(0x135d, 0x137d), range(0x1380, 0x139a), range(0x13a0, 0x13f6), range(0x13f8, 0x13fe), range(0x1400, 0x1680), range(0x1681, 0x169d), range(0x16a0, 0x16f9), range(0x1700, 0x170d), range(0x170e, 0x1715), range(0x1720, 0x1737), range(0x1740, 0x1754), range(0x1760, 0x176d), range(0x176e, 0x1771), range(0x1772, 0x1774), range(0x1780, 0x17de), range(0x17e0, 0x17ea), range(0x17f0, 0x17fa), range(0x1800, 0x180e), range(0x1810, 0x181a), range(0x1820, 0x1879), range(0x1880, 0x18ab), range(0x18b0, 0x18f6), range(0x1900, 0x191f), range(0x1920, 0x192c), range(0x1930, 0x193c), range(0x1940, 0x1941), range(0x1944, 0x196e), range(0x1970, 0x1975), range(0x1980, 0x19ac), range(0x19b0, 0x19ca), range(0x19d0, 0x19db), range(0x19de, 0x1a1c), range(0x1a1e, 0x1a5f), range(0x1a60, 0x1a7d), range(0x1a7f, 0x1a8a), range(0x1a90, 0x1a9a), range(0x1aa0, 0x1aae), range(0x1ab0, 0x1ac1), range(0x1b00, 0x1b4c), range(0x1b50, 0x1b7d), range(0x1b80, 0x1bf4), range(0x1bfc, 0x1c38), range(0x1c3b, 0x1c4a), range(0x1c4d, 0x1c89), range(0x1c90, 0x1cbb), range(0x1cbd, 0x1cc8), range(0x1cd0, 0x1cfb), range(0x1d00, 0x1dfa), range(0x1dfb, 0x1f16), range(0x1f18, 0x1f1e), range(0x1f20, 0x1f46), range(0x1f48, 0x1f4e), range(0x1f50, 0x1f58), range(0x1f59, 0x1f5a), range(0x1f5b, 0x1f5c), range(0x1f5d, 0x1f5e), range(0x1f5f, 0x1f7e), range(0x1f80, 0x1fb5), range(0x1fb6, 0x1fc5), range(0x1fc6, 0x1fd4), range(0x1fd6, 0x1fdc), range(0x1fdd, 0x1ff0), range(0x1ff2, 0x1ff5), range(0x1ff6, 0x1fff), range(0x2010, 0x2028), range(0x2030, 0x205f), range(0x2070, 0x2072), range(0x2074, 0x208f), range(0x2090, 0x209d), range(0x20a0, 0x20c0), range(0x20d0, 0x20f1), range(0x2100, 0x218c), range(0x2190, 0x2427), range(0x2440, 0x244b), range(0x2460, 0x2b74), range(0x2b76, 0x2b96), range(0x2b97, 0x2c2f), range(0x2c30, 0x2c5f), range(0x2c60, 0x2cf4), range(0x2cf9, 0x2d26), range(0x2d27, 0x2d28), range(0x2d2d, 0x2d2e), range(0x2d30, 0x2d68), range(0x2d6f, 0x2d71), range(0x2d7f, 0x2d97), range(0x2da0, 0x2da7), range(0x2da8, 0x2daf), range(0x2db0, 0x2db7), range(0x2db8, 0x2dbf), range(0x2dc0, 0x2dc7), range(0x2dc8, 0x2dcf), range(0x2dd0, 0x2dd7), range(0x2dd8, 0x2ddf), range(0x2de0, 0x2e53), range(0x2e80, 0x2e9a), range(0x2e9b, 0x2ef4), range(0x2f00, 0x2fd6), range(0x2ff0, 0x2ffc), range(0x3001, 0x3040), range(0x3041, 0x3097), range(0x3099, 0x3100), range(0x3105, 0x3130), range(0x3131, 0x318f), range(0x3190, 0x31e4), range(0x31f0, 0x321f), range(0x3220, 0x9ffd), range(0xa000, 0xa48d), range(0xa490, 0xa4c7), range(0xa4d0, 0xa62c), range(0xa640, 0xa6f8), range(0xa700, 0xa7c0), range(0xa7c2, 0xa7cb), range(0xa7f5, 0xa82d), range(0xa830, 0xa83a), range(0xa840, 0xa878), range(0xa880, 0xa8c6), range(0xa8ce, 0xa8da), range(0xa8e0, 0xa954), range(0xa95f, 0xa97d), range(0xa980, 0xa9ce), range(0xa9cf, 0xa9da), range(0xa9de, 0xa9ff), range(0xaa00, 0xaa37), range(0xaa40, 0xaa4e), range(0xaa50, 0xaa5a), range(0xaa5c, 0xaac3), range(0xaadb, 0xaaf7), range(0xab01, 0xab07), range(0xab09, 0xab0f), range(0xab11, 0xab17), range(0xab20, 0xab27), range(0xab28, 0xab2f), range(0xab30, 0xab6c), range(0xab70, 0xabee), range(0xabf0, 0xabfa), range(0xac00, 0xd7a4), range(0xd7b0, 0xd7c7), range(0xd7cb, 0xd7fc), range(0xf900, 0xfa6e), range(0xfa70, 0xfada), range(0xfb00, 0xfb07), range(0xfb13, 0xfb18), range(0xfb1d, 0xfb37), range(0xfb38, 0xfb3d), range(0xfb3e, 0xfb3f), range(0xfb40, 0xfb42), range(0xfb43, 0xfb45), range(0xfb46, 0xfbc2), range(0xfbd3, 0xfd40), range(0xfd50, 0xfd90), range(0xfd92, 0xfdc8), range(0xfdf0, 0xfdfe), range(0xfe00, 0xfe1a), range(0xfe20, 0xfe53), range(0xfe54, 0xfe67), range(0xfe68, 0xfe6c), range(0xfe70, 0xfe75), range(0xfe76, 0xfefd), range(0xff01, 0xffbf), range(0xffc2, 0xffc8), range(0xffca, 0xffd0), range(0xffd2, 0xffd8), range(0xffda, 0xffdd), range(0xffe0, 0xffe7), range(0xffe8, 0xffef), range(0xfffc, 0xfffe), range(0x10000, 0x1000c), range(0x1000d, 0x10027), range(0x10028, 0x1003b), range(0x1003c, 0x1003e), range(0x1003f, 0x1004e), range(0x10050, 0x1005e), range(0x10080, 0x100fb), range(0x10100, 0x10103), range(0x10107, 0x10134), range(0x10137, 0x1018f), range(0x10190, 0x1019d), range(0x101a0, 0x101a1), range(0x101d0, 0x101fe), range(0x10280, 0x1029d), range(0x102a0, 0x102d1), range(0x102e0, 0x102fc), range(0x10300, 0x10324), range(0x1032d, 0x1034b), range(0x10350, 0x1037b), range(0x10380, 0x1039e), range(0x1039f, 0x103c4), range(0x103c8, 0x103d6), range(0x10400, 0x1049e), range(0x104a0, 0x104aa), range(0x104b0, 0x104d4), range(0x104d8, 0x104fc), range(0x10500, 0x10528), range(0x10530, 0x10564), range(0x1056f, 0x10570), range(0x10600, 0x10737), range(0x10740, 0x10756), range(0x10760, 0x10768), range(0x10800, 0x10806), range(0x10808, 0x10809), range(0x1080a, 0x10836), range(0x10837, 0x10839), range(0x1083c, 0x1083d), range(0x1083f, 0x10856), range(0x10857, 0x1089f), range(0x108a7, 0x108b0), range(0x108e0, 0x108f3), range(0x108f4, 0x108f6), range(0x108fb, 0x1091c), range(0x1091f, 0x1093a), range(0x1093f, 0x10940), range(0x10980, 0x109b8), range(0x109bc, 0x109d0), range(0x109d2, 0x10a04), range(0x10a05, 0x10a07), range(0x10a0c, 0x10a14), range(0x10a15, 0x10a18), range(0x10a19, 0x10a36), range(0x10a38, 0x10a3b), range(0x10a3f, 0x10a49), range(0x10a50, 0x10a59), range(0x10a60, 0x10aa0), range(0x10ac0, 0x10ae7), range(0x10aeb, 0x10af7), range(0x10b00, 0x10b36), range(0x10b39, 0x10b56), range(0x10b58, 0x10b73), range(0x10b78, 0x10b92), range(0x10b99, 0x10b9d), range(0x10ba9, 0x10bb0), range(0x10c00, 0x10c49), range(0x10c80, 0x10cb3), range(0x10cc0, 0x10cf3), range(0x10cfa, 0x10d28), range(0x10d30, 0x10d3a), range(0x10e60, 0x10e7f), range(0x10e80, 0x10eaa), range(0x10eab, 0x10eae), range(0x10eb0, 0x10eb2), range(0x10f00, 0x10f28), range(0x10f30, 0x10f5a), range(0x10fb0, 0x10fcc), range(0x10fe0, 0x10ff7), range(0x11000, 0x1104e), range(0x11052, 0x11070), range(0x1107f, 0x110bd), range(0x110be, 0x110c2), range(0x110d0, 0x110e9), range(0x110f0, 0x110fa), range(0x11100, 0x11135), range(0x11136, 0x11148), range(0x11150, 0x11177), range(0x11180, 0x111e0), range(0x111e1, 0x111f5), range(0x11200, 0x11212), range(0x11213, 0x1123f), range(0x11280, 0x11287), range(0x11288, 0x11289), range(0x1128a, 0x1128e), range(0x1128f, 0x1129e), range(0x1129f, 0x112aa), range(0x112b0, 0x112eb), range(0x112f0, 0x112fa), range(0x11300, 0x11304), range(0x11305, 0x1130d), range(0x1130f, 0x11311), range(0x11313, 0x11329), range(0x1132a, 0x11331), range(0x11332, 0x11334), range(0x11335, 0x1133a), range(0x1133b, 0x11345), range(0x11347, 0x11349), range(0x1134b, 0x1134e), range(0x11350, 0x11351), range(0x11357, 0x11358), range(0x1135d, 0x11364), range(0x11366, 0x1136d), range(0x11370, 0x11375), range(0x11400, 0x1145c), range(0x1145d, 0x11462), range(0x11480, 0x114c8), range(0x114d0, 0x114da), range(0x11580, 0x115b6), range(0x115b8, 0x115de), range(0x11600, 0x11645), range(0x11650, 0x1165a), range(0x11660, 0x1166d), range(0x11680, 0x116b9), range(0x116c0, 0x116ca), range(0x11700, 0x1171b), range(0x1171d, 0x1172c), range(0x11730, 0x11740), range(0x11800, 0x1183c), range(0x118a0, 0x118f3), range(0x118ff, 0x11907), range(0x11909, 0x1190a), range(0x1190c, 0x11914), range(0x11915, 0x11917), range(0x11918, 0x11936), range(0x11937, 0x11939), range(0x1193b, 0x11947), range(0x11950, 0x1195a), range(0x119a0, 0x119a8), range(0x119aa, 0x119d8), range(0x119da, 0x119e5), range(0x11a00, 0x11a48), range(0x11a50, 0x11aa3), range(0x11ac0, 0x11af9), range(0x11c00, 0x11c09), range(0x11c0a, 0x11c37), range(0x11c38, 0x11c46), range(0x11c50, 0x11c6d), range(0x11c70, 0x11c90), range(0x11c92, 0x11ca8), range(0x11ca9, 0x11cb7), range(0x11d00, 0x11d07), range(0x11d08, 0x11d0a), range(0x11d0b, 0x11d37), range(0x11d3a, 0x11d3b), range(0x11d3c, 0x11d3e), range(0x11d3f, 0x11d48), range(0x11d50, 0x11d5a), range(0x11d60, 0x11d66), range(0x11d67, 0x11d69), range(0x11d6a, 0x11d8f), range(0x11d90, 0x11d92), range(0x11d93, 0x11d99), range(0x11da0, 0x11daa), range(0x11ee0, 0x11ef9), range(0x11fb0, 0x11fb1), range(0x11fc0, 0x11ff2), range(0x11fff, 0x1239a), range(0x12400, 0x1246f), range(0x12470, 0x12475), range(0x12480, 0x12544), range(0x13000, 0x1342f), range(0x14400, 0x14647), range(0x16800, 0x16a39), range(0x16a40, 0x16a5f), range(0x16a60, 0x16a6a), range(0x16a6e, 0x16a70), range(0x16ad0, 0x16aee), range(0x16af0, 0x16af6), range(0x16b00, 0x16b46), range(0x16b50, 0x16b5a), range(0x16b5b, 0x16b62), range(0x16b63, 0x16b78), range(0x16b7d, 0x16b90), range(0x16e40, 0x16e9b), range(0x16f00, 0x16f4b), range(0x16f4f, 0x16f88), range(0x16f8f, 0x16fa0), range(0x16fe0, 0x16fe5), range(0x16ff0, 0x16ff2), range(0x17000, 0x187f8), range(0x18800, 0x18cd6), range(0x18d00, 0x18d09), range(0x1b000, 0x1b11f), range(0x1b150, 0x1b153), range(0x1b164, 0x1b168), range(0x1b170, 0x1b2fc), range(0x1bc00, 0x1bc6b), range(0x1bc70, 0x1bc7d), range(0x1bc80, 0x1bc89), range(0x1bc90, 0x1bc9a), range(0x1bc9c, 0x1bca0), range(0x1d000, 0x1d0f6), range(0x1d100, 0x1d127), range(0x1d129, 0x1d173), range(0x1d17b, 0x1d1e9), range(0x1d200, 0x1d246), range(0x1d2e0, 0x1d2f4), range(0x1d300, 0x1d357), range(0x1d360, 0x1d379), range(0x1d400, 0x1d455), range(0x1d456, 0x1d49d), range(0x1d49e, 0x1d4a0), range(0x1d4a2, 0x1d4a3), range(0x1d4a5, 0x1d4a7), range(0x1d4a9, 0x1d4ad), range(0x1d4ae, 0x1d4ba), range(0x1d4bb, 0x1d4bc), range(0x1d4bd, 0x1d4c4), range(0x1d4c5, 0x1d506), range(0x1d507, 0x1d50b), range(0x1d50d, 0x1d515), range(0x1d516, 0x1d51d), range(0x1d51e, 0x1d53a), range(0x1d53b, 0x1d53f), range(0x1d540, 0x1d545), range(0x1d546, 0x1d547), range(0x1d54a, 0x1d551), range(0x1d552, 0x1d6a6), range(0x1d6a8, 0x1d7cc), range(0x1d7ce, 0x1da8c), range(0x1da9b, 0x1daa0), range(0x1daa1, 0x1dab0), range(0x1e000, 0x1e007), range(0x1e008, 0x1e019), range(0x1e01b, 0x1e022), range(0x1e023, 0x1e025), range(0x1e026, 0x1e02b), range(0x1e100, 0x1e12d), range(0x1e130, 0x1e13e), range(0x1e140, 0x1e14a), range(0x1e14e, 0x1e150), range(0x1e2c0, 0x1e2fa), range(0x1e2ff, 0x1e300), range(0x1e800, 0x1e8c5), range(0x1e8c7, 0x1e8d7), range(0x1e900, 0x1e94c), range(0x1e950, 0x1e95a), range(0x1e95e, 0x1e960), range(0x1ec71, 0x1ecb5), range(0x1ed01, 0x1ed3e), range(0x1ee00, 0x1ee04), range(0x1ee05, 0x1ee20), range(0x1ee21, 0x1ee23), range(0x1ee24, 0x1ee25), range(0x1ee27, 0x1ee28), range(0x1ee29, 0x1ee33), range(0x1ee34, 0x1ee38), range(0x1ee39, 0x1ee3a), range(0x1ee3b, 0x1ee3c), range(0x1ee42, 0x1ee43), range(0x1ee47, 0x1ee48), range(0x1ee49, 0x1ee4a), range(0x1ee4b, 0x1ee4c), range(0x1ee4d, 0x1ee50), range(0x1ee51, 0x1ee53), range(0x1ee54, 0x1ee55), range(0x1ee57, 0x1ee58), range(0x1ee59, 0x1ee5a), range(0x1ee5b, 0x1ee5c), range(0x1ee5d, 0x1ee5e), range(0x1ee5f, 0x1ee60), range(0x1ee61, 0x1ee63), range(0x1ee64, 0x1ee65), range(0x1ee67, 0x1ee6b), range(0x1ee6c, 0x1ee73), range(0x1ee74, 0x1ee78), range(0x1ee79, 0x1ee7d), range(0x1ee7e, 0x1ee7f), range(0x1ee80, 0x1ee8a), range(0x1ee8b, 0x1ee9c), range(0x1eea1, 0x1eea4), range(0x1eea5, 0x1eeaa), range(0x1eeab, 0x1eebc), range(0x1eef0, 0x1eef2), range(0x1f000, 0x1f02c), range(0x1f030, 0x1f094), range(0x1f0a0, 0x1f0af), range(0x1f0b1, 0x1f0c0), range(0x1f0c1, 0x1f0d0), range(0x1f0d1, 0x1f0f6), range(0x1f100, 0x1f1ae), range(0x1f1e6, 0x1f203), range(0x1f210, 0x1f23c), range(0x1f240, 0x1f249), range(0x1f250, 0x1f252), range(0x1f260, 0x1f266), range(0x1f300, 0x1f6d8), range(0x1f6e0, 0x1f6ed), range(0x1f6f0, 0x1f6fd), range(0x1f700, 0x1f774), range(0x1f780, 0x1f7d9), range(0x1f7e0, 0x1f7ec), range(0x1f800, 0x1f80c), range(0x1f810, 0x1f848), range(0x1f850, 0x1f85a), range(0x1f860, 0x1f888), range(0x1f890, 0x1f8ae), range(0x1f8b0, 0x1f8b2), range(0x1f900, 0x1f979), range(0x1f97a, 0x1f9cc), range(0x1f9cd, 0x1fa54), range(0x1fa60, 0x1fa6e), range(0x1fa70, 0x1fa75), range(0x1fa78, 0x1fa7b), range(0x1fa80, 0x1fa87), range(0x1fa90, 0x1faa9), range(0x1fab0, 0x1fab7), range(0x1fac0, 0x1fac3), range(0x1fad0, 0x1fad7), range(0x1fb00, 0x1fb93), range(0x1fb94, 0x1fbcb), range(0x1fbf0, 0x1fbfa), range(0x20000, 0x2a6de), range(0x2a700, 0x2b735), range(0x2b740, 0x2b81e), range(0x2b820, 0x2cea2), range(0x2ceb0, 0x2ebe1), range(0x2f800, 0x2fa1e), range(0x30000, 0x3134b), range(0xe0100, 0xe01f0)])),
        16: list(itertools.chain.from_iterable([range(0x20, 0x27), range(0x28, 0x3c), range(0x3d, 0x7f), range(0xa1, 0xad), range(0xae, 0x378), range(0x37a, 0x380), range(0x384, 0x38b), range(0x38c, 0x38d), range(0x38e, 0x3a2), range(0x3a3, 0x530), range(0x531, 0x557), range(0x559, 0x58b), range(0x58d, 0x590), range(0x591, 0x5c8), range(0x5d0, 0x5eb), range(0x5ef, 0x5f5), range(0x606, 0x61c), range(0x61e, 0x6dd), range(0x6de, 0x70e), range(0x710, 0x74b), range(0x74d, 0x7b2), range(0x7c0, 0x7fb), range(0x7fd, 0x82e), range(0x830, 0x83f), range(0x840, 0x85c), range(0x85e, 0x85f), range(0x860, 0x86b), range(0x8a0, 0x8b5), range(0x8b6, 0x8c8), range(0x8d3, 0x8e2), range(0x8e3, 0x984), range(0x985, 0x98d), range(0x98f, 0x991), range(0x993, 0x9a9), range(0x9aa, 0x9b1), range(0x9b2, 0x9b3), range(0x9b6, 0x9ba), range(0x9bc, 0x9c5), range(0x9c7, 0x9c9), range(0x9cb, 0x9cf), range(0x9d7, 0x9d8), range(0x9dc, 0x9de), range(0x9df, 0x9e4), range(0x9e6, 0x9ff), range(0xa01, 0xa04), range(0xa05, 0xa0b), range(0xa0f, 0xa11), range(0xa13, 0xa29), range(0xa2a, 0xa31), range(0xa32, 0xa34), range(0xa35, 0xa37), range(0xa38, 0xa3a), range(0xa3c, 0xa3d), range(0xa3e, 0xa43), range(0xa47, 0xa49), range(0xa4b, 0xa4e), range(0xa51, 0xa52), range(0xa59, 0xa5d), range(0xa5e, 0xa5f), range(0xa66, 0xa77), range(0xa81, 0xa84), range(0xa85, 0xa8e), range(0xa8f, 0xa92), range(0xa93, 0xaa9), range(0xaaa, 0xab1), range(0xab2, 0xab4), range(0xab5, 0xaba), range(0xabc, 0xac6), range(0xac7, 0xaca), range(0xacb, 0xace), range(0xad0, 0xad1), range(0xae0, 0xae4), range(0xae6, 0xaf2), range(0xaf9, 0xb00), range(0xb01, 0xb04), range(0xb05, 0xb0d), range(0xb0f, 0xb11), range(0xb13, 0xb29), range(0xb2a, 0xb31), range(0xb32, 0xb34), range(0xb35, 0xb3a), range(0xb3c, 0xb45), range(0xb47, 0xb49), range(0xb4b, 0xb4e), range(0xb55, 0xb58), range(0xb5c, 0xb5e), range(0xb5f, 0xb64), range(0xb66, 0xb78), range(0xb82, 0xb84), range(0xb85, 0xb8b), range(0xb8e, 0xb91), range(0xb92, 0xb96), range(0xb99, 0xb9b), range(0xb9c, 0xb9d), range(0xb9e, 0xba0), range(0xba3, 0xba5), range(0xba8, 0xbab), range(0xbae, 0xbba), range(0xbbe, 0xbc3), range(0xbc6, 0xbc9), range(0xbca, 0xbce), range(0xbd0, 0xbd1), range(0xbd7, 0xbd8), range(0xbe6, 0xbfb), range(0xc00, 0xc0d), range(0xc0e, 0xc11), range(0xc12, 0xc29), range(0xc2a, 0xc3a), range(0xc3d, 0xc45), range(0xc46, 0xc49), range(0xc4a, 0xc4e), range(0xc55, 0xc57), range(0xc58, 0xc5b), range(0xc60, 0xc64), range(0xc66, 0xc70), range(0xc77, 0xc8d), range(0xc8e, 0xc91), range(0xc92, 0xca9), range(0xcaa, 0xcb4), range(0xcb5, 0xcba), range(0xcbc, 0xcc5), range(0xcc6, 0xcc9), range(0xcca, 0xcce), range(0xcd5, 0xcd7), range(0xcde, 0xcdf), range(0xce0, 0xce4), range(0xce6, 0xcf0), range(0xcf1, 0xcf3), range(0xd00, 0xd0d), range(0xd0e, 0xd11), range(0xd12, 0xd45), range(0xd46, 0xd49), range(0xd4a, 0xd50), range(0xd54, 0xd64), range(0xd66, 0xd80), range(0xd81, 0xd84), range(0xd85, 0xd97), range(0xd9a, 0xdb2), range(0xdb3, 0xdbc), range(0xdbd, 0xdbe), range(0xdc0, 0xdc7), range(0xdca, 0xdcb), range(0xdcf, 0xdd5), range(0xdd6, 0xdd7), range(0xdd8, 0xde0), range(0xde6, 0xdf0), range(0xdf2, 0xdf5), range(0xe01, 0xe3b), range(0xe3f, 0xe5c), range(0xe81, 0xe83), range(0xe84, 0xe85), range(0xe86, 0xe8b), range(0xe8c, 0xea4), range(0xea5, 0xea6), range(0xea7, 0xebe), range(0xec0, 0xec5), range(0xec6, 0xec7), range(0xec8, 0xece), range(0xed0, 0xeda), range(0xedc, 0xee0), range(0xf00, 0xf48), range(0xf49, 0xf6d), range(0xf71, 0xf98), range(0xf99, 0xfbd), range(0xfbe, 0xfcd), range(0xfce, 0xfdb), range(0x1000, 0x10c6), range(0x10c7, 0x10c8), range(0x10cd, 0x10ce), range(0x10d0, 0x1249), range(0x124a, 0x124e), range(0x1250, 0x1257), range(0x1258, 0x1259), range(0x125a, 0x125e), range(0x1260, 0x1289), range(0x128a, 0x128e), range(0x1290, 0x12b1), range(0x12b2, 0x12b6), range(0x12b8, 0x12bf), range(0x12c0, 0x12c1), range(0x12c2, 0x12c6), range(0x12c8, 0x12d7), range(0x12d8, 0x1311), range(0x1312, 0x1316), range(0x1318, 0x135b), range(0x135d, 0x137d), range(0x1380, 0x139a), range(0x13a0, 0x13f6), range(0x13f8, 0x13fe), range(0x1400, 0x1680), range(0x1681, 0x169d), range(0x16a0, 0x16f9), range(0x1700, 0x170d), range(0x170e, 0x1715), range(0x1720, 0x1737), range(0x1740, 0x1754), range(0x1760, 0x176d), range(0x176e, 0x1771), range(0x1772, 0x1774), range(0x1780, 0x17de), range(0x17e0, 0x17ea), range(0x17f0, 0x17fa), range(0x1800, 0x180e), range(0x1810, 0x181a), range(0x1820, 0x1879), range(0x1880, 0x18ab), range(0x18b0, 0x18f6), range(0x1900, 0x191f), range(0x1920, 0x192c), range(0x1930, 0x193c), range(0x1940, 0x1941), range(0x1944, 0x196e), range(0x1970, 0x1975), range(0x1980, 0x19ac), range(0x19b0, 0x19ca), range(0x19d0, 0x19db), range(0x19de, 0x1a1c), range(0x1a1e, 0x1a5f), range(0x1a60, 0x1a7d), range(0x1a7f, 0x1a8a), range(0x1a90, 0x1a9a), range(0x1aa0, 0x1aae), range(0x1ab0, 0x1ac1), range(0x1b00, 0x1b4c), range(0x1b50, 0x1b7d), range(0x1b80, 0x1bf4), range(0x1bfc, 0x1c38), range(0x1c3b, 0x1c4a), range(0x1c4d, 0x1c89), range(0x1c90, 0x1cbb), range(0x1cbd, 0x1cc8), range(0x1cd0, 0x1cfb), range(0x1d00, 0x1dfa), range(0x1dfb, 0x1f16), range(0x1f18, 0x1f1e), range(0x1f20, 0x1f46), range(0x1f48, 0x1f4e), range(0x1f50, 0x1f58), range(0x1f59, 0x1f5a), range(0x1f5b, 0x1f5c), range(0x1f5d, 0x1f5e), range(0x1f5f, 0x1f7e), range(0x1f80, 0x1fb5), range(0x1fb6, 0x1fc5), range(0x1fc6, 0x1fd4), range(0x1fd6, 0x1fdc), range(0x1fdd, 0x1ff0), range(0x1ff2, 0x1ff5), range(0x1ff6, 0x1fff), range(0x2010, 0x2028), range(0x2030, 0x205f), range(0x2070, 0x2072), range(0x2074, 0x208f), range(0x2090, 0x209d), range(0x20a0, 0x20c0), range(0x20d0, 0x20f1), range(0x2100, 0x218c), range(0x2190, 0x2427), range(0x2440, 0x244b), range(0x2460, 0x2b74), range(0x2b76, 0x2b96), range(0x2b97, 0x2c2f), range(0x2c30, 0x2c5f), range(0x2c60, 0x2cf4), range(0x2cf9, 0x2d26), range(0x2d27, 0x2d28), range(0x2d2d, 0x2d2e), range(0x2d30, 0x2d68), range(0x2d6f, 0x2d71), range(0x2d7f, 0x2d97), range(0x2da0, 0x2da7), range(0x2da8, 0x2daf), range(0x2db0, 0x2db7), range(0x2db8, 0x2dbf), range(0x2dc0, 0x2dc7), range(0x2dc8, 0x2dcf), range(0x2dd0, 0x2dd7), range(0x2dd8, 0x2ddf), range(0x2de0, 0x2e53), range(0x2e80, 0x2e9a), range(0x2e9b, 0x2ef4), range(0x2f00, 0x2fd6), range(0x2ff0, 0x2ffc), range(0x3001, 0x3040), range(0x3041, 0x3097), range(0x3099, 0x3100), range(0x3105, 0x3130), range(0x3131, 0x318f), range(0x3190, 0x31e4), range(0x31f0, 0x321f), range(0x3220, 0x9ffd), range(0xa000, 0xa48d), range(0xa490, 0xa4c7), range(0xa4d0, 0xa62c), range(0xa640, 0xa6f8), range(0xa700, 0xa7c0), range(0xa7c2, 0xa7cb), range(0xa7f5, 0xa82d), range(0xa830, 0xa83a), range(0xa840, 0xa878), range(0xa880, 0xa8c6), range(0xa8ce, 0xa8da), range(0xa8e0, 0xa954), range(0xa95f, 0xa97d), range(0xa980, 0xa9ce), range(0xa9cf, 0xa9da), range(0xa9de, 0xa9ff), range(0xaa00, 0xaa37), range(0xaa40, 0xaa4e), range(0xaa50, 0xaa5a), range(0xaa5c, 0xaac3), range(0xaadb, 0xaaf7), range(0xab01, 0xab07), range(0xab09, 0xab0f), range(0xab11, 0xab17), range(0xab20, 0xab27), range(0xab28, 0xab2f), range(0xab30, 0xab6c), range(0xab70, 0xabee), range(0xabf0, 0xabfa), range(0xac00, 0xd7a4), range(0xd7b0, 0xd7c7), range(0xd7cb, 0xd7fc), range(0xf900, 0xfa6e), range(0xfa70, 0xfada), range(0xfb00, 0xfb07), range(0xfb13, 0xfb18), range(0xfb1d, 0xfb37), range(0xfb38, 0xfb3d), range(0xfb3e, 0xfb3f), range(0xfb40, 0xfb42), range(0xfb43, 0xfb45), range(0xfb46, 0xfbc2), range(0xfbd3, 0xfd40), range(0xfd50, 0xfd90), range(0xfd92, 0xfdc8), range(0xfdf0, 0xfdfe), range(0xfe00, 0xfe1a), range(0xfe20, 0xfe53), range(0xfe54, 0xfe67), range(0xfe68, 0xfe6c), range(0xfe70, 0xfe75), range(0xfe76, 0xfefd), range(0xff01, 0xffbf), range(0xffc2, 0xffc8), range(0xffca, 0xffd0), range(0xffd2, 0xffd8), range(0xffda, 0xffdd), range(0xffe0, 0xffe7), range(0xffe8, 0xffef), range(0xfffc, 0xfffe), range(0x10000, 0x1000c), range(0x1000d, 0x10027), range(0x10028, 0x1003b), range(0x1003c, 0x1003e), range(0x1003f, 0x1004e), range(0x10050, 0x1005e), range(0x10080, 0x100fb), range(0x10100, 0x10103), range(0x10107, 0x10134), range(0x10137, 0x1018f), range(0x10190, 0x1019d), range(0x101a0, 0x101a1), range(0x101d0, 0x101fe), range(0x10280, 0x1029d), range(0x102a0, 0x102d1), range(0x102e0, 0x102fc), range(0x10300, 0x10324), range(0x1032d, 0x1034b), range(0x10350, 0x1037b), range(0x10380, 0x1039e), range(0x1039f, 0x103c4), range(0x103c8, 0x103d6), range(0x10400, 0x1049e), range(0x104a0, 0x104aa), range(0x104b0, 0x104d4), range(0x104d8, 0x104fc), range(0x10500, 0x10528), range(0x10530, 0x10564), range(0x1056f, 0x10570), range(0x10600, 0x10737), range(0x10740, 0x10756), range(0x10760, 0x10768), range(0x10800, 0x10806), range(0x10808, 0x10809), range(0x1080a, 0x10836), range(0x10837, 0x10839), range(0x1083c, 0x1083d), range(0x1083f, 0x10856), range(0x10857, 0x1089f), range(0x108a7, 0x108b0), range(0x108e0, 0x108f3), range(0x108f4, 0x108f6), range(0x108fb, 0x1091c), range(0x1091f, 0x1093a), range(0x1093f, 0x10940), range(0x10980, 0x109b8), range(0x109bc, 0x109d0), range(0x109d2, 0x10a04), range(0x10a05, 0x10a07), range(0x10a0c, 0x10a14), range(0x10a15, 0x10a18), range(0x10a19, 0x10a36), range(0x10a38, 0x10a3b), range(0x10a3f, 0x10a49), range(0x10a50, 0x10a59), range(0x10a60, 0x10aa0), range(0x10ac0, 0x10ae7), range(0x10aeb, 0x10af7), range(0x10b00, 0x10b36), range(0x10b39, 0x10b56), range(0x10b58, 0x10b73), range(0x10b78, 0x10b92), range(0x10b99, 0x10b9d), range(0x10ba9, 0x10bb0), range(0x10c00, 0x10c49), range(0x10c80, 0x10cb3), range(0x10cc0, 0x10cf3), range(0x10cfa, 0x10d28), range(0x10d30, 0x10d3a), range(0x10e60, 0x10e7f), range(0x10e80, 0x10eaa), range(0x10eab, 0x10eae), range(0x10eb0, 0x10eb2), range(0x10f00, 0x10f28), range(0x10f30, 0x10f5a), range(0x10fb0, 0x10fcc), range(0x10fe0, 0x10ff7), range(0x11000, 0x1104e), range(0x11052, 0x11070), range(0x1107f, 0x110bd), range(0x110be, 0x110c2), range(0x110d0, 0x110e9), range(0x110f0, 0x110fa), range(0x11100, 0x11135), range(0x11136, 0x11148), range(0x11150, 0x11177), range(0x11180, 0x111e0), range(0x111e1, 0x111f5), range(0x11200, 0x11212), range(0x11213, 0x1123f), range(0x11280, 0x11287), range(0x11288, 0x11289), range(0x1128a, 0x1128e), range(0x1128f, 0x1129e), range(0x1129f, 0x112aa), range(0x112b0, 0x112eb), range(0x112f0, 0x112fa), range(0x11300, 0x11304), range(0x11305, 0x1130d), range(0x1130f, 0x11311), range(0x11313, 0x11329), range(0x1132a, 0x11331), range(0x11332, 0x11334), range(0x11335, 0x1133a), range(0x1133b, 0x11345), range(0x11347, 0x11349), range(0x1134b, 0x1134e), range(0x11350, 0x11351), range(0x11357, 0x11358), range(0x1135d, 0x11364), range(0x11366, 0x1136d), range(0x11370, 0x11375), range(0x11400, 0x1145c), range(0x1145d, 0x11462), range(0x11480, 0x114c8), range(0x114d0, 0x114da), range(0x11580, 0x115b6), range(0x115b8, 0x115de), range(0x11600, 0x11645), range(0x11650, 0x1165a), range(0x11660, 0x1166d), range(0x11680, 0x116b9), range(0x116c0, 0x116ca), range(0x11700, 0x1171b), range(0x1171d, 0x1172c), range(0x11730, 0x11740), range(0x11800, 0x1183c), range(0x118a0, 0x118f3), range(0x118ff, 0x11907), range(0x11909, 0x1190a), range(0x1190c, 0x11914), range(0x11915, 0x11917), range(0x11918, 0x11936), range(0x11937, 0x11939), range(0x1193b, 0x11947), range(0x11950, 0x1195a), range(0x119a0, 0x119a8), range(0x119aa, 0x119d8), range(0x119da, 0x119e5), range(0x11a00, 0x11a48), range(0x11a50, 0x11aa3), range(0x11ac0, 0x11af9), range(0x11c00, 0x11c09), range(0x11c0a, 0x11c37), range(0x11c38, 0x11c46), range(0x11c50, 0x11c6d), range(0x11c70, 0x11c90), range(0x11c92, 0x11ca8), range(0x11ca9, 0x11cb7), range(0x11d00, 0x11d07), range(0x11d08, 0x11d0a), range(0x11d0b, 0x11d37), range(0x11d3a, 0x11d3b), range(0x11d3c, 0x11d3e), range(0x11d3f, 0x11d48), range(0x11d50, 0x11d5a), range(0x11d60, 0x11d66), range(0x11d67, 0x11d69), range(0x11d6a, 0x11d8f), range(0x11d90, 0x11d92), range(0x11d93, 0x11d99), range(0x11da0, 0x11daa), range(0x11ee0, 0x11ef9), range(0x11fb0, 0x11fb1), range(0x11fc0, 0x11ff2), range(0x11fff, 0x1239a), range(0x12400, 0x1246f), range(0x12470, 0x12475), range(0x12480, 0x12544), range(0x13000, 0x1342f), range(0x14400, 0x14647), range(0x16800, 0x16a39), range(0x16a40, 0x16a5f), range(0x16a60, 0x16a6a), range(0x16a6e, 0x16a70), range(0x16ad0, 0x16aee), range(0x16af0, 0x16af6), range(0x16b00, 0x16b46), range(0x16b50, 0x16b5a), range(0x16b5b, 0x16b62), range(0x16b63, 0x16b78), range(0x16b7d, 0x16b90), range(0x16e40, 0x16e9b), range(0x16f00, 0x16f4b), range(0x16f4f, 0x16f88), range(0x16f8f, 0x16fa0), range(0x16fe0, 0x16fe5), range(0x16ff0, 0x16ff2), range(0x17000, 0x187f8), range(0x18800, 0x18cd6), range(0x18d00, 0x18d09), range(0x1b000, 0x1b11f), range(0x1b150, 0x1b153), range(0x1b164, 0x1b168), range(0x1b170, 0x1b2fc), range(0x1bc00, 0x1bc6b), range(0x1bc70, 0x1bc7d), range(0x1bc80, 0x1bc89), range(0x1bc90, 0x1bc9a), range(0x1bc9c, 0x1bca0), range(0x1d000, 0x1d0f6), range(0x1d100, 0x1d127), range(0x1d129, 0x1d173), range(0x1d17b, 0x1d1e9), range(0x1d200, 0x1d246), range(0x1d2e0, 0x1d2f4), range(0x1d300, 0x1d357), range(0x1d360, 0x1d379), range(0x1d400, 0x1d455), range(0x1d456, 0x1d49d), range(0x1d49e, 0x1d4a0), range(0x1d4a2, 0x1d4a3), range(0x1d4a5, 0x1d4a7), range(0x1d4a9, 0x1d4ad), range(0x1d4ae, 0x1d4ba), range(0x1d4bb, 0x1d4bc), range(0x1d4bd, 0x1d4c4), range(0x1d4c5, 0x1d506), range(0x1d507, 0x1d50b), range(0x1d50d, 0x1d515), range(0x1d516, 0x1d51d), range(0x1d51e, 0x1d53a), range(0x1d53b, 0x1d53f), range(0x1d540, 0x1d545), range(0x1d546, 0x1d547), range(0x1d54a, 0x1d551), range(0x1d552, 0x1d6a6), range(0x1d6a8, 0x1d7cc), range(0x1d7ce, 0x1da8c), range(0x1da9b, 0x1daa0), range(0x1daa1, 0x1dab0), range(0x1e000, 0x1e007), range(0x1e008, 0x1e019), range(0x1e01b, 0x1e022), range(0x1e023, 0x1e025), range(0x1e026, 0x1e02b), range(0x1e100, 0x1e12d), range(0x1e130, 0x1e13e), range(0x1e140, 0x1e14a), range(0x1e14e, 0x1e150), range(0x1e2c0, 0x1e2fa), range(0x1e2ff, 0x1e300), range(0x1e800, 0x1e8c5), range(0x1e8c7, 0x1e8d7), range(0x1e900, 0x1e94c), range(0x1e950, 0x1e95a), range(0x1e95e, 0x1e960), range(0x1ec71, 0x1ecb5), range(0x1ed01, 0x1ed3e), range(0x1ee00, 0x1ee04), range(0x1ee05, 0x1ee20), range(0x1ee21, 0x1ee23), range(0x1ee24, 0x1ee25), range(0x1ee27, 0x1ee28), range(0x1ee29, 0x1ee33), range(0x1ee34, 0x1ee38), range(0x1ee39, 0x1ee3a), range(0x1ee3b, 0x1ee3c), range(0x1ee42, 0x1ee43), range(0x1ee47, 0x1ee48), range(0x1ee49, 0x1ee4a), range(0x1ee4b, 0x1ee4c), range(0x1ee4d, 0x1ee50), range(0x1ee51, 0x1ee53), range(0x1ee54, 0x1ee55), range(0x1ee57, 0x1ee58), range(0x1ee59, 0x1ee5a), range(0x1ee5b, 0x1ee5c), range(0x1ee5d, 0x1ee5e), range(0x1ee5f, 0x1ee60), range(0x1ee61, 0x1ee63), range(0x1ee64, 0x1ee65), range(0x1ee67, 0x1ee6b), range(0x1ee6c, 0x1ee73), range(0x1ee74, 0x1ee78), range(0x1ee79, 0x1ee7d), range(0x1ee7e, 0x1ee7f), range(0x1ee80, 0x1ee8a), range(0x1ee8b, 0x1ee9c), range(0x1eea1, 0x1eea4), range(0x1eea5, 0x1eeaa), range(0x1eeab, 0x1eebc), range(0x1eef0, 0x1eef2), range(0x1f000, 0x1f02c), range(0x1f030, 0x1f094), range(0x1f0a0, 0x1f0af), range(0x1f0b1, 0x1f0c0), range(0x1f0c1, 0x1f0d0), range(0x1f0d1, 0x1f0f6), range(0x1f100, 0x1f1ae), range(0x1f1e6, 0x1f203), range(0x1f210, 0x1f23c), range(0x1f240, 0x1f249), range(0x1f250, 0x1f252), range(0x1f260, 0x1f266), range(0x1f300, 0x1f6d8), range(0x1f6e0, 0x1f6ed), range(0x1f6f0, 0x1f6fd), range(0x1f700, 0x1f774), range(0x1f780, 0x1f7d9), range(0x1f7e0, 0x1f7ec), range(0x1f800, 0x1f80c), range(0x1f810, 0x1f848), range(0x1f850, 0x1f85a), range(0x1f860, 0x1f888), range(0x1f890, 0x1f8ae), range(0x1f8b0, 0x1f8b2), range(0x1f900, 0x1f979), range(0x1f97a, 0x1f9cc), range(0x1f9cd, 0x1fa54), range(0x1fa60, 0x1fa6e), range(0x1fa70, 0x1fa75), range(0x1fa78, 0x1fa7b), range(0x1fa80, 0x1fa87), range(0x1fa90, 0x1faa9), range(0x1fab0, 0x1fab7), range(0x1fac0, 0x1fac3), range(0x1fad0, 0x1fad7), range(0x1fb00, 0x1fb93), range(0x1fb94, 0x1fbcb), range(0x1fbf0, 0x1fbfa), range(0x20000, 0x2a6de), range(0x2a700, 0x2b735), range(0x2b740, 0x2b81e), range(0x2b820, 0x2cea2), range(0x2ceb0, 0x2ebe1), range(0x2f800, 0x2fa1e), range(0x30000, 0x3134b), range(0xe0100, 0xe01f0)])),
    }

# Generated by Grammarinator 23.7.post52+g76afb2f

from math import inf
from grammarinator.runtime import *


from copy import deepcopy


def html_space_serializer(root):

    def _walk(node):
        nonlocal src

        if isinstance(node, UnlexerRule):
            src += node.src
        else:
            for child in node.children:
                _walk(child)

        if (isinstance(node, UnparserRule) and
            node.name == 'htmlTagName' and node.right_sibling and node.right_sibling.name == 'htmlAttribute' or node.name == 'htmlAttribute') \
                or isinstance(node, UnlexerRule) and node.src.endswith(('<script', '<style', '<?xml')):
            src += ' '

    src = ''
    _walk(root)
    return src


class HTMLGenerator(Generator):

    def _style_sheet(self):
        return ''


    def _endOfHtmlElement(self):
        pass

    def EOF(self, parent=None):
        return None

    def HTML_COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_COMMENT', parent) as current:
            current.src += '<!--'
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '-->'
            return current

    def HTML_CONDITIONAL_COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_CONDITIONAL_COMMENT', parent) as current:
            current.src += '<!['
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += ']>'
            return current

    def XML_DECLARATION(self, parent=None):
        with UnlexerRuleContext(self, 'XML_DECLARATION', parent) as current:
            current.src += '<?xml'
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '>'
            return current

    def CDATA(self, parent=None):
        with UnlexerRuleContext(self, 'CDATA', parent) as current:
            current.src += '<![CDATA['
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += ']]>'
            return current

    def DTD(self, parent=None):
        with UnlexerRuleContext(self, 'DTD', parent) as current:
            current.src += '<!'
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '>'
            return current

    def SCRIPTLET(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPTLET', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[0], 0, HTMLGenerator._alt_conds[0]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += '<?'
                    with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                        while quant0(current):
                            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
                    current.src += '?>'
                elif choice0 == 1:
                    current.src += '<%'
                    with QuantifierContext(self, 1, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant1:
                        while quant1(current):
                            current.src += self._model.charset(current, 1, HTMLGenerator._charsets[0])
                    current.src += '%>'
            return current

    def SEA_WS(self, parent=None):
        with UnlexerRuleContext(self, 'SEA_WS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, HTMLGenerator._alt_sizes[1], 0, HTMLGenerator._alt_conds[1]) as alt0:
                        choice0 = alt0(current)
                        if choice0 == 0:
                            current.src += ' '
                        elif choice0 == 1:
                            current.src += '\t'
                        elif choice0 == 2:
                            with QuantifierContext(self, 1, 0, 1, HTMLGenerator._quant_sizes[0], 0) as quant1:
                                while quant1(current):
                                    current.src += '\r'
                            current.src += '\n'
            return current

    def SCRIPT_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_OPEN', parent) as current:
            current.src += '<script'
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '>'
            return current

    def STYLE_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_OPEN', parent) as current:
            current.src += '<style'
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '>'
            return current

    def TAG_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_OPEN', parent) as current:
            current.src += '<'
            return current

    def HTML_TEXT(self, parent=None):
        with UnlexerRuleContext(self, 'HTML_TEXT', parent) as current:
            with QuantifierContext(self, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[1])
            return current

    def TAG_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_CLOSE', parent) as current:
            current.src += '>'
            return current

    def TAG_SLASH_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_SLASH_CLOSE', parent) as current:
            current.src += '/>'
            return current

    def TAG_SLASH(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_SLASH', parent) as current:
            current.src += '/'
            return current

    def TAG_EQUALS(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_EQUALS', parent) as current:
            current.src += '='
            return current

    def TAG_NAME(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NAME', parent) as current:
            self.TAG_NameStartChar(parent=current)
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0(current):
                    self.TAG_NameChar(parent=current)
            return current

    def TAG_WHITESPACE(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_WHITESPACE', parent) as current:
            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[2])
            return current

    def HEXDIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'HEXDIGIT', parent) as current:
            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[3])
            return current

    def DIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'DIGIT', parent) as current:
            current.src += self._model.charset(current, 0, HTMLGenerator._charsets[4])
            return current

    def TAG_NameChar(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NameChar', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[2], 0, HTMLGenerator._alt_conds[2]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    self.TAG_NameStartChar(parent=current)
                elif choice0 == 1:
                    current.src += '-'
                elif choice0 == 2:
                    current.src += '_'
                elif choice0 == 3:
                    current.src += '.'
                elif choice0 == 4:
                    self.DIGIT(parent=current)
                elif choice0 == 5:
                    current.src += '\xb7'
                elif choice0 == 6:
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[5])
                elif choice0 == 7:
                    current.src += self._model.charset(current, 1, HTMLGenerator._charsets[6])
            return current

    def TAG_NameStartChar(self, parent=None):
        with UnlexerRuleContext(self, 'TAG_NameStartChar', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[3], 0, HTMLGenerator._alt_conds[3]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[7])
                elif choice0 == 1:
                    current.src += self._model.charset(current, 1, HTMLGenerator._charsets[8])
                elif choice0 == 2:
                    current.src += self._model.charset(current, 2, HTMLGenerator._charsets[9])
                elif choice0 == 3:
                    current.src += self._model.charset(current, 3, HTMLGenerator._charsets[10])
                elif choice0 == 4:
                    current.src += self._model.charset(current, 4, HTMLGenerator._charsets[11])
                elif choice0 == 5:
                    current.src += self._model.charset(current, 5, HTMLGenerator._charsets[12])
            return current

    def SCRIPT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_BODY', parent) as current:
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '</script>'
            return current

    def SCRIPT_SHORT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT_SHORT_BODY', parent) as current:
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[0])
            current.src += '</>'
            return current

    def STYLE_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_BODY', parent) as current:
            current.src += self._style_sheet()
            current.src += '</style>'
            return current

    def STYLE_SHORT_BODY(self, parent=None):
        with UnlexerRuleContext(self, 'STYLE_SHORT_BODY', parent) as current:
            current.src += self._style_sheet()
            current.src += '</>'
            return current

    def ATTVALUE_VALUE(self, parent=None):
        with UnlexerRuleContext(self, 'ATTVALUE_VALUE', parent) as current:
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 2) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[13])
            self.ATTRIBUTE(parent=current)
            return current

    def ATTRIBUTE(self, parent=None):
        with UnlexerRuleContext(self, 'ATTRIBUTE', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[4], 0, HTMLGenerator._alt_conds[4]) as alt0:
                [self.DOUBLE_QUOTE_STRING, self.SINGLE_QUOTE_STRING, self.ATTCHARS, self.HEXCHARS, self.DECCHARS][alt0(current)](parent=current)
            return current

    def ATTCHAR(self, parent=None):
        with UnlexerRuleContext(self, 'ATTCHAR', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[5], 0, HTMLGenerator._alt_conds[5]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    current.src += '-'
                elif choice0 == 1:
                    current.src += '_'
                elif choice0 == 2:
                    current.src += '.'
                elif choice0 == 3:
                    current.src += '/'
                elif choice0 == 4:
                    current.src += '+'
                elif choice0 == 5:
                    current.src += ','
                elif choice0 == 6:
                    current.src += '?'
                elif choice0 == 7:
                    current.src += '='
                elif choice0 == 8:
                    current.src += ':'
                elif choice0 == 9:
                    current.src += ';'
                elif choice0 == 10:
                    current.src += '#'
                elif choice0 == 11:
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[14])
            return current

    def ATTCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'ATTCHARS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, HTMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0(current):
                    self.ATTCHAR(parent=current)
            with QuantifierContext(self, 1, 0, 1, HTMLGenerator._quant_sizes[0], 0) as quant1:
                while quant1(current):
                    current.src += ' '
            return current

    def HEXCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'HEXCHARS', parent) as current:
            current.src += '#'
            with QuantifierContext(self, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[3])
            return current

    def DECCHARS(self, parent=None):
        with UnlexerRuleContext(self, 'DECCHARS', parent) as current:
            with QuantifierContext(self, 0, 1, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[4])
            with QuantifierContext(self, 1, 0, 1, HTMLGenerator._quant_sizes[0], 0) as quant1:
                while quant1(current):
                    current.src += '%'
            return current

    def DOUBLE_QUOTE_STRING(self, parent=None):
        with UnlexerRuleContext(self, 'DOUBLE_QUOTE_STRING', parent) as current:
            current.src += '"'
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[15])
            current.src += '"'
            return current

    def SINGLE_QUOTE_STRING(self, parent=None):
        with UnlexerRuleContext(self, 'SINGLE_QUOTE_STRING', parent) as current:
            current.src += '\''
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0(current):
                    current.src += self._model.charset(current, 0, HTMLGenerator._charsets[16])
            current.src += '\''
            return current

    def htmlDocument(self, parent=None):
        with UnparserRuleContext(self, 'htmlDocument', parent) as current:
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0(current):
                    with AlternationContext(self, 0, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt0:
                        [self.scriptlet, self.SEA_WS][alt0(current)](parent=current)
            with QuantifierContext(self, 1, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant1:
                while quant1(current):
                    self.xml(parent=current)
            with QuantifierContext(self, 2, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant2:
                while quant2(current):
                    with AlternationContext(self, 1, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt1:
                        [self.scriptlet, self.SEA_WS][alt1(current)](parent=current)
            with QuantifierContext(self, 3, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant3:
                while quant3(current):
                    self.dtd(parent=current)
            with QuantifierContext(self, 4, 0, inf, HTMLGenerator._quant_sizes[1], 0) as quant4:
                while quant4(current):
                    with AlternationContext(self, 2, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt2:
                        [self.scriptlet, self.SEA_WS][alt2(current)](parent=current)
            with QuantifierContext(self, 5, 0, inf, HTMLGenerator._quant_sizes[3], 0) as quant5:
                while quant5(current):
                    self.htmlElements(parent=current)
            return current

    def htmlElements(self, parent=None):
        with UnparserRuleContext(self, 'htmlElements', parent) as current:
            with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[2], 1) as quant0:
                while quant0(current):
                    self.htmlMisc(parent=current)
            self.htmlElement(parent=current)
            with QuantifierContext(self, 1, 0, inf, HTMLGenerator._quant_sizes[2], 0) as quant1:
                while quant1(current):
                    self.htmlMisc(parent=current)
            return current

    def htmlElement(self, parent=None):
        local_ctx = {'open_tag': None}
        with UnparserRuleContext(self, 'htmlElement', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[7], 0, HTMLGenerator._alt_conds[3]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    self._reserve(8, self.TAG_OPEN, parent=current)
                    self._reserve(6, self.htmlTagName, parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(self, 0, 0, inf, HTMLGenerator._quant_sizes[4], 6) as quant0:
                        while quant0(current):
                            self.htmlAttribute(parent=current)
                    self._reserve(5, self.TAG_CLOSE, parent=current)
                    self._reserve(5, self.htmlContent, parent=current)
                    self._reserve(4, self.TAG_OPEN, parent=current)
                    self._reserve(3, self.TAG_SLASH, parent=current)
                    self._reserve(1, self.htmlTagName, parent=current)
                    current.last_child.replace(deepcopy(local_ctx['open_tag']))
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 1:
                    self._reserve(3, self.TAG_OPEN, parent=current)
                    self._reserve(1, self.htmlTagName, parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(self, 1, 0, inf, HTMLGenerator._quant_sizes[4], 1) as quant1:
                        while quant1(current):
                            self.htmlAttribute(parent=current)
                    self.TAG_SLASH_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 2:
                    self._reserve(3, self.TAG_OPEN, parent=current)
                    self._reserve(1, self.htmlTagName, parent=current)
                    local_ctx['open_tag'] = current.last_child
                    with QuantifierContext(self, 2, 0, inf, HTMLGenerator._quant_sizes[4], 1) as quant2:
                        while quant2(current):
                            self.htmlAttribute(parent=current)
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 3:
                    self.scriptlet(parent=current)
                elif choice0 == 4:
                    self.script(parent=current)
                elif choice0 == 5:
                    self.style(parent=current)
            return current

    def htmlContent(self, parent=None):
        with UnparserRuleContext(self, 'htmlContent', parent) as current:
            with QuantifierContext(self, 0, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant0:
                while quant0(current):
                    self.htmlChardata(parent=current)
            with QuantifierContext(self, 1, 0, inf, HTMLGenerator._quant_sizes[2], 0) as quant1:
                while quant1(current):
                    with AlternationContext(self, 0, HTMLGenerator._alt_sizes[8], 0, HTMLGenerator._alt_conds[1]) as alt0:
                        [self.htmlElement, self.xhtmlCDATA, self.htmlComment][alt0(current)](parent=current)
                    with QuantifierContext(self, 2, 0, 1, HTMLGenerator._quant_sizes[2], 0) as quant2:
                        while quant2(current):
                            self.htmlChardata(parent=current)
            return current

    def htmlAttribute(self, parent=None):
        local_ctx = {'attr_name': None}
        with UnparserRuleContext(self, 'htmlAttribute', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[9], 0, HTMLGenerator._alt_conds[0]) as alt0:
                choice0 = alt0(current)
                if choice0 == 0:
                    self._reserve(4, self.htmlAttributeName, parent=current)
                    local_ctx['attr_name'] = current.last_child
                    self._reserve(3, self.TAG_EQUALS, parent=current)
                    self.htmlAttributeValue(parent=current)
                elif choice0 == 1:
                    self.htmlAttributeName(parent=current)
                    local_ctx['attr_name'] = current.last_child
            return current

    def htmlAttributeName(self, parent=None):
        with UnparserRuleContext(self, 'htmlAttributeName', parent) as current:
            self.TAG_NAME(parent=current)
            return current

    def htmlAttributeValue(self, parent=None):
        with UnparserRuleContext(self, 'htmlAttributeValue', parent) as current:
            self.ATTVALUE_VALUE(parent=current)
            return current

    def htmlTagName(self, parent=None):
        with UnparserRuleContext(self, 'htmlTagName', parent) as current:
            self.TAG_NAME(parent=current)
            return current

    def htmlChardata(self, parent=None):
        with UnparserRuleContext(self, 'htmlChardata', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                [self.HTML_TEXT, self.SEA_WS][alt0(current)](parent=current)
            return current

    def htmlMisc(self, parent=None):
        with UnparserRuleContext(self, 'htmlMisc', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[6], 0, HTMLGenerator._alt_conds[0]) as alt0:
                [self.htmlComment, self.SEA_WS][alt0(current)](parent=current)
            return current

    def htmlComment(self, parent=None):
        with UnparserRuleContext(self, 'htmlComment', parent) as current:
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                [self.HTML_COMMENT, self.HTML_CONDITIONAL_COMMENT][alt0(current)](parent=current)
            return current

    def xhtmlCDATA(self, parent=None):
        with UnparserRuleContext(self, 'xhtmlCDATA', parent) as current:
            self.CDATA(parent=current)
            return current

    def dtd(self, parent=None):
        with UnparserRuleContext(self, 'dtd', parent) as current:
            self.DTD(parent=current)
            return current

    def xml(self, parent=None):
        with UnparserRuleContext(self, 'xml', parent) as current:
            self.XML_DECLARATION(parent=current)
            return current

    def scriptlet(self, parent=None):
        with UnparserRuleContext(self, 'scriptlet', parent) as current:
            self.SCRIPTLET(parent=current)
            return current

    def script(self, parent=None):
        with UnparserRuleContext(self, 'script', parent) as current:
            self._reserve(1, self.SCRIPT_OPEN, parent=current)
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                [self.SCRIPT_BODY, self.SCRIPT_SHORT_BODY][alt0(current)](parent=current)
            return current

    def style(self, parent=None):
        with UnparserRuleContext(self, 'style', parent) as current:
            self._reserve(1, self.STYLE_OPEN, parent=current)
            with AlternationContext(self, 0, HTMLGenerator._alt_sizes[10], 0, HTMLGenerator._alt_conds[0]) as alt0:
                [self.STYLE_BODY, self.STYLE_SHORT_BODY][alt0(current)](parent=current)
            return current

    _default_rule = htmlDocument

    _immutable_rules = ('EOF', 'TAG_CLOSE', 'TAG_EQUALS', 'TAG_OPEN', 'TAG_SLASH', 'TAG_SLASH_CLOSE')

    _rule_sizes = {
        'EOF': RuleSize(0, 0),
        'HTML_COMMENT': RuleSize(0, 0),
        'HTML_CONDITIONAL_COMMENT': RuleSize(0, 0),
        'XML_DECLARATION': RuleSize(0, 0),
        'CDATA': RuleSize(0, 0),
        'DTD': RuleSize(0, 0),
        'SCRIPTLET': RuleSize(0, 0),
        'SEA_WS': RuleSize(0, 0),
        'SCRIPT_OPEN': RuleSize(0, 0),
        'STYLE_OPEN': RuleSize(0, 0),
        'TAG_OPEN': RuleSize(0, 0),
        'HTML_TEXT': RuleSize(0, 0),
        'TAG_CLOSE': RuleSize(0, 0),
        'TAG_SLASH_CLOSE': RuleSize(0, 0),
        'TAG_SLASH': RuleSize(0, 0),
        'TAG_EQUALS': RuleSize(0, 0),
        'TAG_NAME': RuleSize(1, 1),
        'TAG_WHITESPACE': RuleSize(0, 0),
        'HEXDIGIT': RuleSize(0, 0),
        'DIGIT': RuleSize(0, 0),
        'TAG_NameChar': RuleSize(0, 0),
        'TAG_NameStartChar': RuleSize(0, 0),
        'SCRIPT_BODY': RuleSize(0, 0),
        'SCRIPT_SHORT_BODY': RuleSize(0, 0),
        'STYLE_BODY': RuleSize(0, 0),
        'STYLE_SHORT_BODY': RuleSize(0, 0),
        'ATTVALUE_VALUE': RuleSize(2, 2),
        'ATTRIBUTE': RuleSize(1, 1),
        'ATTCHAR': RuleSize(0, 0),
        'ATTCHARS': RuleSize(1, 1),
        'HEXCHARS': RuleSize(0, 0),
        'DECCHARS': RuleSize(0, 0),
        'DOUBLE_QUOTE_STRING': RuleSize(0, 0),
        'SINGLE_QUOTE_STRING': RuleSize(0, 0),
        'htmlDocument': RuleSize(0, 0),
        'htmlElements': RuleSize(3, 1),
        'htmlElement': RuleSize(2, 1),
        'htmlContent': RuleSize(0, 0),
        'htmlAttribute': RuleSize(3, 2),
        'htmlAttributeName': RuleSize(2, 2),
        'htmlAttributeValue': RuleSize(3, 3),
        'htmlTagName': RuleSize(2, 2),
        'htmlChardata': RuleSize(1, 1),
        'htmlMisc': RuleSize(1, 1),
        'htmlComment': RuleSize(1, 1),
        'xhtmlCDATA': RuleSize(1, 1),
        'dtd': RuleSize(1, 1),
        'xml': RuleSize(1, 1),
        'scriptlet': RuleSize(1, 1),
        'script': RuleSize(1, 2),
        'style': RuleSize(1, 2),
    }

    _alt_sizes = (
        (RuleSize(0, 0), RuleSize(0, 0)),  # 0
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 1
        (RuleSize(1, 1), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(1, 1), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 2
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 3
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(2, 2), RuleSize(1, 1), RuleSize(1, 1)),  # 4
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 5
        (RuleSize(2, 1), RuleSize(1, 1)),  # 6
        (RuleSize(3, 9), RuleSize(3, 4), RuleSize(3, 4), RuleSize(2, 1), RuleSize(2, 2), RuleSize(2, 2)),  # 7
        (RuleSize(3, 1), RuleSize(2, 1), RuleSize(2, 1)),  # 8
        (RuleSize(4, 6), RuleSize(3, 2)),  # 9
        (RuleSize(1, 1), RuleSize(1, 1)),  # 10
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1),  # 1
        (1, 1, 1, 1, 1, 1, 1, 1),  # 2
        (1, 1, 1, 1, 1, 1),  # 3
        (1, 1, 1, 1, 1),  # 4
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 5
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(1, 1),  # 1
        RuleSize(2, 1),  # 2
        RuleSize(4, 1),  # 3
        RuleSize(4, 2),  # 4
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), (0xa1, 0xad), (0xae, 0x378), (0x37a, 0x380), (0x384, 0x38b), (0x38c, 0x38d), (0x38e, 0x3a2), (0x3a3, 0x530), (0x531, 0x557), (0x559, 0x58b), (0x58d, 0x590), (0x591, 0x5c8), (0x5d0, 0x5eb), (0x5ef, 0x5f5), (0x606, 0x61c), (0x61e, 0x6dd), (0x6de, 0x70e), (0x710, 0x74b), (0x74d, 0x7b2), (0x7c0, 0x7fb), (0x7fd, 0x82e), (0x830, 0x83f), (0x840, 0x85c), (0x85e, 0x85f), (0x860, 0x86b), (0x8a0, 0x8b5), (0x8b6, 0x8c8), (0x8d3, 0x8e2), (0x8e3, 0x984), (0x985, 0x98d), (0x98f, 0x991), (0x993, 0x9a9), (0x9aa, 0x9b1), (0x9b2, 0x9b3), (0x9b6, 0x9ba), (0x9bc, 0x9c5), (0x9c7, 0x9c9), (0x9cb, 0x9cf), (0x9d7, 0x9d8), (0x9dc, 0x9de), (0x9df, 0x9e4), (0x9e6, 0x9ff), (0xa01, 0xa04), (0xa05, 0xa0b), (0xa0f, 0xa11), (0xa13, 0xa29), (0xa2a, 0xa31), (0xa32, 0xa34), (0xa35, 0xa37), (0xa38, 0xa3a), (0xa3c, 0xa3d), (0xa3e, 0xa43), (0xa47, 0xa49), (0xa4b, 0xa4e), (0xa51, 0xa52), (0xa59, 0xa5d), (0xa5e, 0xa5f), (0xa66, 0xa77), (0xa81, 0xa84), (0xa85, 0xa8e), (0xa8f, 0xa92), (0xa93, 0xaa9), (0xaaa, 0xab1), (0xab2, 0xab4), (0xab5, 0xaba), (0xabc, 0xac6), (0xac7, 0xaca), (0xacb, 0xace), (0xad0, 0xad1), (0xae0, 0xae4), (0xae6, 0xaf2), (0xaf9, 0xb00), (0xb01, 0xb04), (0xb05, 0xb0d), (0xb0f, 0xb11), (0xb13, 0xb29), (0xb2a, 0xb31), (0xb32, 0xb34), (0xb35, 0xb3a), (0xb3c, 0xb45), (0xb47, 0xb49), (0xb4b, 0xb4e), (0xb55, 0xb58), (0xb5c, 0xb5e), (0xb5f, 0xb64), (0xb66, 0xb78), (0xb82, 0xb84), (0xb85, 0xb8b), (0xb8e, 0xb91), (0xb92, 0xb96), (0xb99, 0xb9b), (0xb9c, 0xb9d), (0xb9e, 0xba0), (0xba3, 0xba5), (0xba8, 0xbab), (0xbae, 0xbba), (0xbbe, 0xbc3), (0xbc6, 0xbc9), (0xbca, 0xbce), (0xbd0, 0xbd1), (0xbd7, 0xbd8), (0xbe6, 0xbfb), (0xc00, 0xc0d), (0xc0e, 0xc11), (0xc12, 0xc29), (0xc2a, 0xc3a), (0xc3d, 0xc45), (0xc46, 0xc49), (0xc4a, 0xc4e), (0xc55, 0xc57), (0xc58, 0xc5b), (0xc60, 0xc64), (0xc66, 0xc70), (0xc77, 0xc8d), (0xc8e, 0xc91), (0xc92, 0xca9), (0xcaa, 0xcb4), (0xcb5, 0xcba), (0xcbc, 0xcc5), (0xcc6, 0xcc9), (0xcca, 0xcce), (0xcd5, 0xcd7), (0xcde, 0xcdf), (0xce0, 0xce4), (0xce6, 0xcf0), (0xcf1, 0xcf3), (0xd00, 0xd0d), (0xd0e, 0xd11), (0xd12, 0xd45), (0xd46, 0xd49), (0xd4a, 0xd50), (0xd54, 0xd64), (0xd66, 0xd80), (0xd81, 0xd84), (0xd85, 0xd97), (0xd9a, 0xdb2), (0xdb3, 0xdbc), (0xdbd, 0xdbe), (0xdc0, 0xdc7), (0xdca, 0xdcb), (0xdcf, 0xdd5), (0xdd6, 0xdd7), (0xdd8, 0xde0), (0xde6, 0xdf0), (0xdf2, 0xdf5), (0xe01, 0xe3b), (0xe3f, 0xe5c), (0xe81, 0xe83), (0xe84, 0xe85), (0xe86, 0xe8b), (0xe8c, 0xea4), (0xea5, 0xea6), (0xea7, 0xebe), (0xec0, 0xec5), (0xec6, 0xec7), (0xec8, 0xece), (0xed0, 0xeda), (0xedc, 0xee0), (0xf00, 0xf48), (0xf49, 0xf6d), (0xf71, 0xf98), (0xf99, 0xfbd), (0xfbe, 0xfcd), (0xfce, 0xfdb), (0x1000, 0x10c6), (0x10c7, 0x10c8), (0x10cd, 0x10ce), (0x10d0, 0x1249), (0x124a, 0x124e), (0x1250, 0x1257), (0x1258, 0x1259), (0x125a, 0x125e), (0x1260, 0x1289), (0x128a, 0x128e), (0x1290, 0x12b1), (0x12b2, 0x12b6), (0x12b8, 0x12bf), (0x12c0, 0x12c1), (0x12c2, 0x12c6), (0x12c8, 0x12d7), (0x12d8, 0x1311), (0x1312, 0x1316), (0x1318, 0x135b), (0x135d, 0x137d), (0x1380, 0x139a), (0x13a0, 0x13f6), (0x13f8, 0x13fe), (0x1400, 0x1680), (0x1681, 0x169d), (0x16a0, 0x16f9), (0x1700, 0x170d), (0x170e, 0x1715), (0x1720, 0x1737), (0x1740, 0x1754), (0x1760, 0x176d), (0x176e, 0x1771), (0x1772, 0x1774), (0x1780, 0x17de), (0x17e0, 0x17ea), (0x17f0, 0x17fa), (0x1800, 0x180e), (0x1810, 0x181a), (0x1820, 0x1879), (0x1880, 0x18ab), (0x18b0, 0x18f6), (0x1900, 0x191f), (0x1920, 0x192c), (0x1930, 0x193c), (0x1940, 0x1941), (0x1944, 0x196e), (0x1970, 0x1975), (0x1980, 0x19ac), (0x19b0, 0x19ca), (0x19d0, 0x19db), (0x19de, 0x1a1c), (0x1a1e, 0x1a5f), (0x1a60, 0x1a7d), (0x1a7f, 0x1a8a), (0x1a90, 0x1a9a), (0x1aa0, 0x1aae), (0x1ab0, 0x1ac1), (0x1b00, 0x1b4c), (0x1b50, 0x1b7d), (0x1b80, 0x1bf4), (0x1bfc, 0x1c38), (0x1c3b, 0x1c4a), (0x1c4d, 0x1c89), (0x1c90, 0x1cbb), (0x1cbd, 0x1cc8), (0x1cd0, 0x1cfb), (0x1d00, 0x1dfa), (0x1dfb, 0x1f16), (0x1f18, 0x1f1e), (0x1f20, 0x1f46), (0x1f48, 0x1f4e), (0x1f50, 0x1f58), (0x1f59, 0x1f5a), (0x1f5b, 0x1f5c), (0x1f5d, 0x1f5e), (0x1f5f, 0x1f7e), (0x1f80, 0x1fb5), (0x1fb6, 0x1fc5), (0x1fc6, 0x1fd4), (0x1fd6, 0x1fdc), (0x1fdd, 0x1ff0), (0x1ff2, 0x1ff5), (0x1ff6, 0x1fff), (0x2010, 0x2028), (0x2030, 0x205f), (0x2070, 0x2072), (0x2074, 0x208f), (0x2090, 0x209d), (0x20a0, 0x20c0), (0x20d0, 0x20f1), (0x2100, 0x218c), (0x2190, 0x2427), (0x2440, 0x244b), (0x2460, 0x2b74), (0x2b76, 0x2b96), (0x2b97, 0x2c2f), (0x2c30, 0x2c5f), (0x2c60, 0x2cf4), (0x2cf9, 0x2d26), (0x2d27, 0x2d28), (0x2d2d, 0x2d2e), (0x2d30, 0x2d68), (0x2d6f, 0x2d71), (0x2d7f, 0x2d97), (0x2da0, 0x2da7), (0x2da8, 0x2daf), (0x2db0, 0x2db7), (0x2db8, 0x2dbf), (0x2dc0, 0x2dc7), (0x2dc8, 0x2dcf), (0x2dd0, 0x2dd7), (0x2dd8, 0x2ddf), (0x2de0, 0x2e53), (0x2e80, 0x2e9a), (0x2e9b, 0x2ef4), (0x2f00, 0x2fd6), (0x2ff0, 0x2ffc), (0x3001, 0x3040), (0x3041, 0x3097), (0x3099, 0x3100), (0x3105, 0x3130), (0x3131, 0x318f), (0x3190, 0x31e4), (0x31f0, 0x321f), (0x3220, 0x9ffd), (0xa000, 0xa48d), (0xa490, 0xa4c7), (0xa4d0, 0xa62c), (0xa640, 0xa6f8), (0xa700, 0xa7c0), (0xa7c2, 0xa7cb), (0xa7f5, 0xa82d), (0xa830, 0xa83a), (0xa840, 0xa878), (0xa880, 0xa8c6), (0xa8ce, 0xa8da), (0xa8e0, 0xa954), (0xa95f, 0xa97d), (0xa980, 0xa9ce), (0xa9cf, 0xa9da), (0xa9de, 0xa9ff), (0xaa00, 0xaa37), (0xaa40, 0xaa4e), (0xaa50, 0xaa5a), (0xaa5c, 0xaac3), (0xaadb, 0xaaf7), (0xab01, 0xab07), (0xab09, 0xab0f), (0xab11, 0xab17), (0xab20, 0xab27), (0xab28, 0xab2f), (0xab30, 0xab6c), (0xab70, 0xabee), (0xabf0, 0xabfa), (0xac00, 0xd7a4), (0xd7b0, 0xd7c7), (0xd7cb, 0xd7fc), (0xf900, 0xfa6e), (0xfa70, 0xfada), (0xfb00, 0xfb07), (0xfb13, 0xfb18), (0xfb1d, 0xfb37), (0xfb38, 0xfb3d), (0xfb3e, 0xfb3f), (0xfb40, 0xfb42), (0xfb43, 0xfb45), (0xfb46, 0xfbc2), (0xfbd3, 0xfd40), (0xfd50, 0xfd90), (0xfd92, 0xfdc8), (0xfdf0, 0xfdfe), (0xfe00, 0xfe1a), (0xfe20, 0xfe53), (0xfe54, 0xfe67), (0xfe68, 0xfe6c), (0xfe70, 0xfe75), (0xfe76, 0xfefd), (0xff01, 0xffbf), (0xffc2, 0xffc8), (0xffca, 0xffd0), (0xffd2, 0xffd8), (0xffda, 0xffdd), (0xffe0, 0xffe7), (0xffe8, 0xffef), (0xfffc, 0xfffe), (0x10000, 0x1000c), (0x1000d, 0x10027), (0x10028, 0x1003b), (0x1003c, 0x1003e), (0x1003f, 0x1004e), (0x10050, 0x1005e), (0x10080, 0x100fb), (0x10100, 0x10103), (0x10107, 0x10134), (0x10137, 0x1018f), (0x10190, 0x1019d), (0x101a0, 0x101a1), (0x101d0, 0x101fe), (0x10280, 0x1029d), (0x102a0, 0x102d1), (0x102e0, 0x102fc), (0x10300, 0x10324), (0x1032d, 0x1034b), (0x10350, 0x1037b), (0x10380, 0x1039e), (0x1039f, 0x103c4), (0x103c8, 0x103d6), (0x10400, 0x1049e), (0x104a0, 0x104aa), (0x104b0, 0x104d4), (0x104d8, 0x104fc), (0x10500, 0x10528), (0x10530, 0x10564), (0x1056f, 0x10570), (0x10600, 0x10737), (0x10740, 0x10756), (0x10760, 0x10768), (0x10800, 0x10806), (0x10808, 0x10809), (0x1080a, 0x10836), (0x10837, 0x10839), (0x1083c, 0x1083d), (0x1083f, 0x10856), (0x10857, 0x1089f), (0x108a7, 0x108b0), (0x108e0, 0x108f3), (0x108f4, 0x108f6), (0x108fb, 0x1091c), (0x1091f, 0x1093a), (0x1093f, 0x10940), (0x10980, 0x109b8), (0x109bc, 0x109d0), (0x109d2, 0x10a04), (0x10a05, 0x10a07), (0x10a0c, 0x10a14), (0x10a15, 0x10a18), (0x10a19, 0x10a36), (0x10a38, 0x10a3b), (0x10a3f, 0x10a49), (0x10a50, 0x10a59), (0x10a60, 0x10aa0), (0x10ac0, 0x10ae7), (0x10aeb, 0x10af7), (0x10b00, 0x10b36), (0x10b39, 0x10b56), (0x10b58, 0x10b73), (0x10b78, 0x10b92), (0x10b99, 0x10b9d), (0x10ba9, 0x10bb0), (0x10c00, 0x10c49), (0x10c80, 0x10cb3), (0x10cc0, 0x10cf3), (0x10cfa, 0x10d28), (0x10d30, 0x10d3a), (0x10e60, 0x10e7f), (0x10e80, 0x10eaa), (0x10eab, 0x10eae), (0x10eb0, 0x10eb2), (0x10f00, 0x10f28), (0x10f30, 0x10f5a), (0x10fb0, 0x10fcc), (0x10fe0, 0x10ff7), (0x11000, 0x1104e), (0x11052, 0x11070), (0x1107f, 0x110bd), (0x110be, 0x110c2), (0x110d0, 0x110e9), (0x110f0, 0x110fa), (0x11100, 0x11135), (0x11136, 0x11148), (0x11150, 0x11177), (0x11180, 0x111e0), (0x111e1, 0x111f5), (0x11200, 0x11212), (0x11213, 0x1123f), (0x11280, 0x11287), (0x11288, 0x11289), (0x1128a, 0x1128e), (0x1128f, 0x1129e), (0x1129f, 0x112aa), (0x112b0, 0x112eb), (0x112f0, 0x112fa), (0x11300, 0x11304), (0x11305, 0x1130d), (0x1130f, 0x11311), (0x11313, 0x11329), (0x1132a, 0x11331), (0x11332, 0x11334), (0x11335, 0x1133a), (0x1133b, 0x11345), (0x11347, 0x11349), (0x1134b, 0x1134e), (0x11350, 0x11351), (0x11357, 0x11358), (0x1135d, 0x11364), (0x11366, 0x1136d), (0x11370, 0x11375), (0x11400, 0x1145c), (0x1145d, 0x11462), (0x11480, 0x114c8), (0x114d0, 0x114da), (0x11580, 0x115b6), (0x115b8, 0x115de), (0x11600, 0x11645), (0x11650, 0x1165a), (0x11660, 0x1166d), (0x11680, 0x116b9), (0x116c0, 0x116ca), (0x11700, 0x1171b), (0x1171d, 0x1172c), (0x11730, 0x11740), (0x11800, 0x1183c), (0x118a0, 0x118f3), (0x118ff, 0x11907), (0x11909, 0x1190a), (0x1190c, 0x11914), (0x11915, 0x11917), (0x11918, 0x11936), (0x11937, 0x11939), (0x1193b, 0x11947), (0x11950, 0x1195a), (0x119a0, 0x119a8), (0x119aa, 0x119d8), (0x119da, 0x119e5), (0x11a00, 0x11a48), (0x11a50, 0x11aa3), (0x11ac0, 0x11af9), (0x11c00, 0x11c09), (0x11c0a, 0x11c37), (0x11c38, 0x11c46), (0x11c50, 0x11c6d), (0x11c70, 0x11c90), (0x11c92, 0x11ca8), (0x11ca9, 0x11cb7), (0x11d00, 0x11d07), (0x11d08, 0x11d0a), (0x11d0b, 0x11d37), (0x11d3a, 0x11d3b), (0x11d3c, 0x11d3e), (0x11d3f, 0x11d48), (0x11d50, 0x11d5a), (0x11d60, 0x11d66), (0x11d67, 0x11d69), (0x11d6a, 0x11d8f), (0x11d90, 0x11d92), (0x11d93, 0x11d99), (0x11da0, 0x11daa), (0x11ee0, 0x11ef9), (0x11fb0, 0x11fb1), (0x11fc0, 0x11ff2), (0x11fff, 0x1239a), (0x12400, 0x1246f), (0x12470, 0x12475), (0x12480, 0x12544), (0x13000, 0x1342f), (0x14400, 0x14647), (0x16800, 0x16a39), (0x16a40, 0x16a5f), (0x16a60, 0x16a6a), (0x16a6e, 0x16a70), (0x16ad0, 0x16aee), (0x16af0, 0x16af6), (0x16b00, 0x16b46), (0x16b50, 0x16b5a), (0x16b5b, 0x16b62), (0x16b63, 0x16b78), (0x16b7d, 0x16b90), (0x16e40, 0x16e9b), (0x16f00, 0x16f4b), (0x16f4f, 0x16f88), (0x16f8f, 0x16fa0), (0x16fe0, 0x16fe5), (0x16ff0, 0x16ff2), (0x17000, 0x187f8), (0x18800, 0x18cd6), (0x18d00, 0x18d09), (0x1b000, 0x1b11f), (0x1b150, 0x1b153), (0x1b164, 0x1b168), (0x1b170, 0x1b2fc), (0x1bc00, 0x1bc6b), (0x1bc70, 0x1bc7d), (0x1bc80, 0x1bc89), (0x1bc90, 0x1bc9a), (0x1bc9c, 0x1bca0), (0x1d000, 0x1d0f6), (0x1d100, 0x1d127), (0x1d129, 0x1d173), (0x1d17b, 0x1d1e9), (0x1d200, 0x1d246), (0x1d2e0, 0x1d2f4), (0x1d300, 0x1d357), (0x1d360, 0x1d379), (0x1d400, 0x1d455), (0x1d456, 0x1d49d), (0x1d49e, 0x1d4a0), (0x1d4a2, 0x1d4a3), (0x1d4a5, 0x1d4a7), (0x1d4a9, 0x1d4ad), (0x1d4ae, 0x1d4ba), (0x1d4bb, 0x1d4bc), (0x1d4bd, 0x1d4c4), (0x1d4c5, 0x1d506), (0x1d507, 0x1d50b), (0x1d50d, 0x1d515), (0x1d516, 0x1d51d), (0x1d51e, 0x1d53a), (0x1d53b, 0x1d53f), (0x1d540, 0x1d545), (0x1d546, 0x1d547), (0x1d54a, 0x1d551), (0x1d552, 0x1d6a6), (0x1d6a8, 0x1d7cc), (0x1d7ce, 0x1da8c), (0x1da9b, 0x1daa0), (0x1daa1, 0x1dab0), (0x1e000, 0x1e007), (0x1e008, 0x1e019), (0x1e01b, 0x1e022), (0x1e023, 0x1e025), (0x1e026, 0x1e02b), (0x1e100, 0x1e12d), (0x1e130, 0x1e13e), (0x1e140, 0x1e14a), (0x1e14e, 0x1e150), (0x1e2c0, 0x1e2fa), (0x1e2ff, 0x1e300), (0x1e800, 0x1e8c5), (0x1e8c7, 0x1e8d7), (0x1e900, 0x1e94c), (0x1e950, 0x1e95a), (0x1e95e, 0x1e960), (0x1ec71, 0x1ecb5), (0x1ed01, 0x1ed3e), (0x1ee00, 0x1ee04), (0x1ee05, 0x1ee20), (0x1ee21, 0x1ee23), (0x1ee24, 0x1ee25), (0x1ee27, 0x1ee28), (0x1ee29, 0x1ee33), (0x1ee34, 0x1ee38), (0x1ee39, 0x1ee3a), (0x1ee3b, 0x1ee3c), (0x1ee42, 0x1ee43), (0x1ee47, 0x1ee48), (0x1ee49, 0x1ee4a), (0x1ee4b, 0x1ee4c), (0x1ee4d, 0x1ee50), (0x1ee51, 0x1ee53), (0x1ee54, 0x1ee55), (0x1ee57, 0x1ee58), (0x1ee59, 0x1ee5a), (0x1ee5b, 0x1ee5c), (0x1ee5d, 0x1ee5e), (0x1ee5f, 0x1ee60), (0x1ee61, 0x1ee63), (0x1ee64, 0x1ee65), (0x1ee67, 0x1ee6b), (0x1ee6c, 0x1ee73), (0x1ee74, 0x1ee78), (0x1ee79, 0x1ee7d), (0x1ee7e, 0x1ee7f), (0x1ee80, 0x1ee8a), (0x1ee8b, 0x1ee9c), (0x1eea1, 0x1eea4), (0x1eea5, 0x1eeaa), (0x1eeab, 0x1eebc), (0x1eef0, 0x1eef2), (0x1f000, 0x1f02c), (0x1f030, 0x1f094), (0x1f0a0, 0x1f0af), (0x1f0b1, 0x1f0c0), (0x1f0c1, 0x1f0d0), (0x1f0d1, 0x1f0f6), (0x1f100, 0x1f1ae), (0x1f1e6, 0x1f203), (0x1f210, 0x1f23c), (0x1f240, 0x1f249), (0x1f250, 0x1f252), (0x1f260, 0x1f266), (0x1f300, 0x1f6d8), (0x1f6e0, 0x1f6ed), (0x1f6f0, 0x1f6fd), (0x1f700, 0x1f774), (0x1f780, 0x1f7d9), (0x1f7e0, 0x1f7ec), (0x1f800, 0x1f80c), (0x1f810, 0x1f848), (0x1f850, 0x1f85a), (0x1f860, 0x1f888), (0x1f890, 0x1f8ae), (0x1f8b0, 0x1f8b2), (0x1f900, 0x1f979), (0x1f97a, 0x1f9cc), (0x1f9cd, 0x1fa54), (0x1fa60, 0x1fa6e), (0x1fa70, 0x1fa75), (0x1fa78, 0x1fa7b), (0x1fa80, 0x1fa87), (0x1fa90, 0x1faa9), (0x1fab0, 0x1fab7), (0x1fac0, 0x1fac3), (0x1fad0, 0x1fad7), (0x1fb00, 0x1fb93), (0x1fb94, 0x1fbcb), (0x1fbf0, 0x1fbfa), (0x20000, 0x2a6de), (0x2a700, 0x2b735), (0x2b740, 0x2b81e), (0x2b820, 0x2cea2), (0x2ceb0, 0x2ebe1), (0x2f800, 0x2fa1e), (0x30000, 0x3134b), (0xe0100, 0xe01f0), )),  # 0
        Generator._charset(((0x20, 0x3c), (0x3d, 0x7f), (0xa1, 0xad), (0xae, 0x378), (0x37a, 0x380), (0x384, 0x38b), (0x38c, 0x38d), (0x38e, 0x3a2), (0x3a3, 0x530), (0x531, 0x557), (0x559, 0x58b), (0x58d, 0x590), (0x591, 0x5c8), (0x5d0, 0x5eb), (0x5ef, 0x5f5), (0x606, 0x61c), (0x61e, 0x6dd), (0x6de, 0x70e), (0x710, 0x74b), (0x74d, 0x7b2), (0x7c0, 0x7fb), (0x7fd, 0x82e), (0x830, 0x83f), (0x840, 0x85c), (0x85e, 0x85f), (0x860, 0x86b), (0x8a0, 0x8b5), (0x8b6, 0x8c8), (0x8d3, 0x8e2), (0x8e3, 0x984), (0x985, 0x98d), (0x98f, 0x991), (0x993, 0x9a9), (0x9aa, 0x9b1), (0x9b2, 0x9b3), (0x9b6, 0x9ba), (0x9bc, 0x9c5), (0x9c7, 0x9c9), (0x9cb, 0x9cf), (0x9d7, 0x9d8), (0x9dc, 0x9de), (0x9df, 0x9e4), (0x9e6, 0x9ff), (0xa01, 0xa04), (0xa05, 0xa0b), (0xa0f, 0xa11), (0xa13, 0xa29), (0xa2a, 0xa31), (0xa32, 0xa34), (0xa35, 0xa37), (0xa38, 0xa3a), (0xa3c, 0xa3d), (0xa3e, 0xa43), (0xa47, 0xa49), (0xa4b, 0xa4e), (0xa51, 0xa52), (0xa59, 0xa5d), (0xa5e, 0xa5f), (0xa66, 0xa77), (0xa81, 0xa84), (0xa85, 0xa8e), (0xa8f, 0xa92), (0xa93, 0xaa9), (0xaaa, 0xab1), (0xab2, 0xab4), (0xab5, 0xaba), (0xabc, 0xac6), (0xac7, 0xaca), (0xacb, 0xace), (0xad0, 0xad1), (0xae0, 0xae4), (0xae6, 0xaf2), (0xaf9, 0xb00), (0xb01, 0xb04), (0xb05, 0xb0d), (0xb0f, 0xb11), (0xb13, 0xb29), (0xb2a, 0xb31), (0xb32, 0xb34), (0xb35, 0xb3a), (0xb3c, 0xb45), (0xb47, 0xb49), (0xb4b, 0xb4e), (0xb55, 0xb58), (0xb5c, 0xb5e), (0xb5f, 0xb64), (0xb66, 0xb78), (0xb82, 0xb84), (0xb85, 0xb8b), (0xb8e, 0xb91), (0xb92, 0xb96), (0xb99, 0xb9b), (0xb9c, 0xb9d), (0xb9e, 0xba0), (0xba3, 0xba5), (0xba8, 0xbab), (0xbae, 0xbba), (0xbbe, 0xbc3), (0xbc6, 0xbc9), (0xbca, 0xbce), (0xbd0, 0xbd1), (0xbd7, 0xbd8), (0xbe6, 0xbfb), (0xc00, 0xc0d), (0xc0e, 0xc11), (0xc12, 0xc29), (0xc2a, 0xc3a), (0xc3d, 0xc45), (0xc46, 0xc49), (0xc4a, 0xc4e), (0xc55, 0xc57), (0xc58, 0xc5b), (0xc60, 0xc64), (0xc66, 0xc70), (0xc77, 0xc8d), (0xc8e, 0xc91), (0xc92, 0xca9), (0xcaa, 0xcb4), (0xcb5, 0xcba), (0xcbc, 0xcc5), (0xcc6, 0xcc9), (0xcca, 0xcce), (0xcd5, 0xcd7), (0xcde, 0xcdf), (0xce0, 0xce4), (0xce6, 0xcf0), (0xcf1, 0xcf3), (0xd00, 0xd0d), (0xd0e, 0xd11), (0xd12, 0xd45), (0xd46, 0xd49), (0xd4a, 0xd50), (0xd54, 0xd64), (0xd66, 0xd80), (0xd81, 0xd84), (0xd85, 0xd97), (0xd9a, 0xdb2), (0xdb3, 0xdbc), (0xdbd, 0xdbe), (0xdc0, 0xdc7), (0xdca, 0xdcb), (0xdcf, 0xdd5), (0xdd6, 0xdd7), (0xdd8, 0xde0), (0xde6, 0xdf0), (0xdf2, 0xdf5), (0xe01, 0xe3b), (0xe3f, 0xe5c), (0xe81, 0xe83), (0xe84, 0xe85), (0xe86, 0xe8b), (0xe8c, 0xea4), (0xea5, 0xea6), (0xea7, 0xebe), (0xec0, 0xec5), (0xec6, 0xec7), (0xec8, 0xece), (0xed0, 0xeda), (0xedc, 0xee0), (0xf00, 0xf48), (0xf49, 0xf6d), (0xf71, 0xf98), (0xf99, 0xfbd), (0xfbe, 0xfcd), (0xfce, 0xfdb), (0x1000, 0x10c6), (0x10c7, 0x10c8), (0x10cd, 0x10ce), (0x10d0, 0x1249), (0x124a, 0x124e), (0x1250, 0x1257), (0x1258, 0x1259), (0x125a, 0x125e), (0x1260, 0x1289), (0x128a, 0x128e), (0x1290, 0x12b1), (0x12b2, 0x12b6), (0x12b8, 0x12bf), (0x12c0, 0x12c1), (0x12c2, 0x12c6), (0x12c8, 0x12d7), (0x12d8, 0x1311), (0x1312, 0x1316), (0x1318, 0x135b), (0x135d, 0x137d), (0x1380, 0x139a), (0x13a0, 0x13f6), (0x13f8, 0x13fe), (0x1400, 0x1680), (0x1681, 0x169d), (0x16a0, 0x16f9), (0x1700, 0x170d), (0x170e, 0x1715), (0x1720, 0x1737), (0x1740, 0x1754), (0x1760, 0x176d), (0x176e, 0x1771), (0x1772, 0x1774), (0x1780, 0x17de), (0x17e0, 0x17ea), (0x17f0, 0x17fa), (0x1800, 0x180e), (0x1810, 0x181a), (0x1820, 0x1879), (0x1880, 0x18ab), (0x18b0, 0x18f6), (0x1900, 0x191f), (0x1920, 0x192c), (0x1930, 0x193c), (0x1940, 0x1941), (0x1944, 0x196e), (0x1970, 0x1975), (0x1980, 0x19ac), (0x19b0, 0x19ca), (0x19d0, 0x19db), (0x19de, 0x1a1c), (0x1a1e, 0x1a5f), (0x1a60, 0x1a7d), (0x1a7f, 0x1a8a), (0x1a90, 0x1a9a), (0x1aa0, 0x1aae), (0x1ab0, 0x1ac1), (0x1b00, 0x1b4c), (0x1b50, 0x1b7d), (0x1b80, 0x1bf4), (0x1bfc, 0x1c38), (0x1c3b, 0x1c4a), (0x1c4d, 0x1c89), (0x1c90, 0x1cbb), (0x1cbd, 0x1cc8), (0x1cd0, 0x1cfb), (0x1d00, 0x1dfa), (0x1dfb, 0x1f16), (0x1f18, 0x1f1e), (0x1f20, 0x1f46), (0x1f48, 0x1f4e), (0x1f50, 0x1f58), (0x1f59, 0x1f5a), (0x1f5b, 0x1f5c), (0x1f5d, 0x1f5e), (0x1f5f, 0x1f7e), (0x1f80, 0x1fb5), (0x1fb6, 0x1fc5), (0x1fc6, 0x1fd4), (0x1fd6, 0x1fdc), (0x1fdd, 0x1ff0), (0x1ff2, 0x1ff5), (0x1ff6, 0x1fff), (0x2010, 0x2028), (0x2030, 0x205f), (0x2070, 0x2072), (0x2074, 0x208f), (0x2090, 0x209d), (0x20a0, 0x20c0), (0x20d0, 0x20f1), (0x2100, 0x218c), (0x2190, 0x2427), (0x2440, 0x244b), (0x2460, 0x2b74), (0x2b76, 0x2b96), (0x2b97, 0x2c2f), (0x2c30, 0x2c5f), (0x2c60, 0x2cf4), (0x2cf9, 0x2d26), (0x2d27, 0x2d28), (0x2d2d, 0x2d2e), (0x2d30, 0x2d68), (0x2d6f, 0x2d71), (0x2d7f, 0x2d97), (0x2da0, 0x2da7), (0x2da8, 0x2daf), (0x2db0, 0x2db7), (0x2db8, 0x2dbf), (0x2dc0, 0x2dc7), (0x2dc8, 0x2dcf), (0x2dd0, 0x2dd7), (0x2dd8, 0x2ddf), (0x2de0, 0x2e53), (0x2e80, 0x2e9a), (0x2e9b, 0x2ef4), (0x2f00, 0x2fd6), (0x2ff0, 0x2ffc), (0x3001, 0x3040), (0x3041, 0x3097), (0x3099, 0x3100), (0x3105, 0x3130), (0x3131, 0x318f), (0x3190, 0x31e4), (0x31f0, 0x321f), (0x3220, 0x9ffd), (0xa000, 0xa48d), (0xa490, 0xa4c7), (0xa4d0, 0xa62c), (0xa640, 0xa6f8), (0xa700, 0xa7c0), (0xa7c2, 0xa7cb), (0xa7f5, 0xa82d), (0xa830, 0xa83a), (0xa840, 0xa878), (0xa880, 0xa8c6), (0xa8ce, 0xa8da), (0xa8e0, 0xa954), (0xa95f, 0xa97d), (0xa980, 0xa9ce), (0xa9cf, 0xa9da), (0xa9de, 0xa9ff), (0xaa00, 0xaa37), (0xaa40, 0xaa4e), (0xaa50, 0xaa5a), (0xaa5c, 0xaac3), (0xaadb, 0xaaf7), (0xab01, 0xab07), (0xab09, 0xab0f), (0xab11, 0xab17), (0xab20, 0xab27), (0xab28, 0xab2f), (0xab30, 0xab6c), (0xab70, 0xabee), (0xabf0, 0xabfa), (0xac00, 0xd7a4), (0xd7b0, 0xd7c7), (0xd7cb, 0xd7fc), (0xf900, 0xfa6e), (0xfa70, 0xfada), (0xfb00, 0xfb07), (0xfb13, 0xfb18), (0xfb1d, 0xfb37), (0xfb38, 0xfb3d), (0xfb3e, 0xfb3f), (0xfb40, 0xfb42), (0xfb43, 0xfb45), (0xfb46, 0xfbc2), (0xfbd3, 0xfd40), (0xfd50, 0xfd90), (0xfd92, 0xfdc8), (0xfdf0, 0xfdfe), (0xfe00, 0xfe1a), (0xfe20, 0xfe53), (0xfe54, 0xfe67), (0xfe68, 0xfe6c), (0xfe70, 0xfe75), (0xfe76, 0xfefd), (0xff01, 0xffbf), (0xffc2, 0xffc8), (0xffca, 0xffd0), (0xffd2, 0xffd8), (0xffda, 0xffdd), (0xffe0, 0xffe7), (0xffe8, 0xffef), (0xfffc, 0xfffe), (0x10000, 0x1000c), (0x1000d, 0x10027), (0x10028, 0x1003b), (0x1003c, 0x1003e), (0x1003f, 0x1004e), (0x10050, 0x1005e), (0x10080, 0x100fb), (0x10100, 0x10103), (0x10107, 0x10134), (0x10137, 0x1018f), (0x10190, 0x1019d), (0x101a0, 0x101a1), (0x101d0, 0x101fe), (0x10280, 0x1029d), (0x102a0, 0x102d1), (0x102e0, 0x102fc), (0x10300, 0x10324), (0x1032d, 0x1034b), (0x10350, 0x1037b), (0x10380, 0x1039e), (0x1039f, 0x103c4), (0x103c8, 0x103d6), (0x10400, 0x1049e), (0x104a0, 0x104aa), (0x104b0, 0x104d4), (0x104d8, 0x104fc), (0x10500, 0x10528), (0x10530, 0x10564), (0x1056f, 0x10570), (0x10600, 0x10737), (0x10740, 0x10756), (0x10760, 0x10768), (0x10800, 0x10806), (0x10808, 0x10809), (0x1080a, 0x10836), (0x10837, 0x10839), (0x1083c, 0x1083d), (0x1083f, 0x10856), (0x10857, 0x1089f), (0x108a7, 0x108b0), (0x108e0, 0x108f3), (0x108f4, 0x108f6), (0x108fb, 0x1091c), (0x1091f, 0x1093a), (0x1093f, 0x10940), (0x10980, 0x109b8), (0x109bc, 0x109d0), (0x109d2, 0x10a04), (0x10a05, 0x10a07), (0x10a0c, 0x10a14), (0x10a15, 0x10a18), (0x10a19, 0x10a36), (0x10a38, 0x10a3b), (0x10a3f, 0x10a49), (0x10a50, 0x10a59), (0x10a60, 0x10aa0), (0x10ac0, 0x10ae7), (0x10aeb, 0x10af7), (0x10b00, 0x10b36), (0x10b39, 0x10b56), (0x10b58, 0x10b73), (0x10b78, 0x10b92), (0x10b99, 0x10b9d), (0x10ba9, 0x10bb0), (0x10c00, 0x10c49), (0x10c80, 0x10cb3), (0x10cc0, 0x10cf3), (0x10cfa, 0x10d28), (0x10d30, 0x10d3a), (0x10e60, 0x10e7f), (0x10e80, 0x10eaa), (0x10eab, 0x10eae), (0x10eb0, 0x10eb2), (0x10f00, 0x10f28), (0x10f30, 0x10f5a), (0x10fb0, 0x10fcc), (0x10fe0, 0x10ff7), (0x11000, 0x1104e), (0x11052, 0x11070), (0x1107f, 0x110bd), (0x110be, 0x110c2), (0x110d0, 0x110e9), (0x110f0, 0x110fa), (0x11100, 0x11135), (0x11136, 0x11148), (0x11150, 0x11177), (0x11180, 0x111e0), (0x111e1, 0x111f5), (0x11200, 0x11212), (0x11213, 0x1123f), (0x11280, 0x11287), (0x11288, 0x11289), (0x1128a, 0x1128e), (0x1128f, 0x1129e), (0x1129f, 0x112aa), (0x112b0, 0x112eb), (0x112f0, 0x112fa), (0x11300, 0x11304), (0x11305, 0x1130d), (0x1130f, 0x11311), (0x11313, 0x11329), (0x1132a, 0x11331), (0x11332, 0x11334), (0x11335, 0x1133a), (0x1133b, 0x11345), (0x11347, 0x11349), (0x1134b, 0x1134e), (0x11350, 0x11351), (0x11357, 0x11358), (0x1135d, 0x11364), (0x11366, 0x1136d), (0x11370, 0x11375), (0x11400, 0x1145c), (0x1145d, 0x11462), (0x11480, 0x114c8), (0x114d0, 0x114da), (0x11580, 0x115b6), (0x115b8, 0x115de), (0x11600, 0x11645), (0x11650, 0x1165a), (0x11660, 0x1166d), (0x11680, 0x116b9), (0x116c0, 0x116ca), (0x11700, 0x1171b), (0x1171d, 0x1172c), (0x11730, 0x11740), (0x11800, 0x1183c), (0x118a0, 0x118f3), (0x118ff, 0x11907), (0x11909, 0x1190a), (0x1190c, 0x11914), (0x11915, 0x11917), (0x11918, 0x11936), (0x11937, 0x11939), (0x1193b, 0x11947), (0x11950, 0x1195a), (0x119a0, 0x119a8), (0x119aa, 0x119d8), (0x119da, 0x119e5), (0x11a00, 0x11a48), (0x11a50, 0x11aa3), (0x11ac0, 0x11af9), (0x11c00, 0x11c09), (0x11c0a, 0x11c37), (0x11c38, 0x11c46), (0x11c50, 0x11c6d), (0x11c70, 0x11c90), (0x11c92, 0x11ca8), (0x11ca9, 0x11cb7), (0x11d00, 0x11d07), (0x11d08, 0x11d0a), (0x11d0b, 0x11d37), (0x11d3a, 0x11d3b), (0x11d3c, 0x11d3e), (0x11d3f, 0x11d48), (0x11d50, 0x11d5a), (0x11d60, 0x11d66), (0x11d67, 0x11d69), (0x11d6a, 0x11d8f), (0x11d90, 0x11d92), (0x11d93, 0x11d99), (0x11da0, 0x11daa), (0x11ee0, 0x11ef9), (0x11fb0, 0x11fb1), (0x11fc0, 0x11ff2), (0x11fff, 0x1239a), (0x12400, 0x1246f), (0x12470, 0x12475), (0x12480, 0x12544), (0x13000, 0x1342f), (0x14400, 0x14647), (0x16800, 0x16a39), (0x16a40, 0x16a5f), (0x16a60, 0x16a6a), (0x16a6e, 0x16a70), (0x16ad0, 0x16aee), (0x16af0, 0x16af6), (0x16b00, 0x16b46), (0x16b50, 0x16b5a), (0x16b5b, 0x16b62), (0x16b63, 0x16b78), (0x16b7d, 0x16b90), (0x16e40, 0x16e9b), (0x16f00, 0x16f4b), (0x16f4f, 0x16f88), (0x16f8f, 0x16fa0), (0x16fe0, 0x16fe5), (0x16ff0, 0x16ff2), (0x17000, 0x187f8), (0x18800, 0x18cd6), (0x18d00, 0x18d09), (0x1b000, 0x1b11f), (0x1b150, 0x1b153), (0x1b164, 0x1b168), (0x1b170, 0x1b2fc), (0x1bc00, 0x1bc6b), (0x1bc70, 0x1bc7d), (0x1bc80, 0x1bc89), (0x1bc90, 0x1bc9a), (0x1bc9c, 0x1bca0), (0x1d000, 0x1d0f6), (0x1d100, 0x1d127), (0x1d129, 0x1d173), (0x1d17b, 0x1d1e9), (0x1d200, 0x1d246), (0x1d2e0, 0x1d2f4), (0x1d300, 0x1d357), (0x1d360, 0x1d379), (0x1d400, 0x1d455), (0x1d456, 0x1d49d), (0x1d49e, 0x1d4a0), (0x1d4a2, 0x1d4a3), (0x1d4a5, 0x1d4a7), (0x1d4a9, 0x1d4ad), (0x1d4ae, 0x1d4ba), (0x1d4bb, 0x1d4bc), (0x1d4bd, 0x1d4c4), (0x1d4c5, 0x1d506), (0x1d507, 0x1d50b), (0x1d50d, 0x1d515), (0x1d516, 0x1d51d), (0x1d51e, 0x1d53a), (0x1d53b, 0x1d53f), (0x1d540, 0x1d545), (0x1d546, 0x1d547), (0x1d54a, 0x1d551), (0x1d552, 0x1d6a6), (0x1d6a8, 0x1d7cc), (0x1d7ce, 0x1da8c), (0x1da9b, 0x1daa0), (0x1daa1, 0x1dab0), (0x1e000, 0x1e007), (0x1e008, 0x1e019), (0x1e01b, 0x1e022), (0x1e023, 0x1e025), (0x1e026, 0x1e02b), (0x1e100, 0x1e12d), (0x1e130, 0x1e13e), (0x1e140, 0x1e14a), (0x1e14e, 0x1e150), (0x1e2c0, 0x1e2fa), (0x1e2ff, 0x1e300), (0x1e800, 0x1e8c5), (0x1e8c7, 0x1e8d7), (0x1e900, 0x1e94c), (0x1e950, 0x1e95a), (0x1e95e, 0x1e960), (0x1ec71, 0x1ecb5), (0x1ed01, 0x1ed3e), (0x1ee00, 0x1ee04), (0x1ee05, 0x1ee20), (0x1ee21, 0x1ee23), (0x1ee24, 0x1ee25), (0x1ee27, 0x1ee28), (0x1ee29, 0x1ee33), (0x1ee34, 0x1ee38), (0x1ee39, 0x1ee3a), (0x1ee3b, 0x1ee3c), (0x1ee42, 0x1ee43), (0x1ee47, 0x1ee48), (0x1ee49, 0x1ee4a), (0x1ee4b, 0x1ee4c), (0x1ee4d, 0x1ee50), (0x1ee51, 0x1ee53), (0x1ee54, 0x1ee55), (0x1ee57, 0x1ee58), (0x1ee59, 0x1ee5a), (0x1ee5b, 0x1ee5c), (0x1ee5d, 0x1ee5e), (0x1ee5f, 0x1ee60), (0x1ee61, 0x1ee63), (0x1ee64, 0x1ee65), (0x1ee67, 0x1ee6b), (0x1ee6c, 0x1ee73), (0x1ee74, 0x1ee78), (0x1ee79, 0x1ee7d), (0x1ee7e, 0x1ee7f), (0x1ee80, 0x1ee8a), (0x1ee8b, 0x1ee9c), (0x1eea1, 0x1eea4), (0x1eea5, 0x1eeaa), (0x1eeab, 0x1eebc), (0x1eef0, 0x1eef2), (0x1f000, 0x1f02c), (0x1f030, 0x1f094), (0x1f0a0, 0x1f0af), (0x1f0b1, 0x1f0c0), (0x1f0c1, 0x1f0d0), (0x1f0d1, 0x1f0f6), (0x1f100, 0x1f1ae), (0x1f1e6, 0x1f203), (0x1f210, 0x1f23c), (0x1f240, 0x1f249), (0x1f250, 0x1f252), (0x1f260, 0x1f266), (0x1f300, 0x1f6d8), (0x1f6e0, 0x1f6ed), (0x1f6f0, 0x1f6fd), (0x1f700, 0x1f774), (0x1f780, 0x1f7d9), (0x1f7e0, 0x1f7ec), (0x1f800, 0x1f80c), (0x1f810, 0x1f848), (0x1f850, 0x1f85a), (0x1f860, 0x1f888), (0x1f890, 0x1f8ae), (0x1f8b0, 0x1f8b2), (0x1f900, 0x1f979), (0x1f97a, 0x1f9cc), (0x1f9cd, 0x1fa54), (0x1fa60, 0x1fa6e), (0x1fa70, 0x1fa75), (0x1fa78, 0x1fa7b), (0x1fa80, 0x1fa87), (0x1fa90, 0x1faa9), (0x1fab0, 0x1fab7), (0x1fac0, 0x1fac3), (0x1fad0, 0x1fad7), (0x1fb00, 0x1fb93), (0x1fb94, 0x1fbcb), (0x1fbf0, 0x1fbfa), (0x20000, 0x2a6de), (0x2a700, 0x2b735), (0x2b740, 0x2b81e), (0x2b820, 0x2cea2), (0x2ceb0, 0x2ebe1), (0x2f800, 0x2fa1e), (0x30000, 0x3134b), (0xe0100, 0xe01f0), )),  # 1
        Generator._charset(((0x9, 0xa), (0xa, 0xb), (0xd, 0xe), (0x20, 0x21), )),  # 2
        Generator._charset(((0x30, 0x3a), (0x41, 0x47), (0x61, 0x67), )),  # 3
        Generator._charset(((0x30, 0x3a), )),  # 4
        Generator._charset(((0x300, 0x370), )),  # 5
        Generator._charset(((0x203f, 0x2041), )),  # 6
        Generator._charset(((0x3a, 0x3b), (0x41, 0x5b), (0x61, 0x7b), )),  # 7
        Generator._charset(((0x2070, 0x2190), )),  # 8
        Generator._charset(((0x2c00, 0x2ff0), )),  # 9
        Generator._charset(((0x3001, 0xd800), )),  # 10
        Generator._charset(((0xf900, 0xfdd0), )),  # 11
        Generator._charset(((0xfdf0, 0xfffe), )),  # 12
        Generator._charset(((0x20, 0x21), )),  # 13
        Generator._charset(((0x30, 0x3a), (0x41, 0x5b), (0x61, 0x7b), )),  # 14
        Generator._charset(((0x20, 0x22), (0x23, 0x3c), (0x3d, 0x7f), (0xa1, 0xad), (0xae, 0x378), (0x37a, 0x380), (0x384, 0x38b), (0x38c, 0x38d), (0x38e, 0x3a2), (0x3a3, 0x530), (0x531, 0x557), (0x559, 0x58b), (0x58d, 0x590), (0x591, 0x5c8), (0x5d0, 0x5eb), (0x5ef, 0x5f5), (0x606, 0x61c), (0x61e, 0x6dd), (0x6de, 0x70e), (0x710, 0x74b), (0x74d, 0x7b2), (0x7c0, 0x7fb), (0x7fd, 0x82e), (0x830, 0x83f), (0x840, 0x85c), (0x85e, 0x85f), (0x860, 0x86b), (0x8a0, 0x8b5), (0x8b6, 0x8c8), (0x8d3, 0x8e2), (0x8e3, 0x984), (0x985, 0x98d), (0x98f, 0x991), (0x993, 0x9a9), (0x9aa, 0x9b1), (0x9b2, 0x9b3), (0x9b6, 0x9ba), (0x9bc, 0x9c5), (0x9c7, 0x9c9), (0x9cb, 0x9cf), (0x9d7, 0x9d8), (0x9dc, 0x9de), (0x9df, 0x9e4), (0x9e6, 0x9ff), (0xa01, 0xa04), (0xa05, 0xa0b), (0xa0f, 0xa11), (0xa13, 0xa29), (0xa2a, 0xa31), (0xa32, 0xa34), (0xa35, 0xa37), (0xa38, 0xa3a), (0xa3c, 0xa3d), (0xa3e, 0xa43), (0xa47, 0xa49), (0xa4b, 0xa4e), (0xa51, 0xa52), (0xa59, 0xa5d), (0xa5e, 0xa5f), (0xa66, 0xa77), (0xa81, 0xa84), (0xa85, 0xa8e), (0xa8f, 0xa92), (0xa93, 0xaa9), (0xaaa, 0xab1), (0xab2, 0xab4), (0xab5, 0xaba), (0xabc, 0xac6), (0xac7, 0xaca), (0xacb, 0xace), (0xad0, 0xad1), (0xae0, 0xae4), (0xae6, 0xaf2), (0xaf9, 0xb00), (0xb01, 0xb04), (0xb05, 0xb0d), (0xb0f, 0xb11), (0xb13, 0xb29), (0xb2a, 0xb31), (0xb32, 0xb34), (0xb35, 0xb3a), (0xb3c, 0xb45), (0xb47, 0xb49), (0xb4b, 0xb4e), (0xb55, 0xb58), (0xb5c, 0xb5e), (0xb5f, 0xb64), (0xb66, 0xb78), (0xb82, 0xb84), (0xb85, 0xb8b), (0xb8e, 0xb91), (0xb92, 0xb96), (0xb99, 0xb9b), (0xb9c, 0xb9d), (0xb9e, 0xba0), (0xba3, 0xba5), (0xba8, 0xbab), (0xbae, 0xbba), (0xbbe, 0xbc3), (0xbc6, 0xbc9), (0xbca, 0xbce), (0xbd0, 0xbd1), (0xbd7, 0xbd8), (0xbe6, 0xbfb), (0xc00, 0xc0d), (0xc0e, 0xc11), (0xc12, 0xc29), (0xc2a, 0xc3a), (0xc3d, 0xc45), (0xc46, 0xc49), (0xc4a, 0xc4e), (0xc55, 0xc57), (0xc58, 0xc5b), (0xc60, 0xc64), (0xc66, 0xc70), (0xc77, 0xc8d), (0xc8e, 0xc91), (0xc92, 0xca9), (0xcaa, 0xcb4), (0xcb5, 0xcba), (0xcbc, 0xcc5), (0xcc6, 0xcc9), (0xcca, 0xcce), (0xcd5, 0xcd7), (0xcde, 0xcdf), (0xce0, 0xce4), (0xce6, 0xcf0), (0xcf1, 0xcf3), (0xd00, 0xd0d), (0xd0e, 0xd11), (0xd12, 0xd45), (0xd46, 0xd49), (0xd4a, 0xd50), (0xd54, 0xd64), (0xd66, 0xd80), (0xd81, 0xd84), (0xd85, 0xd97), (0xd9a, 0xdb2), (0xdb3, 0xdbc), (0xdbd, 0xdbe), (0xdc0, 0xdc7), (0xdca, 0xdcb), (0xdcf, 0xdd5), (0xdd6, 0xdd7), (0xdd8, 0xde0), (0xde6, 0xdf0), (0xdf2, 0xdf5), (0xe01, 0xe3b), (0xe3f, 0xe5c), (0xe81, 0xe83), (0xe84, 0xe85), (0xe86, 0xe8b), (0xe8c, 0xea4), (0xea5, 0xea6), (0xea7, 0xebe), (0xec0, 0xec5), (0xec6, 0xec7), (0xec8, 0xece), (0xed0, 0xeda), (0xedc, 0xee0), (0xf00, 0xf48), (0xf49, 0xf6d), (0xf71, 0xf98), (0xf99, 0xfbd), (0xfbe, 0xfcd), (0xfce, 0xfdb), (0x1000, 0x10c6), (0x10c7, 0x10c8), (0x10cd, 0x10ce), (0x10d0, 0x1249), (0x124a, 0x124e), (0x1250, 0x1257), (0x1258, 0x1259), (0x125a, 0x125e), (0x1260, 0x1289), (0x128a, 0x128e), (0x1290, 0x12b1), (0x12b2, 0x12b6), (0x12b8, 0x12bf), (0x12c0, 0x12c1), (0x12c2, 0x12c6), (0x12c8, 0x12d7), (0x12d8, 0x1311), (0x1312, 0x1316), (0x1318, 0x135b), (0x135d, 0x137d), (0x1380, 0x139a), (0x13a0, 0x13f6), (0x13f8, 0x13fe), (0x1400, 0x1680), (0x1681, 0x169d), (0x16a0, 0x16f9), (0x1700, 0x170d), (0x170e, 0x1715), (0x1720, 0x1737), (0x1740, 0x1754), (0x1760, 0x176d), (0x176e, 0x1771), (0x1772, 0x1774), (0x1780, 0x17de), (0x17e0, 0x17ea), (0x17f0, 0x17fa), (0x1800, 0x180e), (0x1810, 0x181a), (0x1820, 0x1879), (0x1880, 0x18ab), (0x18b0, 0x18f6), (0x1900, 0x191f), (0x1920, 0x192c), (0x1930, 0x193c), (0x1940, 0x1941), (0x1944, 0x196e), (0x1970, 0x1975), (0x1980, 0x19ac), (0x19b0, 0x19ca), (0x19d0, 0x19db), (0x19de, 0x1a1c), (0x1a1e, 0x1a5f), (0x1a60, 0x1a7d), (0x1a7f, 0x1a8a), (0x1a90, 0x1a9a), (0x1aa0, 0x1aae), (0x1ab0, 0x1ac1), (0x1b00, 0x1b4c), (0x1b50, 0x1b7d), (0x1b80, 0x1bf4), (0x1bfc, 0x1c38), (0x1c3b, 0x1c4a), (0x1c4d, 0x1c89), (0x1c90, 0x1cbb), (0x1cbd, 0x1cc8), (0x1cd0, 0x1cfb), (0x1d00, 0x1dfa), (0x1dfb, 0x1f16), (0x1f18, 0x1f1e), (0x1f20, 0x1f46), (0x1f48, 0x1f4e), (0x1f50, 0x1f58), (0x1f59, 0x1f5a), (0x1f5b, 0x1f5c), (0x1f5d, 0x1f5e), (0x1f5f, 0x1f7e), (0x1f80, 0x1fb5), (0x1fb6, 0x1fc5), (0x1fc6, 0x1fd4), (0x1fd6, 0x1fdc), (0x1fdd, 0x1ff0), (0x1ff2, 0x1ff5), (0x1ff6, 0x1fff), (0x2010, 0x2028), (0x2030, 0x205f), (0x2070, 0x2072), (0x2074, 0x208f), (0x2090, 0x209d), (0x20a0, 0x20c0), (0x20d0, 0x20f1), (0x2100, 0x218c), (0x2190, 0x2427), (0x2440, 0x244b), (0x2460, 0x2b74), (0x2b76, 0x2b96), (0x2b97, 0x2c2f), (0x2c30, 0x2c5f), (0x2c60, 0x2cf4), (0x2cf9, 0x2d26), (0x2d27, 0x2d28), (0x2d2d, 0x2d2e), (0x2d30, 0x2d68), (0x2d6f, 0x2d71), (0x2d7f, 0x2d97), (0x2da0, 0x2da7), (0x2da8, 0x2daf), (0x2db0, 0x2db7), (0x2db8, 0x2dbf), (0x2dc0, 0x2dc7), (0x2dc8, 0x2dcf), (0x2dd0, 0x2dd7), (0x2dd8, 0x2ddf), (0x2de0, 0x2e53), (0x2e80, 0x2e9a), (0x2e9b, 0x2ef4), (0x2f00, 0x2fd6), (0x2ff0, 0x2ffc), (0x3001, 0x3040), (0x3041, 0x3097), (0x3099, 0x3100), (0x3105, 0x3130), (0x3131, 0x318f), (0x3190, 0x31e4), (0x31f0, 0x321f), (0x3220, 0x9ffd), (0xa000, 0xa48d), (0xa490, 0xa4c7), (0xa4d0, 0xa62c), (0xa640, 0xa6f8), (0xa700, 0xa7c0), (0xa7c2, 0xa7cb), (0xa7f5, 0xa82d), (0xa830, 0xa83a), (0xa840, 0xa878), (0xa880, 0xa8c6), (0xa8ce, 0xa8da), (0xa8e0, 0xa954), (0xa95f, 0xa97d), (0xa980, 0xa9ce), (0xa9cf, 0xa9da), (0xa9de, 0xa9ff), (0xaa00, 0xaa37), (0xaa40, 0xaa4e), (0xaa50, 0xaa5a), (0xaa5c, 0xaac3), (0xaadb, 0xaaf7), (0xab01, 0xab07), (0xab09, 0xab0f), (0xab11, 0xab17), (0xab20, 0xab27), (0xab28, 0xab2f), (0xab30, 0xab6c), (0xab70, 0xabee), (0xabf0, 0xabfa), (0xac00, 0xd7a4), (0xd7b0, 0xd7c7), (0xd7cb, 0xd7fc), (0xf900, 0xfa6e), (0xfa70, 0xfada), (0xfb00, 0xfb07), (0xfb13, 0xfb18), (0xfb1d, 0xfb37), (0xfb38, 0xfb3d), (0xfb3e, 0xfb3f), (0xfb40, 0xfb42), (0xfb43, 0xfb45), (0xfb46, 0xfbc2), (0xfbd3, 0xfd40), (0xfd50, 0xfd90), (0xfd92, 0xfdc8), (0xfdf0, 0xfdfe), (0xfe00, 0xfe1a), (0xfe20, 0xfe53), (0xfe54, 0xfe67), (0xfe68, 0xfe6c), (0xfe70, 0xfe75), (0xfe76, 0xfefd), (0xff01, 0xffbf), (0xffc2, 0xffc8), (0xffca, 0xffd0), (0xffd2, 0xffd8), (0xffda, 0xffdd), (0xffe0, 0xffe7), (0xffe8, 0xffef), (0xfffc, 0xfffe), (0x10000, 0x1000c), (0x1000d, 0x10027), (0x10028, 0x1003b), (0x1003c, 0x1003e), (0x1003f, 0x1004e), (0x10050, 0x1005e), (0x10080, 0x100fb), (0x10100, 0x10103), (0x10107, 0x10134), (0x10137, 0x1018f), (0x10190, 0x1019d), (0x101a0, 0x101a1), (0x101d0, 0x101fe), (0x10280, 0x1029d), (0x102a0, 0x102d1), (0x102e0, 0x102fc), (0x10300, 0x10324), (0x1032d, 0x1034b), (0x10350, 0x1037b), (0x10380, 0x1039e), (0x1039f, 0x103c4), (0x103c8, 0x103d6), (0x10400, 0x1049e), (0x104a0, 0x104aa), (0x104b0, 0x104d4), (0x104d8, 0x104fc), (0x10500, 0x10528), (0x10530, 0x10564), (0x1056f, 0x10570), (0x10600, 0x10737), (0x10740, 0x10756), (0x10760, 0x10768), (0x10800, 0x10806), (0x10808, 0x10809), (0x1080a, 0x10836), (0x10837, 0x10839), (0x1083c, 0x1083d), (0x1083f, 0x10856), (0x10857, 0x1089f), (0x108a7, 0x108b0), (0x108e0, 0x108f3), (0x108f4, 0x108f6), (0x108fb, 0x1091c), (0x1091f, 0x1093a), (0x1093f, 0x10940), (0x10980, 0x109b8), (0x109bc, 0x109d0), (0x109d2, 0x10a04), (0x10a05, 0x10a07), (0x10a0c, 0x10a14), (0x10a15, 0x10a18), (0x10a19, 0x10a36), (0x10a38, 0x10a3b), (0x10a3f, 0x10a49), (0x10a50, 0x10a59), (0x10a60, 0x10aa0), (0x10ac0, 0x10ae7), (0x10aeb, 0x10af7), (0x10b00, 0x10b36), (0x10b39, 0x10b56), (0x10b58, 0x10b73), (0x10b78, 0x10b92), (0x10b99, 0x10b9d), (0x10ba9, 0x10bb0), (0x10c00, 0x10c49), (0x10c80, 0x10cb3), (0x10cc0, 0x10cf3), (0x10cfa, 0x10d28), (0x10d30, 0x10d3a), (0x10e60, 0x10e7f), (0x10e80, 0x10eaa), (0x10eab, 0x10eae), (0x10eb0, 0x10eb2), (0x10f00, 0x10f28), (0x10f30, 0x10f5a), (0x10fb0, 0x10fcc), (0x10fe0, 0x10ff7), (0x11000, 0x1104e), (0x11052, 0x11070), (0x1107f, 0x110bd), (0x110be, 0x110c2), (0x110d0, 0x110e9), (0x110f0, 0x110fa), (0x11100, 0x11135), (0x11136, 0x11148), (0x11150, 0x11177), (0x11180, 0x111e0), (0x111e1, 0x111f5), (0x11200, 0x11212), (0x11213, 0x1123f), (0x11280, 0x11287), (0x11288, 0x11289), (0x1128a, 0x1128e), (0x1128f, 0x1129e), (0x1129f, 0x112aa), (0x112b0, 0x112eb), (0x112f0, 0x112fa), (0x11300, 0x11304), (0x11305, 0x1130d), (0x1130f, 0x11311), (0x11313, 0x11329), (0x1132a, 0x11331), (0x11332, 0x11334), (0x11335, 0x1133a), (0x1133b, 0x11345), (0x11347, 0x11349), (0x1134b, 0x1134e), (0x11350, 0x11351), (0x11357, 0x11358), (0x1135d, 0x11364), (0x11366, 0x1136d), (0x11370, 0x11375), (0x11400, 0x1145c), (0x1145d, 0x11462), (0x11480, 0x114c8), (0x114d0, 0x114da), (0x11580, 0x115b6), (0x115b8, 0x115de), (0x11600, 0x11645), (0x11650, 0x1165a), (0x11660, 0x1166d), (0x11680, 0x116b9), (0x116c0, 0x116ca), (0x11700, 0x1171b), (0x1171d, 0x1172c), (0x11730, 0x11740), (0x11800, 0x1183c), (0x118a0, 0x118f3), (0x118ff, 0x11907), (0x11909, 0x1190a), (0x1190c, 0x11914), (0x11915, 0x11917), (0x11918, 0x11936), (0x11937, 0x11939), (0x1193b, 0x11947), (0x11950, 0x1195a), (0x119a0, 0x119a8), (0x119aa, 0x119d8), (0x119da, 0x119e5), (0x11a00, 0x11a48), (0x11a50, 0x11aa3), (0x11ac0, 0x11af9), (0x11c00, 0x11c09), (0x11c0a, 0x11c37), (0x11c38, 0x11c46), (0x11c50, 0x11c6d), (0x11c70, 0x11c90), (0x11c92, 0x11ca8), (0x11ca9, 0x11cb7), (0x11d00, 0x11d07), (0x11d08, 0x11d0a), (0x11d0b, 0x11d37), (0x11d3a, 0x11d3b), (0x11d3c, 0x11d3e), (0x11d3f, 0x11d48), (0x11d50, 0x11d5a), (0x11d60, 0x11d66), (0x11d67, 0x11d69), (0x11d6a, 0x11d8f), (0x11d90, 0x11d92), (0x11d93, 0x11d99), (0x11da0, 0x11daa), (0x11ee0, 0x11ef9), (0x11fb0, 0x11fb1), (0x11fc0, 0x11ff2), (0x11fff, 0x1239a), (0x12400, 0x1246f), (0x12470, 0x12475), (0x12480, 0x12544), (0x13000, 0x1342f), (0x14400, 0x14647), (0x16800, 0x16a39), (0x16a40, 0x16a5f), (0x16a60, 0x16a6a), (0x16a6e, 0x16a70), (0x16ad0, 0x16aee), (0x16af0, 0x16af6), (0x16b00, 0x16b46), (0x16b50, 0x16b5a), (0x16b5b, 0x16b62), (0x16b63, 0x16b78), (0x16b7d, 0x16b90), (0x16e40, 0x16e9b), (0x16f00, 0x16f4b), (0x16f4f, 0x16f88), (0x16f8f, 0x16fa0), (0x16fe0, 0x16fe5), (0x16ff0, 0x16ff2), (0x17000, 0x187f8), (0x18800, 0x18cd6), (0x18d00, 0x18d09), (0x1b000, 0x1b11f), (0x1b150, 0x1b153), (0x1b164, 0x1b168), (0x1b170, 0x1b2fc), (0x1bc00, 0x1bc6b), (0x1bc70, 0x1bc7d), (0x1bc80, 0x1bc89), (0x1bc90, 0x1bc9a), (0x1bc9c, 0x1bca0), (0x1d000, 0x1d0f6), (0x1d100, 0x1d127), (0x1d129, 0x1d173), (0x1d17b, 0x1d1e9), (0x1d200, 0x1d246), (0x1d2e0, 0x1d2f4), (0x1d300, 0x1d357), (0x1d360, 0x1d379), (0x1d400, 0x1d455), (0x1d456, 0x1d49d), (0x1d49e, 0x1d4a0), (0x1d4a2, 0x1d4a3), (0x1d4a5, 0x1d4a7), (0x1d4a9, 0x1d4ad), (0x1d4ae, 0x1d4ba), (0x1d4bb, 0x1d4bc), (0x1d4bd, 0x1d4c4), (0x1d4c5, 0x1d506), (0x1d507, 0x1d50b), (0x1d50d, 0x1d515), (0x1d516, 0x1d51d), (0x1d51e, 0x1d53a), (0x1d53b, 0x1d53f), (0x1d540, 0x1d545), (0x1d546, 0x1d547), (0x1d54a, 0x1d551), (0x1d552, 0x1d6a6), (0x1d6a8, 0x1d7cc), (0x1d7ce, 0x1da8c), (0x1da9b, 0x1daa0), (0x1daa1, 0x1dab0), (0x1e000, 0x1e007), (0x1e008, 0x1e019), (0x1e01b, 0x1e022), (0x1e023, 0x1e025), (0x1e026, 0x1e02b), (0x1e100, 0x1e12d), (0x1e130, 0x1e13e), (0x1e140, 0x1e14a), (0x1e14e, 0x1e150), (0x1e2c0, 0x1e2fa), (0x1e2ff, 0x1e300), (0x1e800, 0x1e8c5), (0x1e8c7, 0x1e8d7), (0x1e900, 0x1e94c), (0x1e950, 0x1e95a), (0x1e95e, 0x1e960), (0x1ec71, 0x1ecb5), (0x1ed01, 0x1ed3e), (0x1ee00, 0x1ee04), (0x1ee05, 0x1ee20), (0x1ee21, 0x1ee23), (0x1ee24, 0x1ee25), (0x1ee27, 0x1ee28), (0x1ee29, 0x1ee33), (0x1ee34, 0x1ee38), (0x1ee39, 0x1ee3a), (0x1ee3b, 0x1ee3c), (0x1ee42, 0x1ee43), (0x1ee47, 0x1ee48), (0x1ee49, 0x1ee4a), (0x1ee4b, 0x1ee4c), (0x1ee4d, 0x1ee50), (0x1ee51, 0x1ee53), (0x1ee54, 0x1ee55), (0x1ee57, 0x1ee58), (0x1ee59, 0x1ee5a), (0x1ee5b, 0x1ee5c), (0x1ee5d, 0x1ee5e), (0x1ee5f, 0x1ee60), (0x1ee61, 0x1ee63), (0x1ee64, 0x1ee65), (0x1ee67, 0x1ee6b), (0x1ee6c, 0x1ee73), (0x1ee74, 0x1ee78), (0x1ee79, 0x1ee7d), (0x1ee7e, 0x1ee7f), (0x1ee80, 0x1ee8a), (0x1ee8b, 0x1ee9c), (0x1eea1, 0x1eea4), (0x1eea5, 0x1eeaa), (0x1eeab, 0x1eebc), (0x1eef0, 0x1eef2), (0x1f000, 0x1f02c), (0x1f030, 0x1f094), (0x1f0a0, 0x1f0af), (0x1f0b1, 0x1f0c0), (0x1f0c1, 0x1f0d0), (0x1f0d1, 0x1f0f6), (0x1f100, 0x1f1ae), (0x1f1e6, 0x1f203), (0x1f210, 0x1f23c), (0x1f240, 0x1f249), (0x1f250, 0x1f252), (0x1f260, 0x1f266), (0x1f300, 0x1f6d8), (0x1f6e0, 0x1f6ed), (0x1f6f0, 0x1f6fd), (0x1f700, 0x1f774), (0x1f780, 0x1f7d9), (0x1f7e0, 0x1f7ec), (0x1f800, 0x1f80c), (0x1f810, 0x1f848), (0x1f850, 0x1f85a), (0x1f860, 0x1f888), (0x1f890, 0x1f8ae), (0x1f8b0, 0x1f8b2), (0x1f900, 0x1f979), (0x1f97a, 0x1f9cc), (0x1f9cd, 0x1fa54), (0x1fa60, 0x1fa6e), (0x1fa70, 0x1fa75), (0x1fa78, 0x1fa7b), (0x1fa80, 0x1fa87), (0x1fa90, 0x1faa9), (0x1fab0, 0x1fab7), (0x1fac0, 0x1fac3), (0x1fad0, 0x1fad7), (0x1fb00, 0x1fb93), (0x1fb94, 0x1fbcb), (0x1fbf0, 0x1fbfa), (0x20000, 0x2a6de), (0x2a700, 0x2b735), (0x2b740, 0x2b81e), (0x2b820, 0x2cea2), (0x2ceb0, 0x2ebe1), (0x2f800, 0x2fa1e), (0x30000, 0x3134b), (0xe0100, 0xe01f0), )),  # 15
        Generator._charset(((0x20, 0x27), (0x28, 0x3c), (0x3d, 0x7f), (0xa1, 0xad), (0xae, 0x378), (0x37a, 0x380), (0x384, 0x38b), (0x38c, 0x38d), (0x38e, 0x3a2), (0x3a3, 0x530), (0x531, 0x557), (0x559, 0x58b), (0x58d, 0x590), (0x591, 0x5c8), (0x5d0, 0x5eb), (0x5ef, 0x5f5), (0x606, 0x61c), (0x61e, 0x6dd), (0x6de, 0x70e), (0x710, 0x74b), (0x74d, 0x7b2), (0x7c0, 0x7fb), (0x7fd, 0x82e), (0x830, 0x83f), (0x840, 0x85c), (0x85e, 0x85f), (0x860, 0x86b), (0x8a0, 0x8b5), (0x8b6, 0x8c8), (0x8d3, 0x8e2), (0x8e3, 0x984), (0x985, 0x98d), (0x98f, 0x991), (0x993, 0x9a9), (0x9aa, 0x9b1), (0x9b2, 0x9b3), (0x9b6, 0x9ba), (0x9bc, 0x9c5), (0x9c7, 0x9c9), (0x9cb, 0x9cf), (0x9d7, 0x9d8), (0x9dc, 0x9de), (0x9df, 0x9e4), (0x9e6, 0x9ff), (0xa01, 0xa04), (0xa05, 0xa0b), (0xa0f, 0xa11), (0xa13, 0xa29), (0xa2a, 0xa31), (0xa32, 0xa34), (0xa35, 0xa37), (0xa38, 0xa3a), (0xa3c, 0xa3d), (0xa3e, 0xa43), (0xa47, 0xa49), (0xa4b, 0xa4e), (0xa51, 0xa52), (0xa59, 0xa5d), (0xa5e, 0xa5f), (0xa66, 0xa77), (0xa81, 0xa84), (0xa85, 0xa8e), (0xa8f, 0xa92), (0xa93, 0xaa9), (0xaaa, 0xab1), (0xab2, 0xab4), (0xab5, 0xaba), (0xabc, 0xac6), (0xac7, 0xaca), (0xacb, 0xace), (0xad0, 0xad1), (0xae0, 0xae4), (0xae6, 0xaf2), (0xaf9, 0xb00), (0xb01, 0xb04), (0xb05, 0xb0d), (0xb0f, 0xb11), (0xb13, 0xb29), (0xb2a, 0xb31), (0xb32, 0xb34), (0xb35, 0xb3a), (0xb3c, 0xb45), (0xb47, 0xb49), (0xb4b, 0xb4e), (0xb55, 0xb58), (0xb5c, 0xb5e), (0xb5f, 0xb64), (0xb66, 0xb78), (0xb82, 0xb84), (0xb85, 0xb8b), (0xb8e, 0xb91), (0xb92, 0xb96), (0xb99, 0xb9b), (0xb9c, 0xb9d), (0xb9e, 0xba0), (0xba3, 0xba5), (0xba8, 0xbab), (0xbae, 0xbba), (0xbbe, 0xbc3), (0xbc6, 0xbc9), (0xbca, 0xbce), (0xbd0, 0xbd1), (0xbd7, 0xbd8), (0xbe6, 0xbfb), (0xc00, 0xc0d), (0xc0e, 0xc11), (0xc12, 0xc29), (0xc2a, 0xc3a), (0xc3d, 0xc45), (0xc46, 0xc49), (0xc4a, 0xc4e), (0xc55, 0xc57), (0xc58, 0xc5b), (0xc60, 0xc64), (0xc66, 0xc70), (0xc77, 0xc8d), (0xc8e, 0xc91), (0xc92, 0xca9), (0xcaa, 0xcb4), (0xcb5, 0xcba), (0xcbc, 0xcc5), (0xcc6, 0xcc9), (0xcca, 0xcce), (0xcd5, 0xcd7), (0xcde, 0xcdf), (0xce0, 0xce4), (0xce6, 0xcf0), (0xcf1, 0xcf3), (0xd00, 0xd0d), (0xd0e, 0xd11), (0xd12, 0xd45), (0xd46, 0xd49), (0xd4a, 0xd50), (0xd54, 0xd64), (0xd66, 0xd80), (0xd81, 0xd84), (0xd85, 0xd97), (0xd9a, 0xdb2), (0xdb3, 0xdbc), (0xdbd, 0xdbe), (0xdc0, 0xdc7), (0xdca, 0xdcb), (0xdcf, 0xdd5), (0xdd6, 0xdd7), (0xdd8, 0xde0), (0xde6, 0xdf0), (0xdf2, 0xdf5), (0xe01, 0xe3b), (0xe3f, 0xe5c), (0xe81, 0xe83), (0xe84, 0xe85), (0xe86, 0xe8b), (0xe8c, 0xea4), (0xea5, 0xea6), (0xea7, 0xebe), (0xec0, 0xec5), (0xec6, 0xec7), (0xec8, 0xece), (0xed0, 0xeda), (0xedc, 0xee0), (0xf00, 0xf48), (0xf49, 0xf6d), (0xf71, 0xf98), (0xf99, 0xfbd), (0xfbe, 0xfcd), (0xfce, 0xfdb), (0x1000, 0x10c6), (0x10c7, 0x10c8), (0x10cd, 0x10ce), (0x10d0, 0x1249), (0x124a, 0x124e), (0x1250, 0x1257), (0x1258, 0x1259), (0x125a, 0x125e), (0x1260, 0x1289), (0x128a, 0x128e), (0x1290, 0x12b1), (0x12b2, 0x12b6), (0x12b8, 0x12bf), (0x12c0, 0x12c1), (0x12c2, 0x12c6), (0x12c8, 0x12d7), (0x12d8, 0x1311), (0x1312, 0x1316), (0x1318, 0x135b), (0x135d, 0x137d), (0x1380, 0x139a), (0x13a0, 0x13f6), (0x13f8, 0x13fe), (0x1400, 0x1680), (0x1681, 0x169d), (0x16a0, 0x16f9), (0x1700, 0x170d), (0x170e, 0x1715), (0x1720, 0x1737), (0x1740, 0x1754), (0x1760, 0x176d), (0x176e, 0x1771), (0x1772, 0x1774), (0x1780, 0x17de), (0x17e0, 0x17ea), (0x17f0, 0x17fa), (0x1800, 0x180e), (0x1810, 0x181a), (0x1820, 0x1879), (0x1880, 0x18ab), (0x18b0, 0x18f6), (0x1900, 0x191f), (0x1920, 0x192c), (0x1930, 0x193c), (0x1940, 0x1941), (0x1944, 0x196e), (0x1970, 0x1975), (0x1980, 0x19ac), (0x19b0, 0x19ca), (0x19d0, 0x19db), (0x19de, 0x1a1c), (0x1a1e, 0x1a5f), (0x1a60, 0x1a7d), (0x1a7f, 0x1a8a), (0x1a90, 0x1a9a), (0x1aa0, 0x1aae), (0x1ab0, 0x1ac1), (0x1b00, 0x1b4c), (0x1b50, 0x1b7d), (0x1b80, 0x1bf4), (0x1bfc, 0x1c38), (0x1c3b, 0x1c4a), (0x1c4d, 0x1c89), (0x1c90, 0x1cbb), (0x1cbd, 0x1cc8), (0x1cd0, 0x1cfb), (0x1d00, 0x1dfa), (0x1dfb, 0x1f16), (0x1f18, 0x1f1e), (0x1f20, 0x1f46), (0x1f48, 0x1f4e), (0x1f50, 0x1f58), (0x1f59, 0x1f5a), (0x1f5b, 0x1f5c), (0x1f5d, 0x1f5e), (0x1f5f, 0x1f7e), (0x1f80, 0x1fb5), (0x1fb6, 0x1fc5), (0x1fc6, 0x1fd4), (0x1fd6, 0x1fdc), (0x1fdd, 0x1ff0), (0x1ff2, 0x1ff5), (0x1ff6, 0x1fff), (0x2010, 0x2028), (0x2030, 0x205f), (0x2070, 0x2072), (0x2074, 0x208f), (0x2090, 0x209d), (0x20a0, 0x20c0), (0x20d0, 0x20f1), (0x2100, 0x218c), (0x2190, 0x2427), (0x2440, 0x244b), (0x2460, 0x2b74), (0x2b76, 0x2b96), (0x2b97, 0x2c2f), (0x2c30, 0x2c5f), (0x2c60, 0x2cf4), (0x2cf9, 0x2d26), (0x2d27, 0x2d28), (0x2d2d, 0x2d2e), (0x2d30, 0x2d68), (0x2d6f, 0x2d71), (0x2d7f, 0x2d97), (0x2da0, 0x2da7), (0x2da8, 0x2daf), (0x2db0, 0x2db7), (0x2db8, 0x2dbf), (0x2dc0, 0x2dc7), (0x2dc8, 0x2dcf), (0x2dd0, 0x2dd7), (0x2dd8, 0x2ddf), (0x2de0, 0x2e53), (0x2e80, 0x2e9a), (0x2e9b, 0x2ef4), (0x2f00, 0x2fd6), (0x2ff0, 0x2ffc), (0x3001, 0x3040), (0x3041, 0x3097), (0x3099, 0x3100), (0x3105, 0x3130), (0x3131, 0x318f), (0x3190, 0x31e4), (0x31f0, 0x321f), (0x3220, 0x9ffd), (0xa000, 0xa48d), (0xa490, 0xa4c7), (0xa4d0, 0xa62c), (0xa640, 0xa6f8), (0xa700, 0xa7c0), (0xa7c2, 0xa7cb), (0xa7f5, 0xa82d), (0xa830, 0xa83a), (0xa840, 0xa878), (0xa880, 0xa8c6), (0xa8ce, 0xa8da), (0xa8e0, 0xa954), (0xa95f, 0xa97d), (0xa980, 0xa9ce), (0xa9cf, 0xa9da), (0xa9de, 0xa9ff), (0xaa00, 0xaa37), (0xaa40, 0xaa4e), (0xaa50, 0xaa5a), (0xaa5c, 0xaac3), (0xaadb, 0xaaf7), (0xab01, 0xab07), (0xab09, 0xab0f), (0xab11, 0xab17), (0xab20, 0xab27), (0xab28, 0xab2f), (0xab30, 0xab6c), (0xab70, 0xabee), (0xabf0, 0xabfa), (0xac00, 0xd7a4), (0xd7b0, 0xd7c7), (0xd7cb, 0xd7fc), (0xf900, 0xfa6e), (0xfa70, 0xfada), (0xfb00, 0xfb07), (0xfb13, 0xfb18), (0xfb1d, 0xfb37), (0xfb38, 0xfb3d), (0xfb3e, 0xfb3f), (0xfb40, 0xfb42), (0xfb43, 0xfb45), (0xfb46, 0xfbc2), (0xfbd3, 0xfd40), (0xfd50, 0xfd90), (0xfd92, 0xfdc8), (0xfdf0, 0xfdfe), (0xfe00, 0xfe1a), (0xfe20, 0xfe53), (0xfe54, 0xfe67), (0xfe68, 0xfe6c), (0xfe70, 0xfe75), (0xfe76, 0xfefd), (0xff01, 0xffbf), (0xffc2, 0xffc8), (0xffca, 0xffd0), (0xffd2, 0xffd8), (0xffda, 0xffdd), (0xffe0, 0xffe7), (0xffe8, 0xffef), (0xfffc, 0xfffe), (0x10000, 0x1000c), (0x1000d, 0x10027), (0x10028, 0x1003b), (0x1003c, 0x1003e), (0x1003f, 0x1004e), (0x10050, 0x1005e), (0x10080, 0x100fb), (0x10100, 0x10103), (0x10107, 0x10134), (0x10137, 0x1018f), (0x10190, 0x1019d), (0x101a0, 0x101a1), (0x101d0, 0x101fe), (0x10280, 0x1029d), (0x102a0, 0x102d1), (0x102e0, 0x102fc), (0x10300, 0x10324), (0x1032d, 0x1034b), (0x10350, 0x1037b), (0x10380, 0x1039e), (0x1039f, 0x103c4), (0x103c8, 0x103d6), (0x10400, 0x1049e), (0x104a0, 0x104aa), (0x104b0, 0x104d4), (0x104d8, 0x104fc), (0x10500, 0x10528), (0x10530, 0x10564), (0x1056f, 0x10570), (0x10600, 0x10737), (0x10740, 0x10756), (0x10760, 0x10768), (0x10800, 0x10806), (0x10808, 0x10809), (0x1080a, 0x10836), (0x10837, 0x10839), (0x1083c, 0x1083d), (0x1083f, 0x10856), (0x10857, 0x1089f), (0x108a7, 0x108b0), (0x108e0, 0x108f3), (0x108f4, 0x108f6), (0x108fb, 0x1091c), (0x1091f, 0x1093a), (0x1093f, 0x10940), (0x10980, 0x109b8), (0x109bc, 0x109d0), (0x109d2, 0x10a04), (0x10a05, 0x10a07), (0x10a0c, 0x10a14), (0x10a15, 0x10a18), (0x10a19, 0x10a36), (0x10a38, 0x10a3b), (0x10a3f, 0x10a49), (0x10a50, 0x10a59), (0x10a60, 0x10aa0), (0x10ac0, 0x10ae7), (0x10aeb, 0x10af7), (0x10b00, 0x10b36), (0x10b39, 0x10b56), (0x10b58, 0x10b73), (0x10b78, 0x10b92), (0x10b99, 0x10b9d), (0x10ba9, 0x10bb0), (0x10c00, 0x10c49), (0x10c80, 0x10cb3), (0x10cc0, 0x10cf3), (0x10cfa, 0x10d28), (0x10d30, 0x10d3a), (0x10e60, 0x10e7f), (0x10e80, 0x10eaa), (0x10eab, 0x10eae), (0x10eb0, 0x10eb2), (0x10f00, 0x10f28), (0x10f30, 0x10f5a), (0x10fb0, 0x10fcc), (0x10fe0, 0x10ff7), (0x11000, 0x1104e), (0x11052, 0x11070), (0x1107f, 0x110bd), (0x110be, 0x110c2), (0x110d0, 0x110e9), (0x110f0, 0x110fa), (0x11100, 0x11135), (0x11136, 0x11148), (0x11150, 0x11177), (0x11180, 0x111e0), (0x111e1, 0x111f5), (0x11200, 0x11212), (0x11213, 0x1123f), (0x11280, 0x11287), (0x11288, 0x11289), (0x1128a, 0x1128e), (0x1128f, 0x1129e), (0x1129f, 0x112aa), (0x112b0, 0x112eb), (0x112f0, 0x112fa), (0x11300, 0x11304), (0x11305, 0x1130d), (0x1130f, 0x11311), (0x11313, 0x11329), (0x1132a, 0x11331), (0x11332, 0x11334), (0x11335, 0x1133a), (0x1133b, 0x11345), (0x11347, 0x11349), (0x1134b, 0x1134e), (0x11350, 0x11351), (0x11357, 0x11358), (0x1135d, 0x11364), (0x11366, 0x1136d), (0x11370, 0x11375), (0x11400, 0x1145c), (0x1145d, 0x11462), (0x11480, 0x114c8), (0x114d0, 0x114da), (0x11580, 0x115b6), (0x115b8, 0x115de), (0x11600, 0x11645), (0x11650, 0x1165a), (0x11660, 0x1166d), (0x11680, 0x116b9), (0x116c0, 0x116ca), (0x11700, 0x1171b), (0x1171d, 0x1172c), (0x11730, 0x11740), (0x11800, 0x1183c), (0x118a0, 0x118f3), (0x118ff, 0x11907), (0x11909, 0x1190a), (0x1190c, 0x11914), (0x11915, 0x11917), (0x11918, 0x11936), (0x11937, 0x11939), (0x1193b, 0x11947), (0x11950, 0x1195a), (0x119a0, 0x119a8), (0x119aa, 0x119d8), (0x119da, 0x119e5), (0x11a00, 0x11a48), (0x11a50, 0x11aa3), (0x11ac0, 0x11af9), (0x11c00, 0x11c09), (0x11c0a, 0x11c37), (0x11c38, 0x11c46), (0x11c50, 0x11c6d), (0x11c70, 0x11c90), (0x11c92, 0x11ca8), (0x11ca9, 0x11cb7), (0x11d00, 0x11d07), (0x11d08, 0x11d0a), (0x11d0b, 0x11d37), (0x11d3a, 0x11d3b), (0x11d3c, 0x11d3e), (0x11d3f, 0x11d48), (0x11d50, 0x11d5a), (0x11d60, 0x11d66), (0x11d67, 0x11d69), (0x11d6a, 0x11d8f), (0x11d90, 0x11d92), (0x11d93, 0x11d99), (0x11da0, 0x11daa), (0x11ee0, 0x11ef9), (0x11fb0, 0x11fb1), (0x11fc0, 0x11ff2), (0x11fff, 0x1239a), (0x12400, 0x1246f), (0x12470, 0x12475), (0x12480, 0x12544), (0x13000, 0x1342f), (0x14400, 0x14647), (0x16800, 0x16a39), (0x16a40, 0x16a5f), (0x16a60, 0x16a6a), (0x16a6e, 0x16a70), (0x16ad0, 0x16aee), (0x16af0, 0x16af6), (0x16b00, 0x16b46), (0x16b50, 0x16b5a), (0x16b5b, 0x16b62), (0x16b63, 0x16b78), (0x16b7d, 0x16b90), (0x16e40, 0x16e9b), (0x16f00, 0x16f4b), (0x16f4f, 0x16f88), (0x16f8f, 0x16fa0), (0x16fe0, 0x16fe5), (0x16ff0, 0x16ff2), (0x17000, 0x187f8), (0x18800, 0x18cd6), (0x18d00, 0x18d09), (0x1b000, 0x1b11f), (0x1b150, 0x1b153), (0x1b164, 0x1b168), (0x1b170, 0x1b2fc), (0x1bc00, 0x1bc6b), (0x1bc70, 0x1bc7d), (0x1bc80, 0x1bc89), (0x1bc90, 0x1bc9a), (0x1bc9c, 0x1bca0), (0x1d000, 0x1d0f6), (0x1d100, 0x1d127), (0x1d129, 0x1d173), (0x1d17b, 0x1d1e9), (0x1d200, 0x1d246), (0x1d2e0, 0x1d2f4), (0x1d300, 0x1d357), (0x1d360, 0x1d379), (0x1d400, 0x1d455), (0x1d456, 0x1d49d), (0x1d49e, 0x1d4a0), (0x1d4a2, 0x1d4a3), (0x1d4a5, 0x1d4a7), (0x1d4a9, 0x1d4ad), (0x1d4ae, 0x1d4ba), (0x1d4bb, 0x1d4bc), (0x1d4bd, 0x1d4c4), (0x1d4c5, 0x1d506), (0x1d507, 0x1d50b), (0x1d50d, 0x1d515), (0x1d516, 0x1d51d), (0x1d51e, 0x1d53a), (0x1d53b, 0x1d53f), (0x1d540, 0x1d545), (0x1d546, 0x1d547), (0x1d54a, 0x1d551), (0x1d552, 0x1d6a6), (0x1d6a8, 0x1d7cc), (0x1d7ce, 0x1da8c), (0x1da9b, 0x1daa0), (0x1daa1, 0x1dab0), (0x1e000, 0x1e007), (0x1e008, 0x1e019), (0x1e01b, 0x1e022), (0x1e023, 0x1e025), (0x1e026, 0x1e02b), (0x1e100, 0x1e12d), (0x1e130, 0x1e13e), (0x1e140, 0x1e14a), (0x1e14e, 0x1e150), (0x1e2c0, 0x1e2fa), (0x1e2ff, 0x1e300), (0x1e800, 0x1e8c5), (0x1e8c7, 0x1e8d7), (0x1e900, 0x1e94c), (0x1e950, 0x1e95a), (0x1e95e, 0x1e960), (0x1ec71, 0x1ecb5), (0x1ed01, 0x1ed3e), (0x1ee00, 0x1ee04), (0x1ee05, 0x1ee20), (0x1ee21, 0x1ee23), (0x1ee24, 0x1ee25), (0x1ee27, 0x1ee28), (0x1ee29, 0x1ee33), (0x1ee34, 0x1ee38), (0x1ee39, 0x1ee3a), (0x1ee3b, 0x1ee3c), (0x1ee42, 0x1ee43), (0x1ee47, 0x1ee48), (0x1ee49, 0x1ee4a), (0x1ee4b, 0x1ee4c), (0x1ee4d, 0x1ee50), (0x1ee51, 0x1ee53), (0x1ee54, 0x1ee55), (0x1ee57, 0x1ee58), (0x1ee59, 0x1ee5a), (0x1ee5b, 0x1ee5c), (0x1ee5d, 0x1ee5e), (0x1ee5f, 0x1ee60), (0x1ee61, 0x1ee63), (0x1ee64, 0x1ee65), (0x1ee67, 0x1ee6b), (0x1ee6c, 0x1ee73), (0x1ee74, 0x1ee78), (0x1ee79, 0x1ee7d), (0x1ee7e, 0x1ee7f), (0x1ee80, 0x1ee8a), (0x1ee8b, 0x1ee9c), (0x1eea1, 0x1eea4), (0x1eea5, 0x1eeaa), (0x1eeab, 0x1eebc), (0x1eef0, 0x1eef2), (0x1f000, 0x1f02c), (0x1f030, 0x1f094), (0x1f0a0, 0x1f0af), (0x1f0b1, 0x1f0c0), (0x1f0c1, 0x1f0d0), (0x1f0d1, 0x1f0f6), (0x1f100, 0x1f1ae), (0x1f1e6, 0x1f203), (0x1f210, 0x1f23c), (0x1f240, 0x1f249), (0x1f250, 0x1f252), (0x1f260, 0x1f266), (0x1f300, 0x1f6d8), (0x1f6e0, 0x1f6ed), (0x1f6f0, 0x1f6fd), (0x1f700, 0x1f774), (0x1f780, 0x1f7d9), (0x1f7e0, 0x1f7ec), (0x1f800, 0x1f80c), (0x1f810, 0x1f848), (0x1f850, 0x1f85a), (0x1f860, 0x1f888), (0x1f890, 0x1f8ae), (0x1f8b0, 0x1f8b2), (0x1f900, 0x1f979), (0x1f97a, 0x1f9cc), (0x1f9cd, 0x1fa54), (0x1fa60, 0x1fa6e), (0x1fa70, 0x1fa75), (0x1fa78, 0x1fa7b), (0x1fa80, 0x1fa87), (0x1fa90, 0x1faa9), (0x1fab0, 0x1fab7), (0x1fac0, 0x1fac3), (0x1fad0, 0x1fad7), (0x1fb00, 0x1fb93), (0x1fb94, 0x1fbcb), (0x1fbf0, 0x1fbfa), (0x20000, 0x2a6de), (0x2a700, 0x2b735), (0x2b740, 0x2b81e), (0x2b820, 0x2cea2), (0x2ceb0, 0x2ebe1), (0x2f800, 0x2fa1e), (0x30000, 0x3134b), (0xe0100, 0xe01f0), )),  # 16
    )

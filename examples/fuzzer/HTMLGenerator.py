# Generated by Grammarinator 19.3.post107+g6aeb737

import itertools

from math import inf
from grammarinator.runtime import *


from copy import deepcopy


def html_space_serializer(root):

    def _walk(node):
        nonlocal src
        for child in node.children:
            _walk(child)

        if isinstance(node, UnlexerRule) and node.src:
            src += node.src

        if (isinstance(node, UnparserRule) and
            node.name == 'htmlTagName' and node.right_sibling and node.right_sibling.name == 'htmlAttribute' or node.name == 'htmlAttribute') \
                or isinstance(node, UnlexerRule) and node.src and node.src.endswith(('<script', '<style', '<?xml')):
            src += ' '

    src = ''
    _walk(root)
    return src


class HTMLGenerator(Generator):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def style_sheet(self, parent=None):
        return UnlexerRule(src='', parent=parent)


    def _endOfHtmlElement(self):
        pass

    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def HTML_COMMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HTML_COMMENT', parent=parent)) as current:
            UnlexerRule(src='<!--', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='-->', parent=current)
            return current
    HTML_COMMENT.min_depth = 0

    def HTML_CONDITIONAL_COMMENT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HTML_CONDITIONAL_COMMENT', parent=parent)) as current:
            UnlexerRule(src='<![', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src=']>', parent=current)
            return current
    HTML_CONDITIONAL_COMMENT.min_depth = 0

    def XML_DECLARATION(self, parent=None):
        with RuleContext(self, UnlexerRule(name='XML_DECLARATION', parent=parent)) as current:
            UnlexerRule(src='<?xml', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='>', parent=current)
            return current
    XML_DECLARATION.min_depth = 0

    def CDATA(self, parent=None):
        with RuleContext(self, UnlexerRule(name='CDATA', parent=parent)) as current:
            UnlexerRule(src='<![CDATA[', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src=']]>', parent=current)
            return current
    CDATA.min_depth = 0

    def DTD(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DTD', parent=parent)) as current:
            UnlexerRule(src='<!', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='>', parent=current)
            return current
    DTD.min_depth = 0

    def SCRIPTLET(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCRIPTLET', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='<?', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
                    UnlexerRule(src='?>', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='<%', parent=current)
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 1, min=0, max=inf):
                            UnlexerRule(src=self._model.charset(current, 1, self._charsets[0]), parent=current)
                    UnlexerRule(src='%>', parent=current)
            return current
    SCRIPTLET.min_depth = 0

    def SEA_WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SEA_WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        if choice0 == 0:
                            UnlexerRule(src=' ', parent=current)
                        elif choice0 == 1:
                            UnlexerRule(src='\t', parent=current)
                        elif choice0 == 2:
                            if self._max_depth >= 0:
                                for _ in self._model.quantify(current, 1, min=0, max=1):
                                    UnlexerRule(src='\r', parent=current)
                            UnlexerRule(src='\n', parent=current)
            return current
    SEA_WS.min_depth = 0

    def SCRIPT_OPEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCRIPT_OPEN', parent=parent)) as current:
            UnlexerRule(src='<script', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='>', parent=current)
            return current
    SCRIPT_OPEN.min_depth = 0

    def STYLE_OPEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STYLE_OPEN', parent=parent)) as current:
            UnlexerRule(src='<style', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='>', parent=current)
            return current
    STYLE_OPEN.min_depth = 0

    def TAG_OPEN(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_OPEN', parent=parent)) as current:
            UnlexerRule(src='<', parent=current)
            return current
    TAG_OPEN.min_depth = 0

    def HTML_TEXT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HTML_TEXT', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    HTML_TEXT.min_depth = 0

    def TAG_CLOSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_CLOSE', parent=parent)) as current:
            UnlexerRule(src='>', parent=current)
            return current
    TAG_CLOSE.min_depth = 0

    def TAG_SLASH_CLOSE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_SLASH_CLOSE', parent=parent)) as current:
            UnlexerRule(src='/>', parent=current)
            return current
    TAG_SLASH_CLOSE.min_depth = 0

    def TAG_SLASH(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_SLASH', parent=parent)) as current:
            UnlexerRule(src='/', parent=current)
            return current
    TAG_SLASH.min_depth = 0

    def TAG_EQUALS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_EQUALS', parent=parent)) as current:
            UnlexerRule(src='=', parent=current)
            return current
    TAG_EQUALS.min_depth = 0

    def TAG_NAME(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_NAME', parent=parent)) as current:
            self.TAG_NameStartChar(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.TAG_NameChar(parent=current)
            return current
    TAG_NAME.min_depth = 1

    def TAG_WHITESPACE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_WHITESPACE', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    TAG_WHITESPACE.min_depth = 0

    def HEXDIGIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HEXDIGIT', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[3]), parent=current)
            return current
    HEXDIGIT.min_depth = 0

    def DIGIT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DIGIT', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[4]), parent=current)
            return current
    DIGIT.min_depth = 0

    def TAG_NameChar(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_NameChar', parent=parent)) as current:
            with AlternationContext(self, [1, 0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.TAG_NameStartChar(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='-', parent=current)
                elif choice0 == 2:
                    UnlexerRule(src='_', parent=current)
                elif choice0 == 3:
                    UnlexerRule(src='.', parent=current)
                elif choice0 == 4:
                    self.DIGIT(parent=current)
                elif choice0 == 5:
                    UnlexerRule(src='\u00B7', parent=current)
                elif choice0 == 6:
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[5]), parent=current)
                elif choice0 == 7:
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[6]), parent=current)
            return current
    TAG_NameChar.min_depth = 0

    def TAG_NameStartChar(self, parent=None):
        with RuleContext(self, UnlexerRule(name='TAG_NameStartChar', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[7]), parent=current)
                elif choice0 == 1:
                    UnlexerRule(src=self._model.charset(current, 1, self._charsets[8]), parent=current)
                elif choice0 == 2:
                    UnlexerRule(src=self._model.charset(current, 2, self._charsets[9]), parent=current)
                elif choice0 == 3:
                    UnlexerRule(src=self._model.charset(current, 3, self._charsets[10]), parent=current)
                elif choice0 == 4:
                    UnlexerRule(src=self._model.charset(current, 4, self._charsets[11]), parent=current)
                elif choice0 == 5:
                    UnlexerRule(src=self._model.charset(current, 5, self._charsets[12]), parent=current)
            return current
    TAG_NameStartChar.min_depth = 0

    def SCRIPT_BODY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCRIPT_BODY', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='</script>', parent=current)
            return current
    SCRIPT_BODY.min_depth = 0

    def SCRIPT_SHORT_BODY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SCRIPT_SHORT_BODY', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[0]), parent=current)
            UnlexerRule(src='</>', parent=current)
            return current
    SCRIPT_SHORT_BODY.min_depth = 0

    def STYLE_BODY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STYLE_BODY', parent=parent)) as current:
            current += self.style_sheet()
            UnlexerRule(src='</style>', parent=current)
            return current
    STYLE_BODY.min_depth = 0

    def STYLE_SHORT_BODY(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STYLE_SHORT_BODY', parent=parent)) as current:
            current += self.style_sheet()
            UnlexerRule(src='</>', parent=current)
            return current
    STYLE_SHORT_BODY.min_depth = 0

    def ATTVALUE_VALUE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATTVALUE_VALUE', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[13]), parent=current)
            self.ATTRIBUTE(parent=current)
            return current
    ATTVALUE_VALUE.min_depth = 2

    def ATTRIBUTE(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATTRIBUTE', parent=parent)) as current:
            with AlternationContext(self, [1, 1, 2, 1, 1], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.DOUBLE_QUOTE_STRING, self.SINGLE_QUOTE_STRING, self.ATTCHARS, self.HEXCHARS, self.DECCHARS][choice0](parent=current)
            return current
    ATTRIBUTE.min_depth = 1

    def ATTCHAR(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATTCHAR', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='-', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='_', parent=current)
                elif choice0 == 2:
                    UnlexerRule(src='.', parent=current)
                elif choice0 == 3:
                    UnlexerRule(src='/', parent=current)
                elif choice0 == 4:
                    UnlexerRule(src='+', parent=current)
                elif choice0 == 5:
                    UnlexerRule(src=',', parent=current)
                elif choice0 == 6:
                    UnlexerRule(src='?', parent=current)
                elif choice0 == 7:
                    UnlexerRule(src='=', parent=current)
                elif choice0 == 8:
                    UnlexerRule(src=':', parent=current)
                elif choice0 == 9:
                    UnlexerRule(src=';', parent=current)
                elif choice0 == 10:
                    UnlexerRule(src='#', parent=current)
                elif choice0 == 11:
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[14]), parent=current)
            return current
    ATTCHAR.min_depth = 0

    def ATTCHARS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='ATTCHARS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    self.ATTCHAR(parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=0, max=1):
                    UnlexerRule(src=' ', parent=current)
            return current
    ATTCHARS.min_depth = 1

    def HEXCHARS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='HEXCHARS', parent=parent)) as current:
            UnlexerRule(src='#', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[15]), parent=current)
            return current
    HEXCHARS.min_depth = 0

    def DECCHARS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DECCHARS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[16]), parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 1, min=0, max=1):
                    UnlexerRule(src='%', parent=current)
            return current
    DECCHARS.min_depth = 0

    def DOUBLE_QUOTE_STRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='DOUBLE_QUOTE_STRING', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[17]), parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    DOUBLE_QUOTE_STRING.min_depth = 0

    def SINGLE_QUOTE_STRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='SINGLE_QUOTE_STRING', parent=parent)) as current:
            UnlexerRule(src='\'', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[18]), parent=current)
            UnlexerRule(src='\'', parent=current)
            return current
    SINGLE_QUOTE_STRING.min_depth = 0

    def htmlDocument(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlDocument', parent=parent)) as current:
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    with AlternationContext(self, [2, 1], [1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        [self.scriptlet, self.SEA_WS][choice0](parent=current)
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 1, min=0, max=1):
                    self.xml(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 2, min=0, max=inf):
                    with AlternationContext(self, [2, 1], [1, 1]) as weights1:
                        choice1 = self._model.choice(current, 1, weights1)
                        [self.scriptlet, self.SEA_WS][choice1](parent=current)
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 3, min=0, max=1):
                    self.dtd(parent=current)
            if self._max_depth >= 1:
                for _ in self._model.quantify(current, 4, min=0, max=inf):
                    with AlternationContext(self, [2, 1], [1, 1]) as weights2:
                        choice2 = self._model.choice(current, 2, weights2)
                        [self.scriptlet, self.SEA_WS][choice2](parent=current)
            if self._max_depth >= 4:
                for _ in self._model.quantify(current, 5, min=0, max=inf):
                    self.htmlElements(parent=current)
            return current
    htmlDocument.min_depth = 0

    def htmlElements(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlElements', parent=parent)) as current:
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    self.htmlMisc(parent=current)
            self.htmlElement(parent=current)
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 1, min=0, max=inf):
                    self.htmlMisc(parent=current)
            return current
    htmlElements.min_depth = 3

    def htmlElement(self, parent=None):
        local_ctx = dict()
        with RuleContext(self, UnparserRule(name='htmlElement', parent=parent)) as current:
            with AlternationContext(self, [3, 3, 3, 2, 2, 2], [1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.TAG_OPEN(parent=current)
                    self.htmlTagName(parent=current)
                    local_ctx['open_tag'] = current.last_child
                    if self._max_depth >= 4:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.htmlAttribute(parent=current)
                    self.TAG_CLOSE(parent=current)
                    self.htmlContent(parent=current)
                    self.TAG_OPEN(parent=current)
                    self.TAG_SLASH(parent=current)
                    self.htmlTagName(parent=current)
                    current.last_child = deepcopy(local_ctx['open_tag'])
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 1:
                    self.TAG_OPEN(parent=current)
                    self.htmlTagName(parent=current)
                    local_ctx['open_tag'] = current.last_child
                    if self._max_depth >= 4:
                        for _ in self._model.quantify(current, 1, min=0, max=inf):
                            self.htmlAttribute(parent=current)
                    self.TAG_SLASH_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 2:
                    self.TAG_OPEN(parent=current)
                    self.htmlTagName(parent=current)
                    local_ctx['open_tag'] = current.last_child
                    if self._max_depth >= 4:
                        for _ in self._model.quantify(current, 2, min=0, max=inf):
                            self.htmlAttribute(parent=current)
                    self.TAG_CLOSE(parent=current)
                    self._endOfHtmlElement()
                elif choice0 == 3:
                    self.scriptlet(parent=current)
                elif choice0 == 4:
                    self.script(parent=current)
                elif choice0 == 5:
                    self.style(parent=current)
            return current
    htmlElement.min_depth = 2

    def htmlContent(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlContent', parent=parent)) as current:
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 0, min=0, max=1):
                    self.htmlChardata(parent=current)
            if self._max_depth >= 2:
                for _ in self._model.quantify(current, 1, min=0, max=inf):
                    with AlternationContext(self, [3, 2, 2], [1, 1, 1]) as weights0:
                        choice0 = self._model.choice(current, 0, weights0)
                        [self.htmlElement, self.xhtmlCDATA, self.htmlComment][choice0](parent=current)
                    if self._max_depth >= 2:
                        for _ in self._model.quantify(current, 2, min=0, max=1):
                            self.htmlChardata(parent=current)
            return current
    htmlContent.min_depth = 0

    def htmlAttribute(self, parent=None):
        local_ctx = dict()
        with RuleContext(self, UnparserRule(name='htmlAttribute', parent=parent)) as current:
            with AlternationContext(self, [4, 3], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.htmlAttributeName(parent=current)
                    local_ctx['attr_name'] = current.last_child
                    self.TAG_EQUALS(parent=current)
                    self.htmlAttributeValue(parent=current)
                elif choice0 == 1:
                    self.htmlAttributeName(parent=current)
                    local_ctx['attr_name'] = current.last_child
            return current
    htmlAttribute.min_depth = 3

    def htmlAttributeName(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlAttributeName', parent=parent)) as current:
            self.TAG_NAME(parent=current)
            return current
    htmlAttributeName.min_depth = 2

    def htmlAttributeValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlAttributeValue', parent=parent)) as current:
            self.ATTVALUE_VALUE(parent=current)
            return current
    htmlAttributeValue.min_depth = 3

    def htmlTagName(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlTagName', parent=parent)) as current:
            self.TAG_NAME(parent=current)
            return current
    htmlTagName.min_depth = 2

    def htmlChardata(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlChardata', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.HTML_TEXT, self.SEA_WS][choice0](parent=current)
            return current
    htmlChardata.min_depth = 1

    def htmlMisc(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlMisc', parent=parent)) as current:
            with AlternationContext(self, [2, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.htmlComment, self.SEA_WS][choice0](parent=current)
            return current
    htmlMisc.min_depth = 1

    def htmlComment(self, parent=None):
        with RuleContext(self, UnparserRule(name='htmlComment', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.HTML_COMMENT, self.HTML_CONDITIONAL_COMMENT][choice0](parent=current)
            return current
    htmlComment.min_depth = 1

    def xhtmlCDATA(self, parent=None):
        with RuleContext(self, UnparserRule(name='xhtmlCDATA', parent=parent)) as current:
            self.CDATA(parent=current)
            return current
    xhtmlCDATA.min_depth = 1

    def dtd(self, parent=None):
        with RuleContext(self, UnparserRule(name='dtd', parent=parent)) as current:
            self.DTD(parent=current)
            return current
    dtd.min_depth = 1

    def xml(self, parent=None):
        with RuleContext(self, UnparserRule(name='xml', parent=parent)) as current:
            self.XML_DECLARATION(parent=current)
            return current
    xml.min_depth = 1

    def scriptlet(self, parent=None):
        with RuleContext(self, UnparserRule(name='scriptlet', parent=parent)) as current:
            self.SCRIPTLET(parent=current)
            return current
    scriptlet.min_depth = 1

    def script(self, parent=None):
        with RuleContext(self, UnparserRule(name='script', parent=parent)) as current:
            self.SCRIPT_OPEN(parent=current)
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.SCRIPT_BODY, self.SCRIPT_SHORT_BODY][choice0](parent=current)
            return current
    script.min_depth = 1

    def style(self, parent=None):
        with RuleContext(self, UnparserRule(name='style', parent=parent)) as current:
            self.STYLE_OPEN(parent=current)
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.STYLE_BODY, self.STYLE_SHORT_BODY][choice0](parent=current)
            return current
    style.min_depth = 1

    _default_rule = htmlDocument

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127), range(161, 173), range(174, 888), range(890, 896), range(900, 907), range(908, 909), range(910, 930), range(931, 1328), range(1329, 1367), range(1369, 1419), range(1421, 1424), range(1425, 1480), range(1488, 1515), range(1519, 1525), range(1542, 1564), range(1566, 1757), range(1758, 1806), range(1808, 1867), range(1869, 1970), range(1984, 2043), range(2045, 2094), range(2096, 2111), range(2112, 2140), range(2142, 2143), range(2144, 2155), range(2208, 2229), range(2230, 2248), range(2259, 2274), range(2275, 2436), range(2437, 2445), range(2447, 2449), range(2451, 2473), range(2474, 2481), range(2482, 2483), range(2486, 2490), range(2492, 2501), range(2503, 2505), range(2507, 2511), range(2519, 2520), range(2524, 2526), range(2527, 2532), range(2534, 2559), range(2561, 2564), range(2565, 2571), range(2575, 2577), range(2579, 2601), range(2602, 2609), range(2610, 2612), range(2613, 2615), range(2616, 2618), range(2620, 2621), range(2622, 2627), range(2631, 2633), range(2635, 2638), range(2641, 2642), range(2649, 2653), range(2654, 2655), range(2662, 2679), range(2689, 2692), range(2693, 2702), range(2703, 2706), range(2707, 2729), range(2730, 2737), range(2738, 2740), range(2741, 2746), range(2748, 2758), range(2759, 2762), range(2763, 2766), range(2768, 2769), range(2784, 2788), range(2790, 2802), range(2809, 2816), range(2817, 2820), range(2821, 2829), range(2831, 2833), range(2835, 2857), range(2858, 2865), range(2866, 2868), range(2869, 2874), range(2876, 2885), range(2887, 2889), range(2891, 2894), range(2901, 2904), range(2908, 2910), range(2911, 2916), range(2918, 2936), range(2946, 2948), range(2949, 2955), range(2958, 2961), range(2962, 2966), range(2969, 2971), range(2972, 2973), range(2974, 2976), range(2979, 2981), range(2984, 2987), range(2990, 3002), range(3006, 3011), range(3014, 3017), range(3018, 3022), range(3024, 3025), range(3031, 3032), range(3046, 3067), range(3072, 3085), range(3086, 3089), range(3090, 3113), range(3114, 3130), range(3133, 3141), range(3142, 3145), range(3146, 3150), range(3157, 3159), range(3160, 3163), range(3168, 3172), range(3174, 3184), range(3191, 3213), range(3214, 3217), range(3218, 3241), range(3242, 3252), range(3253, 3258), range(3260, 3269), range(3270, 3273), range(3274, 3278), range(3285, 3287), range(3294, 3295), range(3296, 3300), range(3302, 3312), range(3313, 3315), range(3328, 3341), range(3342, 3345), range(3346, 3397), range(3398, 3401), range(3402, 3408), range(3412, 3428), range(3430, 3456), range(3457, 3460), range(3461, 3479), range(3482, 3506), range(3507, 3516), range(3517, 3518), range(3520, 3527), range(3530, 3531), range(3535, 3541), range(3542, 3543), range(3544, 3552), range(3558, 3568), range(3570, 3573), range(3585, 3643), range(3647, 3676), range(3713, 3715), range(3716, 3717), range(3718, 3723), range(3724, 3748), range(3749, 3750), range(3751, 3774), range(3776, 3781), range(3782, 3783), range(3784, 3790), range(3792, 3802), range(3804, 3808), range(3840, 3912), range(3913, 3949), range(3953, 3992), range(3993, 4029), range(4030, 4045), range(4046, 4059), range(4096, 4294), range(4295, 4296), range(4301, 4302), range(4304, 4681), range(4682, 4686), range(4688, 4695), range(4696, 4697), range(4698, 4702), range(4704, 4745), range(4746, 4750), range(4752, 4785), range(4786, 4790), range(4792, 4799), range(4800, 4801), range(4802, 4806), range(4808, 4823), range(4824, 4881), range(4882, 4886), range(4888, 4955), range(4957, 4989), range(4992, 5018), range(5024, 5110), range(5112, 5118), range(5120, 5760), range(5761, 5789), range(5792, 5881), range(5888, 5901), range(5902, 5909), range(5920, 5943), range(5952, 5972), range(5984, 5997), range(5998, 6001), range(6002, 6004), range(6016, 6110), range(6112, 6122), range(6128, 6138), range(6144, 6158), range(6160, 6170), range(6176, 6265), range(6272, 6315), range(6320, 6390), range(6400, 6431), range(6432, 6444), range(6448, 6460), range(6464, 6465), range(6468, 6510), range(6512, 6517), range(6528, 6572), range(6576, 6602), range(6608, 6619), range(6622, 6684), range(6686, 6751), range(6752, 6781), range(6783, 6794), range(6800, 6810), range(6816, 6830), range(6832, 6849), range(6912, 6988), range(6992, 7037), range(7040, 7156), range(7164, 7224), range(7227, 7242), range(7245, 7305), range(7312, 7355), range(7357, 7368), range(7376, 7419), range(7424, 7674), range(7675, 7958), range(7960, 7966), range(7968, 8006), range(8008, 8014), range(8016, 8024), range(8025, 8026), range(8027, 8028), range(8029, 8030), range(8031, 8062), range(8064, 8117), range(8118, 8133), range(8134, 8148), range(8150, 8156), range(8157, 8176), range(8178, 8181), range(8182, 8191), range(8208, 8232), range(8240, 8287), range(8304, 8306), range(8308, 8335), range(8336, 8349), range(8352, 8384), range(8400, 8433), range(8448, 8588), range(8592, 9255), range(9280, 9291), range(9312, 11124), range(11126, 11158), range(11159, 11311), range(11312, 11359), range(11360, 11508), range(11513, 11558), range(11559, 11560), range(11565, 11566), range(11568, 11624), range(11631, 11633), range(11647, 11671), range(11680, 11687), range(11688, 11695), range(11696, 11703), range(11704, 11711), range(11712, 11719), range(11720, 11727), range(11728, 11735), range(11736, 11743), range(11744, 11859), range(11904, 11930), range(11931, 12020), range(12032, 12246), range(12272, 12284), range(12289, 12352), range(12353, 12439), range(12441, 12544), range(12549, 12592), range(12593, 12687), range(12688, 12772), range(12784, 12831), range(12832, 40957), range(40960, 42125), range(42128, 42183), range(42192, 42540), range(42560, 42744), range(42752, 42944), range(42946, 42955), range(42997, 43053), range(43056, 43066), range(43072, 43128), range(43136, 43206), range(43214, 43226), range(43232, 43348), range(43359, 43389), range(43392, 43470), range(43471, 43482), range(43486, 43519), range(43520, 43575), range(43584, 43598), range(43600, 43610), range(43612, 43715), range(43739, 43767), range(43777, 43783), range(43785, 43791), range(43793, 43799), range(43808, 43815), range(43816, 43823), range(43824, 43884), range(43888, 44014), range(44016, 44026), range(44032, 55204), range(55216, 55239), range(55243, 55292), range(63744, 64110), range(64112, 64218), range(64256, 64263), range(64275, 64280), range(64285, 64311), range(64312, 64317), range(64318, 64319), range(64320, 64322), range(64323, 64325), range(64326, 64450), range(64467, 64832), range(64848, 64912), range(64914, 64968), range(65008, 65022), range(65024, 65050), range(65056, 65107), range(65108, 65127), range(65128, 65132), range(65136, 65141), range(65142, 65277), range(65281, 65471), range(65474, 65480), range(65482, 65488), range(65490, 65496), range(65498, 65501), range(65504, 65511), range(65512, 65519), range(65532, 65534), range(65536, 65548), range(65549, 65575), range(65576, 65595), range(65596, 65598), range(65599, 65614), range(65616, 65630), range(65664, 65787), range(65792, 65795), range(65799, 65844), range(65847, 65935), range(65936, 65949), range(65952, 65953), range(66000, 66046), range(66176, 66205), range(66208, 66257), range(66272, 66300), range(66304, 66340), range(66349, 66379), range(66384, 66427), range(66432, 66462), range(66463, 66500), range(66504, 66518), range(66560, 66718), range(66720, 66730), range(66736, 66772), range(66776, 66812), range(66816, 66856), range(66864, 66916), range(66927, 66928), range(67072, 67383), range(67392, 67414), range(67424, 67432), range(67584, 67590), range(67592, 67593), range(67594, 67638), range(67639, 67641), range(67644, 67645), range(67647, 67670), range(67671, 67743), range(67751, 67760), range(67808, 67827), range(67828, 67830), range(67835, 67868), range(67871, 67898), range(67903, 67904), range(67968, 68024), range(68028, 68048), range(68050, 68100), range(68101, 68103), range(68108, 68116), range(68117, 68120), range(68121, 68150), range(68152, 68155), range(68159, 68169), range(68176, 68185), range(68192, 68256), range(68288, 68327), range(68331, 68343), range(68352, 68406), range(68409, 68438), range(68440, 68467), range(68472, 68498), range(68505, 68509), range(68521, 68528), range(68608, 68681), range(68736, 68787), range(68800, 68851), range(68858, 68904), range(68912, 68922), range(69216, 69247), range(69248, 69290), range(69291, 69294), range(69296, 69298), range(69376, 69416), range(69424, 69466), range(69552, 69580), range(69600, 69623), range(69632, 69710), range(69714, 69744), range(69759, 69821), range(69822, 69826), range(69840, 69865), range(69872, 69882), range(69888, 69941), range(69942, 69960), range(69968, 70007), range(70016, 70112), range(70113, 70133), range(70144, 70162), range(70163, 70207), range(70272, 70279), range(70280, 70281), range(70282, 70286), range(70287, 70302), range(70303, 70314), range(70320, 70379), range(70384, 70394), range(70400, 70404), range(70405, 70413), range(70415, 70417), range(70419, 70441), range(70442, 70449), range(70450, 70452), range(70453, 70458), range(70459, 70469), range(70471, 70473), range(70475, 70478), range(70480, 70481), range(70487, 70488), range(70493, 70500), range(70502, 70509), range(70512, 70517), range(70656, 70748), range(70749, 70754), range(70784, 70856), range(70864, 70874), range(71040, 71094), range(71096, 71134), range(71168, 71237), range(71248, 71258), range(71264, 71277), range(71296, 71353), range(71360, 71370), range(71424, 71451), range(71453, 71468), range(71472, 71488), range(71680, 71740), range(71840, 71923), range(71935, 71943), range(71945, 71946), range(71948, 71956), range(71957, 71959), range(71960, 71990), range(71991, 71993), range(71995, 72007), range(72016, 72026), range(72096, 72104), range(72106, 72152), range(72154, 72165), range(72192, 72264), range(72272, 72355), range(72384, 72441), range(72704, 72713), range(72714, 72759), range(72760, 72774), range(72784, 72813), range(72816, 72848), range(72850, 72872), range(72873, 72887), range(72960, 72967), range(72968, 72970), range(72971, 73015), range(73018, 73019), range(73020, 73022), range(73023, 73032), range(73040, 73050), range(73056, 73062), range(73063, 73065), range(73066, 73103), range(73104, 73106), range(73107, 73113), range(73120, 73130), range(73440, 73465), range(73648, 73649), range(73664, 73714), range(73727, 74650), range(74752, 74863), range(74864, 74869), range(74880, 75076), range(77824, 78895), range(82944, 83527), range(92160, 92729), range(92736, 92767), range(92768, 92778), range(92782, 92784), range(92880, 92910), range(92912, 92918), range(92928, 92998), range(93008, 93018), range(93019, 93026), range(93027, 93048), range(93053, 93072), range(93760, 93851), range(93952, 94027), range(94031, 94088), range(94095, 94112), range(94176, 94181), range(94192, 94194), range(94208, 100344), range(100352, 101590), range(101632, 101641), range(110592, 110879), range(110928, 110931), range(110948, 110952), range(110960, 111356), range(113664, 113771), range(113776, 113789), range(113792, 113801), range(113808, 113818), range(113820, 113824), range(118784, 119030), range(119040, 119079), range(119081, 119155), range(119163, 119273), range(119296, 119366), range(119520, 119540), range(119552, 119639), range(119648, 119673), range(119808, 119893), range(119894, 119965), range(119966, 119968), range(119970, 119971), range(119973, 119975), range(119977, 119981), range(119982, 119994), range(119995, 119996), range(119997, 120004), range(120005, 120070), range(120071, 120075), range(120077, 120085), range(120086, 120093), range(120094, 120122), range(120123, 120127), range(120128, 120133), range(120134, 120135), range(120138, 120145), range(120146, 120486), range(120488, 120780), range(120782, 121484), range(121499, 121504), range(121505, 121520), range(122880, 122887), range(122888, 122905), range(122907, 122914), range(122915, 122917), range(122918, 122923), range(123136, 123181), range(123184, 123198), range(123200, 123210), range(123214, 123216), range(123584, 123642), range(123647, 123648), range(124928, 125125), range(125127, 125143), range(125184, 125260), range(125264, 125274), range(125278, 125280), range(126065, 126133), range(126209, 126270), range(126464, 126468), range(126469, 126496), range(126497, 126499), range(126500, 126501), range(126503, 126504), range(126505, 126515), range(126516, 126520), range(126521, 126522), range(126523, 126524), range(126530, 126531), range(126535, 126536), range(126537, 126538), range(126539, 126540), range(126541, 126544), range(126545, 126547), range(126548, 126549), range(126551, 126552), range(126553, 126554), range(126555, 126556), range(126557, 126558), range(126559, 126560), range(126561, 126563), range(126564, 126565), range(126567, 126571), range(126572, 126579), range(126580, 126584), range(126585, 126589), range(126590, 126591), range(126592, 126602), range(126603, 126620), range(126625, 126628), range(126629, 126634), range(126635, 126652), range(126704, 126706), range(126976, 127020), range(127024, 127124), range(127136, 127151), range(127153, 127168), range(127169, 127184), range(127185, 127222), range(127232, 127406), range(127462, 127491), range(127504, 127548), range(127552, 127561), range(127568, 127570), range(127584, 127590), range(127744, 128728), range(128736, 128749), range(128752, 128765), range(128768, 128884), range(128896, 128985), range(128992, 129004), range(129024, 129036), range(129040, 129096), range(129104, 129114), range(129120, 129160), range(129168, 129198), range(129200, 129202), range(129280, 129401), range(129402, 129484), range(129485, 129620), range(129632, 129646), range(129648, 129653), range(129656, 129659), range(129664, 129671), range(129680, 129705), range(129712, 129719), range(129728, 129731), range(129744, 129751), range(129792, 129939), range(129940, 129995), range(130032, 130042), range(131072, 173790), range(173824, 177973), range(177984, 178206), range(178208, 183970), range(183984, 191457), range(194560, 195102), range(196608, 201547), range(917760, 918000)])),
        1: list(itertools.chain.from_iterable([range(32, 60), range(61, 127), range(161, 173), range(174, 888), range(890, 896), range(900, 907), range(908, 909), range(910, 930), range(931, 1328), range(1329, 1367), range(1369, 1419), range(1421, 1424), range(1425, 1480), range(1488, 1515), range(1519, 1525), range(1542, 1564), range(1566, 1757), range(1758, 1806), range(1808, 1867), range(1869, 1970), range(1984, 2043), range(2045, 2094), range(2096, 2111), range(2112, 2140), range(2142, 2143), range(2144, 2155), range(2208, 2229), range(2230, 2248), range(2259, 2274), range(2275, 2436), range(2437, 2445), range(2447, 2449), range(2451, 2473), range(2474, 2481), range(2482, 2483), range(2486, 2490), range(2492, 2501), range(2503, 2505), range(2507, 2511), range(2519, 2520), range(2524, 2526), range(2527, 2532), range(2534, 2559), range(2561, 2564), range(2565, 2571), range(2575, 2577), range(2579, 2601), range(2602, 2609), range(2610, 2612), range(2613, 2615), range(2616, 2618), range(2620, 2621), range(2622, 2627), range(2631, 2633), range(2635, 2638), range(2641, 2642), range(2649, 2653), range(2654, 2655), range(2662, 2679), range(2689, 2692), range(2693, 2702), range(2703, 2706), range(2707, 2729), range(2730, 2737), range(2738, 2740), range(2741, 2746), range(2748, 2758), range(2759, 2762), range(2763, 2766), range(2768, 2769), range(2784, 2788), range(2790, 2802), range(2809, 2816), range(2817, 2820), range(2821, 2829), range(2831, 2833), range(2835, 2857), range(2858, 2865), range(2866, 2868), range(2869, 2874), range(2876, 2885), range(2887, 2889), range(2891, 2894), range(2901, 2904), range(2908, 2910), range(2911, 2916), range(2918, 2936), range(2946, 2948), range(2949, 2955), range(2958, 2961), range(2962, 2966), range(2969, 2971), range(2972, 2973), range(2974, 2976), range(2979, 2981), range(2984, 2987), range(2990, 3002), range(3006, 3011), range(3014, 3017), range(3018, 3022), range(3024, 3025), range(3031, 3032), range(3046, 3067), range(3072, 3085), range(3086, 3089), range(3090, 3113), range(3114, 3130), range(3133, 3141), range(3142, 3145), range(3146, 3150), range(3157, 3159), range(3160, 3163), range(3168, 3172), range(3174, 3184), range(3191, 3213), range(3214, 3217), range(3218, 3241), range(3242, 3252), range(3253, 3258), range(3260, 3269), range(3270, 3273), range(3274, 3278), range(3285, 3287), range(3294, 3295), range(3296, 3300), range(3302, 3312), range(3313, 3315), range(3328, 3341), range(3342, 3345), range(3346, 3397), range(3398, 3401), range(3402, 3408), range(3412, 3428), range(3430, 3456), range(3457, 3460), range(3461, 3479), range(3482, 3506), range(3507, 3516), range(3517, 3518), range(3520, 3527), range(3530, 3531), range(3535, 3541), range(3542, 3543), range(3544, 3552), range(3558, 3568), range(3570, 3573), range(3585, 3643), range(3647, 3676), range(3713, 3715), range(3716, 3717), range(3718, 3723), range(3724, 3748), range(3749, 3750), range(3751, 3774), range(3776, 3781), range(3782, 3783), range(3784, 3790), range(3792, 3802), range(3804, 3808), range(3840, 3912), range(3913, 3949), range(3953, 3992), range(3993, 4029), range(4030, 4045), range(4046, 4059), range(4096, 4294), range(4295, 4296), range(4301, 4302), range(4304, 4681), range(4682, 4686), range(4688, 4695), range(4696, 4697), range(4698, 4702), range(4704, 4745), range(4746, 4750), range(4752, 4785), range(4786, 4790), range(4792, 4799), range(4800, 4801), range(4802, 4806), range(4808, 4823), range(4824, 4881), range(4882, 4886), range(4888, 4955), range(4957, 4989), range(4992, 5018), range(5024, 5110), range(5112, 5118), range(5120, 5760), range(5761, 5789), range(5792, 5881), range(5888, 5901), range(5902, 5909), range(5920, 5943), range(5952, 5972), range(5984, 5997), range(5998, 6001), range(6002, 6004), range(6016, 6110), range(6112, 6122), range(6128, 6138), range(6144, 6158), range(6160, 6170), range(6176, 6265), range(6272, 6315), range(6320, 6390), range(6400, 6431), range(6432, 6444), range(6448, 6460), range(6464, 6465), range(6468, 6510), range(6512, 6517), range(6528, 6572), range(6576, 6602), range(6608, 6619), range(6622, 6684), range(6686, 6751), range(6752, 6781), range(6783, 6794), range(6800, 6810), range(6816, 6830), range(6832, 6849), range(6912, 6988), range(6992, 7037), range(7040, 7156), range(7164, 7224), range(7227, 7242), range(7245, 7305), range(7312, 7355), range(7357, 7368), range(7376, 7419), range(7424, 7674), range(7675, 7958), range(7960, 7966), range(7968, 8006), range(8008, 8014), range(8016, 8024), range(8025, 8026), range(8027, 8028), range(8029, 8030), range(8031, 8062), range(8064, 8117), range(8118, 8133), range(8134, 8148), range(8150, 8156), range(8157, 8176), range(8178, 8181), range(8182, 8191), range(8208, 8232), range(8240, 8287), range(8304, 8306), range(8308, 8335), range(8336, 8349), range(8352, 8384), range(8400, 8433), range(8448, 8588), range(8592, 9255), range(9280, 9291), range(9312, 11124), range(11126, 11158), range(11159, 11311), range(11312, 11359), range(11360, 11508), range(11513, 11558), range(11559, 11560), range(11565, 11566), range(11568, 11624), range(11631, 11633), range(11647, 11671), range(11680, 11687), range(11688, 11695), range(11696, 11703), range(11704, 11711), range(11712, 11719), range(11720, 11727), range(11728, 11735), range(11736, 11743), range(11744, 11859), range(11904, 11930), range(11931, 12020), range(12032, 12246), range(12272, 12284), range(12289, 12352), range(12353, 12439), range(12441, 12544), range(12549, 12592), range(12593, 12687), range(12688, 12772), range(12784, 12831), range(12832, 40957), range(40960, 42125), range(42128, 42183), range(42192, 42540), range(42560, 42744), range(42752, 42944), range(42946, 42955), range(42997, 43053), range(43056, 43066), range(43072, 43128), range(43136, 43206), range(43214, 43226), range(43232, 43348), range(43359, 43389), range(43392, 43470), range(43471, 43482), range(43486, 43519), range(43520, 43575), range(43584, 43598), range(43600, 43610), range(43612, 43715), range(43739, 43767), range(43777, 43783), range(43785, 43791), range(43793, 43799), range(43808, 43815), range(43816, 43823), range(43824, 43884), range(43888, 44014), range(44016, 44026), range(44032, 55204), range(55216, 55239), range(55243, 55292), range(63744, 64110), range(64112, 64218), range(64256, 64263), range(64275, 64280), range(64285, 64311), range(64312, 64317), range(64318, 64319), range(64320, 64322), range(64323, 64325), range(64326, 64450), range(64467, 64832), range(64848, 64912), range(64914, 64968), range(65008, 65022), range(65024, 65050), range(65056, 65107), range(65108, 65127), range(65128, 65132), range(65136, 65141), range(65142, 65277), range(65281, 65471), range(65474, 65480), range(65482, 65488), range(65490, 65496), range(65498, 65501), range(65504, 65511), range(65512, 65519), range(65532, 65534), range(65536, 65548), range(65549, 65575), range(65576, 65595), range(65596, 65598), range(65599, 65614), range(65616, 65630), range(65664, 65787), range(65792, 65795), range(65799, 65844), range(65847, 65935), range(65936, 65949), range(65952, 65953), range(66000, 66046), range(66176, 66205), range(66208, 66257), range(66272, 66300), range(66304, 66340), range(66349, 66379), range(66384, 66427), range(66432, 66462), range(66463, 66500), range(66504, 66518), range(66560, 66718), range(66720, 66730), range(66736, 66772), range(66776, 66812), range(66816, 66856), range(66864, 66916), range(66927, 66928), range(67072, 67383), range(67392, 67414), range(67424, 67432), range(67584, 67590), range(67592, 67593), range(67594, 67638), range(67639, 67641), range(67644, 67645), range(67647, 67670), range(67671, 67743), range(67751, 67760), range(67808, 67827), range(67828, 67830), range(67835, 67868), range(67871, 67898), range(67903, 67904), range(67968, 68024), range(68028, 68048), range(68050, 68100), range(68101, 68103), range(68108, 68116), range(68117, 68120), range(68121, 68150), range(68152, 68155), range(68159, 68169), range(68176, 68185), range(68192, 68256), range(68288, 68327), range(68331, 68343), range(68352, 68406), range(68409, 68438), range(68440, 68467), range(68472, 68498), range(68505, 68509), range(68521, 68528), range(68608, 68681), range(68736, 68787), range(68800, 68851), range(68858, 68904), range(68912, 68922), range(69216, 69247), range(69248, 69290), range(69291, 69294), range(69296, 69298), range(69376, 69416), range(69424, 69466), range(69552, 69580), range(69600, 69623), range(69632, 69710), range(69714, 69744), range(69759, 69821), range(69822, 69826), range(69840, 69865), range(69872, 69882), range(69888, 69941), range(69942, 69960), range(69968, 70007), range(70016, 70112), range(70113, 70133), range(70144, 70162), range(70163, 70207), range(70272, 70279), range(70280, 70281), range(70282, 70286), range(70287, 70302), range(70303, 70314), range(70320, 70379), range(70384, 70394), range(70400, 70404), range(70405, 70413), range(70415, 70417), range(70419, 70441), range(70442, 70449), range(70450, 70452), range(70453, 70458), range(70459, 70469), range(70471, 70473), range(70475, 70478), range(70480, 70481), range(70487, 70488), range(70493, 70500), range(70502, 70509), range(70512, 70517), range(70656, 70748), range(70749, 70754), range(70784, 70856), range(70864, 70874), range(71040, 71094), range(71096, 71134), range(71168, 71237), range(71248, 71258), range(71264, 71277), range(71296, 71353), range(71360, 71370), range(71424, 71451), range(71453, 71468), range(71472, 71488), range(71680, 71740), range(71840, 71923), range(71935, 71943), range(71945, 71946), range(71948, 71956), range(71957, 71959), range(71960, 71990), range(71991, 71993), range(71995, 72007), range(72016, 72026), range(72096, 72104), range(72106, 72152), range(72154, 72165), range(72192, 72264), range(72272, 72355), range(72384, 72441), range(72704, 72713), range(72714, 72759), range(72760, 72774), range(72784, 72813), range(72816, 72848), range(72850, 72872), range(72873, 72887), range(72960, 72967), range(72968, 72970), range(72971, 73015), range(73018, 73019), range(73020, 73022), range(73023, 73032), range(73040, 73050), range(73056, 73062), range(73063, 73065), range(73066, 73103), range(73104, 73106), range(73107, 73113), range(73120, 73130), range(73440, 73465), range(73648, 73649), range(73664, 73714), range(73727, 74650), range(74752, 74863), range(74864, 74869), range(74880, 75076), range(77824, 78895), range(82944, 83527), range(92160, 92729), range(92736, 92767), range(92768, 92778), range(92782, 92784), range(92880, 92910), range(92912, 92918), range(92928, 92998), range(93008, 93018), range(93019, 93026), range(93027, 93048), range(93053, 93072), range(93760, 93851), range(93952, 94027), range(94031, 94088), range(94095, 94112), range(94176, 94181), range(94192, 94194), range(94208, 100344), range(100352, 101590), range(101632, 101641), range(110592, 110879), range(110928, 110931), range(110948, 110952), range(110960, 111356), range(113664, 113771), range(113776, 113789), range(113792, 113801), range(113808, 113818), range(113820, 113824), range(118784, 119030), range(119040, 119079), range(119081, 119155), range(119163, 119273), range(119296, 119366), range(119520, 119540), range(119552, 119639), range(119648, 119673), range(119808, 119893), range(119894, 119965), range(119966, 119968), range(119970, 119971), range(119973, 119975), range(119977, 119981), range(119982, 119994), range(119995, 119996), range(119997, 120004), range(120005, 120070), range(120071, 120075), range(120077, 120085), range(120086, 120093), range(120094, 120122), range(120123, 120127), range(120128, 120133), range(120134, 120135), range(120138, 120145), range(120146, 120486), range(120488, 120780), range(120782, 121484), range(121499, 121504), range(121505, 121520), range(122880, 122887), range(122888, 122905), range(122907, 122914), range(122915, 122917), range(122918, 122923), range(123136, 123181), range(123184, 123198), range(123200, 123210), range(123214, 123216), range(123584, 123642), range(123647, 123648), range(124928, 125125), range(125127, 125143), range(125184, 125260), range(125264, 125274), range(125278, 125280), range(126065, 126133), range(126209, 126270), range(126464, 126468), range(126469, 126496), range(126497, 126499), range(126500, 126501), range(126503, 126504), range(126505, 126515), range(126516, 126520), range(126521, 126522), range(126523, 126524), range(126530, 126531), range(126535, 126536), range(126537, 126538), range(126539, 126540), range(126541, 126544), range(126545, 126547), range(126548, 126549), range(126551, 126552), range(126553, 126554), range(126555, 126556), range(126557, 126558), range(126559, 126560), range(126561, 126563), range(126564, 126565), range(126567, 126571), range(126572, 126579), range(126580, 126584), range(126585, 126589), range(126590, 126591), range(126592, 126602), range(126603, 126620), range(126625, 126628), range(126629, 126634), range(126635, 126652), range(126704, 126706), range(126976, 127020), range(127024, 127124), range(127136, 127151), range(127153, 127168), range(127169, 127184), range(127185, 127222), range(127232, 127406), range(127462, 127491), range(127504, 127548), range(127552, 127561), range(127568, 127570), range(127584, 127590), range(127744, 128728), range(128736, 128749), range(128752, 128765), range(128768, 128884), range(128896, 128985), range(128992, 129004), range(129024, 129036), range(129040, 129096), range(129104, 129114), range(129120, 129160), range(129168, 129198), range(129200, 129202), range(129280, 129401), range(129402, 129484), range(129485, 129620), range(129632, 129646), range(129648, 129653), range(129656, 129659), range(129664, 129671), range(129680, 129705), range(129712, 129719), range(129728, 129731), range(129744, 129751), range(129792, 129939), range(129940, 129995), range(130032, 130042), range(131072, 173790), range(173824, 177973), range(177984, 178206), range(178208, 183970), range(183984, 191457), range(194560, 195102), range(196608, 201547), range(917760, 918000)])),
        2: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
        3: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        4: list(itertools.chain.from_iterable([range(48, 58)])),
        5: list(itertools.chain.from_iterable([range(768, 879)])),
        6: list(itertools.chain.from_iterable([range(8255, 8256)])),
        7: list(itertools.chain.from_iterable([range(58, 59), range(65, 91), range(97, 123)])),
        8: list(itertools.chain.from_iterable([range(8304, 8591)])),
        9: list(itertools.chain.from_iterable([range(11264, 12271)])),
        10: list(itertools.chain.from_iterable([range(12289, 55295)])),
        11: list(itertools.chain.from_iterable([range(63744, 64975)])),
        12: list(itertools.chain.from_iterable([range(65008, 65533)])),
        13: list(itertools.chain.from_iterable([range(32, 33)])),
        14: list(itertools.chain.from_iterable([range(48, 58), range(65, 91), range(97, 123)])),
        15: list(itertools.chain.from_iterable([range(48, 58), range(65, 71), range(97, 103)])),
        16: list(itertools.chain.from_iterable([range(48, 58)])),
        17: list(itertools.chain.from_iterable([range(32, 34), range(35, 60), range(61, 127), range(161, 173), range(174, 888), range(890, 896), range(900, 907), range(908, 909), range(910, 930), range(931, 1328), range(1329, 1367), range(1369, 1419), range(1421, 1424), range(1425, 1480), range(1488, 1515), range(1519, 1525), range(1542, 1564), range(1566, 1757), range(1758, 1806), range(1808, 1867), range(1869, 1970), range(1984, 2043), range(2045, 2094), range(2096, 2111), range(2112, 2140), range(2142, 2143), range(2144, 2155), range(2208, 2229), range(2230, 2248), range(2259, 2274), range(2275, 2436), range(2437, 2445), range(2447, 2449), range(2451, 2473), range(2474, 2481), range(2482, 2483), range(2486, 2490), range(2492, 2501), range(2503, 2505), range(2507, 2511), range(2519, 2520), range(2524, 2526), range(2527, 2532), range(2534, 2559), range(2561, 2564), range(2565, 2571), range(2575, 2577), range(2579, 2601), range(2602, 2609), range(2610, 2612), range(2613, 2615), range(2616, 2618), range(2620, 2621), range(2622, 2627), range(2631, 2633), range(2635, 2638), range(2641, 2642), range(2649, 2653), range(2654, 2655), range(2662, 2679), range(2689, 2692), range(2693, 2702), range(2703, 2706), range(2707, 2729), range(2730, 2737), range(2738, 2740), range(2741, 2746), range(2748, 2758), range(2759, 2762), range(2763, 2766), range(2768, 2769), range(2784, 2788), range(2790, 2802), range(2809, 2816), range(2817, 2820), range(2821, 2829), range(2831, 2833), range(2835, 2857), range(2858, 2865), range(2866, 2868), range(2869, 2874), range(2876, 2885), range(2887, 2889), range(2891, 2894), range(2901, 2904), range(2908, 2910), range(2911, 2916), range(2918, 2936), range(2946, 2948), range(2949, 2955), range(2958, 2961), range(2962, 2966), range(2969, 2971), range(2972, 2973), range(2974, 2976), range(2979, 2981), range(2984, 2987), range(2990, 3002), range(3006, 3011), range(3014, 3017), range(3018, 3022), range(3024, 3025), range(3031, 3032), range(3046, 3067), range(3072, 3085), range(3086, 3089), range(3090, 3113), range(3114, 3130), range(3133, 3141), range(3142, 3145), range(3146, 3150), range(3157, 3159), range(3160, 3163), range(3168, 3172), range(3174, 3184), range(3191, 3213), range(3214, 3217), range(3218, 3241), range(3242, 3252), range(3253, 3258), range(3260, 3269), range(3270, 3273), range(3274, 3278), range(3285, 3287), range(3294, 3295), range(3296, 3300), range(3302, 3312), range(3313, 3315), range(3328, 3341), range(3342, 3345), range(3346, 3397), range(3398, 3401), range(3402, 3408), range(3412, 3428), range(3430, 3456), range(3457, 3460), range(3461, 3479), range(3482, 3506), range(3507, 3516), range(3517, 3518), range(3520, 3527), range(3530, 3531), range(3535, 3541), range(3542, 3543), range(3544, 3552), range(3558, 3568), range(3570, 3573), range(3585, 3643), range(3647, 3676), range(3713, 3715), range(3716, 3717), range(3718, 3723), range(3724, 3748), range(3749, 3750), range(3751, 3774), range(3776, 3781), range(3782, 3783), range(3784, 3790), range(3792, 3802), range(3804, 3808), range(3840, 3912), range(3913, 3949), range(3953, 3992), range(3993, 4029), range(4030, 4045), range(4046, 4059), range(4096, 4294), range(4295, 4296), range(4301, 4302), range(4304, 4681), range(4682, 4686), range(4688, 4695), range(4696, 4697), range(4698, 4702), range(4704, 4745), range(4746, 4750), range(4752, 4785), range(4786, 4790), range(4792, 4799), range(4800, 4801), range(4802, 4806), range(4808, 4823), range(4824, 4881), range(4882, 4886), range(4888, 4955), range(4957, 4989), range(4992, 5018), range(5024, 5110), range(5112, 5118), range(5120, 5760), range(5761, 5789), range(5792, 5881), range(5888, 5901), range(5902, 5909), range(5920, 5943), range(5952, 5972), range(5984, 5997), range(5998, 6001), range(6002, 6004), range(6016, 6110), range(6112, 6122), range(6128, 6138), range(6144, 6158), range(6160, 6170), range(6176, 6265), range(6272, 6315), range(6320, 6390), range(6400, 6431), range(6432, 6444), range(6448, 6460), range(6464, 6465), range(6468, 6510), range(6512, 6517), range(6528, 6572), range(6576, 6602), range(6608, 6619), range(6622, 6684), range(6686, 6751), range(6752, 6781), range(6783, 6794), range(6800, 6810), range(6816, 6830), range(6832, 6849), range(6912, 6988), range(6992, 7037), range(7040, 7156), range(7164, 7224), range(7227, 7242), range(7245, 7305), range(7312, 7355), range(7357, 7368), range(7376, 7419), range(7424, 7674), range(7675, 7958), range(7960, 7966), range(7968, 8006), range(8008, 8014), range(8016, 8024), range(8025, 8026), range(8027, 8028), range(8029, 8030), range(8031, 8062), range(8064, 8117), range(8118, 8133), range(8134, 8148), range(8150, 8156), range(8157, 8176), range(8178, 8181), range(8182, 8191), range(8208, 8232), range(8240, 8287), range(8304, 8306), range(8308, 8335), range(8336, 8349), range(8352, 8384), range(8400, 8433), range(8448, 8588), range(8592, 9255), range(9280, 9291), range(9312, 11124), range(11126, 11158), range(11159, 11311), range(11312, 11359), range(11360, 11508), range(11513, 11558), range(11559, 11560), range(11565, 11566), range(11568, 11624), range(11631, 11633), range(11647, 11671), range(11680, 11687), range(11688, 11695), range(11696, 11703), range(11704, 11711), range(11712, 11719), range(11720, 11727), range(11728, 11735), range(11736, 11743), range(11744, 11859), range(11904, 11930), range(11931, 12020), range(12032, 12246), range(12272, 12284), range(12289, 12352), range(12353, 12439), range(12441, 12544), range(12549, 12592), range(12593, 12687), range(12688, 12772), range(12784, 12831), range(12832, 40957), range(40960, 42125), range(42128, 42183), range(42192, 42540), range(42560, 42744), range(42752, 42944), range(42946, 42955), range(42997, 43053), range(43056, 43066), range(43072, 43128), range(43136, 43206), range(43214, 43226), range(43232, 43348), range(43359, 43389), range(43392, 43470), range(43471, 43482), range(43486, 43519), range(43520, 43575), range(43584, 43598), range(43600, 43610), range(43612, 43715), range(43739, 43767), range(43777, 43783), range(43785, 43791), range(43793, 43799), range(43808, 43815), range(43816, 43823), range(43824, 43884), range(43888, 44014), range(44016, 44026), range(44032, 55204), range(55216, 55239), range(55243, 55292), range(63744, 64110), range(64112, 64218), range(64256, 64263), range(64275, 64280), range(64285, 64311), range(64312, 64317), range(64318, 64319), range(64320, 64322), range(64323, 64325), range(64326, 64450), range(64467, 64832), range(64848, 64912), range(64914, 64968), range(65008, 65022), range(65024, 65050), range(65056, 65107), range(65108, 65127), range(65128, 65132), range(65136, 65141), range(65142, 65277), range(65281, 65471), range(65474, 65480), range(65482, 65488), range(65490, 65496), range(65498, 65501), range(65504, 65511), range(65512, 65519), range(65532, 65534), range(65536, 65548), range(65549, 65575), range(65576, 65595), range(65596, 65598), range(65599, 65614), range(65616, 65630), range(65664, 65787), range(65792, 65795), range(65799, 65844), range(65847, 65935), range(65936, 65949), range(65952, 65953), range(66000, 66046), range(66176, 66205), range(66208, 66257), range(66272, 66300), range(66304, 66340), range(66349, 66379), range(66384, 66427), range(66432, 66462), range(66463, 66500), range(66504, 66518), range(66560, 66718), range(66720, 66730), range(66736, 66772), range(66776, 66812), range(66816, 66856), range(66864, 66916), range(66927, 66928), range(67072, 67383), range(67392, 67414), range(67424, 67432), range(67584, 67590), range(67592, 67593), range(67594, 67638), range(67639, 67641), range(67644, 67645), range(67647, 67670), range(67671, 67743), range(67751, 67760), range(67808, 67827), range(67828, 67830), range(67835, 67868), range(67871, 67898), range(67903, 67904), range(67968, 68024), range(68028, 68048), range(68050, 68100), range(68101, 68103), range(68108, 68116), range(68117, 68120), range(68121, 68150), range(68152, 68155), range(68159, 68169), range(68176, 68185), range(68192, 68256), range(68288, 68327), range(68331, 68343), range(68352, 68406), range(68409, 68438), range(68440, 68467), range(68472, 68498), range(68505, 68509), range(68521, 68528), range(68608, 68681), range(68736, 68787), range(68800, 68851), range(68858, 68904), range(68912, 68922), range(69216, 69247), range(69248, 69290), range(69291, 69294), range(69296, 69298), range(69376, 69416), range(69424, 69466), range(69552, 69580), range(69600, 69623), range(69632, 69710), range(69714, 69744), range(69759, 69821), range(69822, 69826), range(69840, 69865), range(69872, 69882), range(69888, 69941), range(69942, 69960), range(69968, 70007), range(70016, 70112), range(70113, 70133), range(70144, 70162), range(70163, 70207), range(70272, 70279), range(70280, 70281), range(70282, 70286), range(70287, 70302), range(70303, 70314), range(70320, 70379), range(70384, 70394), range(70400, 70404), range(70405, 70413), range(70415, 70417), range(70419, 70441), range(70442, 70449), range(70450, 70452), range(70453, 70458), range(70459, 70469), range(70471, 70473), range(70475, 70478), range(70480, 70481), range(70487, 70488), range(70493, 70500), range(70502, 70509), range(70512, 70517), range(70656, 70748), range(70749, 70754), range(70784, 70856), range(70864, 70874), range(71040, 71094), range(71096, 71134), range(71168, 71237), range(71248, 71258), range(71264, 71277), range(71296, 71353), range(71360, 71370), range(71424, 71451), range(71453, 71468), range(71472, 71488), range(71680, 71740), range(71840, 71923), range(71935, 71943), range(71945, 71946), range(71948, 71956), range(71957, 71959), range(71960, 71990), range(71991, 71993), range(71995, 72007), range(72016, 72026), range(72096, 72104), range(72106, 72152), range(72154, 72165), range(72192, 72264), range(72272, 72355), range(72384, 72441), range(72704, 72713), range(72714, 72759), range(72760, 72774), range(72784, 72813), range(72816, 72848), range(72850, 72872), range(72873, 72887), range(72960, 72967), range(72968, 72970), range(72971, 73015), range(73018, 73019), range(73020, 73022), range(73023, 73032), range(73040, 73050), range(73056, 73062), range(73063, 73065), range(73066, 73103), range(73104, 73106), range(73107, 73113), range(73120, 73130), range(73440, 73465), range(73648, 73649), range(73664, 73714), range(73727, 74650), range(74752, 74863), range(74864, 74869), range(74880, 75076), range(77824, 78895), range(82944, 83527), range(92160, 92729), range(92736, 92767), range(92768, 92778), range(92782, 92784), range(92880, 92910), range(92912, 92918), range(92928, 92998), range(93008, 93018), range(93019, 93026), range(93027, 93048), range(93053, 93072), range(93760, 93851), range(93952, 94027), range(94031, 94088), range(94095, 94112), range(94176, 94181), range(94192, 94194), range(94208, 100344), range(100352, 101590), range(101632, 101641), range(110592, 110879), range(110928, 110931), range(110948, 110952), range(110960, 111356), range(113664, 113771), range(113776, 113789), range(113792, 113801), range(113808, 113818), range(113820, 113824), range(118784, 119030), range(119040, 119079), range(119081, 119155), range(119163, 119273), range(119296, 119366), range(119520, 119540), range(119552, 119639), range(119648, 119673), range(119808, 119893), range(119894, 119965), range(119966, 119968), range(119970, 119971), range(119973, 119975), range(119977, 119981), range(119982, 119994), range(119995, 119996), range(119997, 120004), range(120005, 120070), range(120071, 120075), range(120077, 120085), range(120086, 120093), range(120094, 120122), range(120123, 120127), range(120128, 120133), range(120134, 120135), range(120138, 120145), range(120146, 120486), range(120488, 120780), range(120782, 121484), range(121499, 121504), range(121505, 121520), range(122880, 122887), range(122888, 122905), range(122907, 122914), range(122915, 122917), range(122918, 122923), range(123136, 123181), range(123184, 123198), range(123200, 123210), range(123214, 123216), range(123584, 123642), range(123647, 123648), range(124928, 125125), range(125127, 125143), range(125184, 125260), range(125264, 125274), range(125278, 125280), range(126065, 126133), range(126209, 126270), range(126464, 126468), range(126469, 126496), range(126497, 126499), range(126500, 126501), range(126503, 126504), range(126505, 126515), range(126516, 126520), range(126521, 126522), range(126523, 126524), range(126530, 126531), range(126535, 126536), range(126537, 126538), range(126539, 126540), range(126541, 126544), range(126545, 126547), range(126548, 126549), range(126551, 126552), range(126553, 126554), range(126555, 126556), range(126557, 126558), range(126559, 126560), range(126561, 126563), range(126564, 126565), range(126567, 126571), range(126572, 126579), range(126580, 126584), range(126585, 126589), range(126590, 126591), range(126592, 126602), range(126603, 126620), range(126625, 126628), range(126629, 126634), range(126635, 126652), range(126704, 126706), range(126976, 127020), range(127024, 127124), range(127136, 127151), range(127153, 127168), range(127169, 127184), range(127185, 127222), range(127232, 127406), range(127462, 127491), range(127504, 127548), range(127552, 127561), range(127568, 127570), range(127584, 127590), range(127744, 128728), range(128736, 128749), range(128752, 128765), range(128768, 128884), range(128896, 128985), range(128992, 129004), range(129024, 129036), range(129040, 129096), range(129104, 129114), range(129120, 129160), range(129168, 129198), range(129200, 129202), range(129280, 129401), range(129402, 129484), range(129485, 129620), range(129632, 129646), range(129648, 129653), range(129656, 129659), range(129664, 129671), range(129680, 129705), range(129712, 129719), range(129728, 129731), range(129744, 129751), range(129792, 129939), range(129940, 129995), range(130032, 130042), range(131072, 173790), range(173824, 177973), range(177984, 178206), range(178208, 183970), range(183984, 191457), range(194560, 195102), range(196608, 201547), range(917760, 918000)])),
        18: list(itertools.chain.from_iterable([range(32, 39), range(40, 60), range(61, 127), range(161, 173), range(174, 888), range(890, 896), range(900, 907), range(908, 909), range(910, 930), range(931, 1328), range(1329, 1367), range(1369, 1419), range(1421, 1424), range(1425, 1480), range(1488, 1515), range(1519, 1525), range(1542, 1564), range(1566, 1757), range(1758, 1806), range(1808, 1867), range(1869, 1970), range(1984, 2043), range(2045, 2094), range(2096, 2111), range(2112, 2140), range(2142, 2143), range(2144, 2155), range(2208, 2229), range(2230, 2248), range(2259, 2274), range(2275, 2436), range(2437, 2445), range(2447, 2449), range(2451, 2473), range(2474, 2481), range(2482, 2483), range(2486, 2490), range(2492, 2501), range(2503, 2505), range(2507, 2511), range(2519, 2520), range(2524, 2526), range(2527, 2532), range(2534, 2559), range(2561, 2564), range(2565, 2571), range(2575, 2577), range(2579, 2601), range(2602, 2609), range(2610, 2612), range(2613, 2615), range(2616, 2618), range(2620, 2621), range(2622, 2627), range(2631, 2633), range(2635, 2638), range(2641, 2642), range(2649, 2653), range(2654, 2655), range(2662, 2679), range(2689, 2692), range(2693, 2702), range(2703, 2706), range(2707, 2729), range(2730, 2737), range(2738, 2740), range(2741, 2746), range(2748, 2758), range(2759, 2762), range(2763, 2766), range(2768, 2769), range(2784, 2788), range(2790, 2802), range(2809, 2816), range(2817, 2820), range(2821, 2829), range(2831, 2833), range(2835, 2857), range(2858, 2865), range(2866, 2868), range(2869, 2874), range(2876, 2885), range(2887, 2889), range(2891, 2894), range(2901, 2904), range(2908, 2910), range(2911, 2916), range(2918, 2936), range(2946, 2948), range(2949, 2955), range(2958, 2961), range(2962, 2966), range(2969, 2971), range(2972, 2973), range(2974, 2976), range(2979, 2981), range(2984, 2987), range(2990, 3002), range(3006, 3011), range(3014, 3017), range(3018, 3022), range(3024, 3025), range(3031, 3032), range(3046, 3067), range(3072, 3085), range(3086, 3089), range(3090, 3113), range(3114, 3130), range(3133, 3141), range(3142, 3145), range(3146, 3150), range(3157, 3159), range(3160, 3163), range(3168, 3172), range(3174, 3184), range(3191, 3213), range(3214, 3217), range(3218, 3241), range(3242, 3252), range(3253, 3258), range(3260, 3269), range(3270, 3273), range(3274, 3278), range(3285, 3287), range(3294, 3295), range(3296, 3300), range(3302, 3312), range(3313, 3315), range(3328, 3341), range(3342, 3345), range(3346, 3397), range(3398, 3401), range(3402, 3408), range(3412, 3428), range(3430, 3456), range(3457, 3460), range(3461, 3479), range(3482, 3506), range(3507, 3516), range(3517, 3518), range(3520, 3527), range(3530, 3531), range(3535, 3541), range(3542, 3543), range(3544, 3552), range(3558, 3568), range(3570, 3573), range(3585, 3643), range(3647, 3676), range(3713, 3715), range(3716, 3717), range(3718, 3723), range(3724, 3748), range(3749, 3750), range(3751, 3774), range(3776, 3781), range(3782, 3783), range(3784, 3790), range(3792, 3802), range(3804, 3808), range(3840, 3912), range(3913, 3949), range(3953, 3992), range(3993, 4029), range(4030, 4045), range(4046, 4059), range(4096, 4294), range(4295, 4296), range(4301, 4302), range(4304, 4681), range(4682, 4686), range(4688, 4695), range(4696, 4697), range(4698, 4702), range(4704, 4745), range(4746, 4750), range(4752, 4785), range(4786, 4790), range(4792, 4799), range(4800, 4801), range(4802, 4806), range(4808, 4823), range(4824, 4881), range(4882, 4886), range(4888, 4955), range(4957, 4989), range(4992, 5018), range(5024, 5110), range(5112, 5118), range(5120, 5760), range(5761, 5789), range(5792, 5881), range(5888, 5901), range(5902, 5909), range(5920, 5943), range(5952, 5972), range(5984, 5997), range(5998, 6001), range(6002, 6004), range(6016, 6110), range(6112, 6122), range(6128, 6138), range(6144, 6158), range(6160, 6170), range(6176, 6265), range(6272, 6315), range(6320, 6390), range(6400, 6431), range(6432, 6444), range(6448, 6460), range(6464, 6465), range(6468, 6510), range(6512, 6517), range(6528, 6572), range(6576, 6602), range(6608, 6619), range(6622, 6684), range(6686, 6751), range(6752, 6781), range(6783, 6794), range(6800, 6810), range(6816, 6830), range(6832, 6849), range(6912, 6988), range(6992, 7037), range(7040, 7156), range(7164, 7224), range(7227, 7242), range(7245, 7305), range(7312, 7355), range(7357, 7368), range(7376, 7419), range(7424, 7674), range(7675, 7958), range(7960, 7966), range(7968, 8006), range(8008, 8014), range(8016, 8024), range(8025, 8026), range(8027, 8028), range(8029, 8030), range(8031, 8062), range(8064, 8117), range(8118, 8133), range(8134, 8148), range(8150, 8156), range(8157, 8176), range(8178, 8181), range(8182, 8191), range(8208, 8232), range(8240, 8287), range(8304, 8306), range(8308, 8335), range(8336, 8349), range(8352, 8384), range(8400, 8433), range(8448, 8588), range(8592, 9255), range(9280, 9291), range(9312, 11124), range(11126, 11158), range(11159, 11311), range(11312, 11359), range(11360, 11508), range(11513, 11558), range(11559, 11560), range(11565, 11566), range(11568, 11624), range(11631, 11633), range(11647, 11671), range(11680, 11687), range(11688, 11695), range(11696, 11703), range(11704, 11711), range(11712, 11719), range(11720, 11727), range(11728, 11735), range(11736, 11743), range(11744, 11859), range(11904, 11930), range(11931, 12020), range(12032, 12246), range(12272, 12284), range(12289, 12352), range(12353, 12439), range(12441, 12544), range(12549, 12592), range(12593, 12687), range(12688, 12772), range(12784, 12831), range(12832, 40957), range(40960, 42125), range(42128, 42183), range(42192, 42540), range(42560, 42744), range(42752, 42944), range(42946, 42955), range(42997, 43053), range(43056, 43066), range(43072, 43128), range(43136, 43206), range(43214, 43226), range(43232, 43348), range(43359, 43389), range(43392, 43470), range(43471, 43482), range(43486, 43519), range(43520, 43575), range(43584, 43598), range(43600, 43610), range(43612, 43715), range(43739, 43767), range(43777, 43783), range(43785, 43791), range(43793, 43799), range(43808, 43815), range(43816, 43823), range(43824, 43884), range(43888, 44014), range(44016, 44026), range(44032, 55204), range(55216, 55239), range(55243, 55292), range(63744, 64110), range(64112, 64218), range(64256, 64263), range(64275, 64280), range(64285, 64311), range(64312, 64317), range(64318, 64319), range(64320, 64322), range(64323, 64325), range(64326, 64450), range(64467, 64832), range(64848, 64912), range(64914, 64968), range(65008, 65022), range(65024, 65050), range(65056, 65107), range(65108, 65127), range(65128, 65132), range(65136, 65141), range(65142, 65277), range(65281, 65471), range(65474, 65480), range(65482, 65488), range(65490, 65496), range(65498, 65501), range(65504, 65511), range(65512, 65519), range(65532, 65534), range(65536, 65548), range(65549, 65575), range(65576, 65595), range(65596, 65598), range(65599, 65614), range(65616, 65630), range(65664, 65787), range(65792, 65795), range(65799, 65844), range(65847, 65935), range(65936, 65949), range(65952, 65953), range(66000, 66046), range(66176, 66205), range(66208, 66257), range(66272, 66300), range(66304, 66340), range(66349, 66379), range(66384, 66427), range(66432, 66462), range(66463, 66500), range(66504, 66518), range(66560, 66718), range(66720, 66730), range(66736, 66772), range(66776, 66812), range(66816, 66856), range(66864, 66916), range(66927, 66928), range(67072, 67383), range(67392, 67414), range(67424, 67432), range(67584, 67590), range(67592, 67593), range(67594, 67638), range(67639, 67641), range(67644, 67645), range(67647, 67670), range(67671, 67743), range(67751, 67760), range(67808, 67827), range(67828, 67830), range(67835, 67868), range(67871, 67898), range(67903, 67904), range(67968, 68024), range(68028, 68048), range(68050, 68100), range(68101, 68103), range(68108, 68116), range(68117, 68120), range(68121, 68150), range(68152, 68155), range(68159, 68169), range(68176, 68185), range(68192, 68256), range(68288, 68327), range(68331, 68343), range(68352, 68406), range(68409, 68438), range(68440, 68467), range(68472, 68498), range(68505, 68509), range(68521, 68528), range(68608, 68681), range(68736, 68787), range(68800, 68851), range(68858, 68904), range(68912, 68922), range(69216, 69247), range(69248, 69290), range(69291, 69294), range(69296, 69298), range(69376, 69416), range(69424, 69466), range(69552, 69580), range(69600, 69623), range(69632, 69710), range(69714, 69744), range(69759, 69821), range(69822, 69826), range(69840, 69865), range(69872, 69882), range(69888, 69941), range(69942, 69960), range(69968, 70007), range(70016, 70112), range(70113, 70133), range(70144, 70162), range(70163, 70207), range(70272, 70279), range(70280, 70281), range(70282, 70286), range(70287, 70302), range(70303, 70314), range(70320, 70379), range(70384, 70394), range(70400, 70404), range(70405, 70413), range(70415, 70417), range(70419, 70441), range(70442, 70449), range(70450, 70452), range(70453, 70458), range(70459, 70469), range(70471, 70473), range(70475, 70478), range(70480, 70481), range(70487, 70488), range(70493, 70500), range(70502, 70509), range(70512, 70517), range(70656, 70748), range(70749, 70754), range(70784, 70856), range(70864, 70874), range(71040, 71094), range(71096, 71134), range(71168, 71237), range(71248, 71258), range(71264, 71277), range(71296, 71353), range(71360, 71370), range(71424, 71451), range(71453, 71468), range(71472, 71488), range(71680, 71740), range(71840, 71923), range(71935, 71943), range(71945, 71946), range(71948, 71956), range(71957, 71959), range(71960, 71990), range(71991, 71993), range(71995, 72007), range(72016, 72026), range(72096, 72104), range(72106, 72152), range(72154, 72165), range(72192, 72264), range(72272, 72355), range(72384, 72441), range(72704, 72713), range(72714, 72759), range(72760, 72774), range(72784, 72813), range(72816, 72848), range(72850, 72872), range(72873, 72887), range(72960, 72967), range(72968, 72970), range(72971, 73015), range(73018, 73019), range(73020, 73022), range(73023, 73032), range(73040, 73050), range(73056, 73062), range(73063, 73065), range(73066, 73103), range(73104, 73106), range(73107, 73113), range(73120, 73130), range(73440, 73465), range(73648, 73649), range(73664, 73714), range(73727, 74650), range(74752, 74863), range(74864, 74869), range(74880, 75076), range(77824, 78895), range(82944, 83527), range(92160, 92729), range(92736, 92767), range(92768, 92778), range(92782, 92784), range(92880, 92910), range(92912, 92918), range(92928, 92998), range(93008, 93018), range(93019, 93026), range(93027, 93048), range(93053, 93072), range(93760, 93851), range(93952, 94027), range(94031, 94088), range(94095, 94112), range(94176, 94181), range(94192, 94194), range(94208, 100344), range(100352, 101590), range(101632, 101641), range(110592, 110879), range(110928, 110931), range(110948, 110952), range(110960, 111356), range(113664, 113771), range(113776, 113789), range(113792, 113801), range(113808, 113818), range(113820, 113824), range(118784, 119030), range(119040, 119079), range(119081, 119155), range(119163, 119273), range(119296, 119366), range(119520, 119540), range(119552, 119639), range(119648, 119673), range(119808, 119893), range(119894, 119965), range(119966, 119968), range(119970, 119971), range(119973, 119975), range(119977, 119981), range(119982, 119994), range(119995, 119996), range(119997, 120004), range(120005, 120070), range(120071, 120075), range(120077, 120085), range(120086, 120093), range(120094, 120122), range(120123, 120127), range(120128, 120133), range(120134, 120135), range(120138, 120145), range(120146, 120486), range(120488, 120780), range(120782, 121484), range(121499, 121504), range(121505, 121520), range(122880, 122887), range(122888, 122905), range(122907, 122914), range(122915, 122917), range(122918, 122923), range(123136, 123181), range(123184, 123198), range(123200, 123210), range(123214, 123216), range(123584, 123642), range(123647, 123648), range(124928, 125125), range(125127, 125143), range(125184, 125260), range(125264, 125274), range(125278, 125280), range(126065, 126133), range(126209, 126270), range(126464, 126468), range(126469, 126496), range(126497, 126499), range(126500, 126501), range(126503, 126504), range(126505, 126515), range(126516, 126520), range(126521, 126522), range(126523, 126524), range(126530, 126531), range(126535, 126536), range(126537, 126538), range(126539, 126540), range(126541, 126544), range(126545, 126547), range(126548, 126549), range(126551, 126552), range(126553, 126554), range(126555, 126556), range(126557, 126558), range(126559, 126560), range(126561, 126563), range(126564, 126565), range(126567, 126571), range(126572, 126579), range(126580, 126584), range(126585, 126589), range(126590, 126591), range(126592, 126602), range(126603, 126620), range(126625, 126628), range(126629, 126634), range(126635, 126652), range(126704, 126706), range(126976, 127020), range(127024, 127124), range(127136, 127151), range(127153, 127168), range(127169, 127184), range(127185, 127222), range(127232, 127406), range(127462, 127491), range(127504, 127548), range(127552, 127561), range(127568, 127570), range(127584, 127590), range(127744, 128728), range(128736, 128749), range(128752, 128765), range(128768, 128884), range(128896, 128985), range(128992, 129004), range(129024, 129036), range(129040, 129096), range(129104, 129114), range(129120, 129160), range(129168, 129198), range(129200, 129202), range(129280, 129401), range(129402, 129484), range(129485, 129620), range(129632, 129646), range(129648, 129653), range(129656, 129659), range(129664, 129671), range(129680, 129705), range(129712, 129719), range(129728, 129731), range(129744, 129751), range(129792, 129939), range(129940, 129995), range(130032, 130042), range(131072, 173790), range(173824, 177973), range(177984, 178206), range(178208, 183970), range(183984, 191457), range(194560, 195102), range(196608, 201547), range(917760, 918000)])),
    }
